<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>我的笔记</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://note.pin.bo/"/>
  <updated>2019-07-23T01:33:56.742Z</updated>
  <id>https://note.pin.bo/</id>
  
  <author>
    <name>Phil</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>极客时间课程优惠码分享</title>
    <link href="https://note.pin.bo/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4%E9%82%80%E8%AF%B7%E7%A0%81%E5%88%86%E4%BA%AB/"/>
    <id>https://note.pin.bo/极客时间邀请码分享/</id>
    <published>2019-05-19T16:00:00.000Z</published>
    <updated>2019-07-23T01:33:56.742Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>首先列出课程目录，然后贴出微信优惠码</p></blockquote><ul><li><a href="#1">《零基础学Java》</a></li><li><a href="#2">《零基础学Python》</a></li><li><a href="#3">《SQL必知必会》</a></li><li><a href="#4">《玩转Git三剑客》</a></li><li><a href="#5">《玩转Spring全家桶》</a></li><li><a href="#6">《微服务架构实战160讲》</a></li><li><a href="#7">《Java核心技术36讲》</a></li><li><a href="#8">《Java并发编程实战》</a></li><li><a href="#9">《Java性能调优实战》</a></li><li><a href="#10">《深入拆解Java虚拟机》</a></li><li><a href="#11">《深入浅出计算机组成原理》</a></li><li><a href="#12">《数据结构与算法之美》</a></li><li><a href="#13">《算法面试通关40讲》</a></li><li><a href="#14">《Elasticsearch核心技术与实战》</a></li><li><a href="#15">《如何设计一个秒杀系统》</a></li><li><a href="#16">《左耳朵耗子专栏》</a></li></ul><a id="more"></a><p><span id="1">《零基础学Java》</span><br><img src="/images/post_images/geekbang/零基础学Java.jpg" alt="零基础学Java"><br><span id="2">《零基础学Python》</span><br><img src="/images/post_images/geekbang/零基础学Python.jpg" alt="零基础学Python"><br><span id="3">《SQL必知必会》</span><br><img src="/images/post_images/geekbang/SQL必知必会.jpg" alt="SQL必知必会"><br><span id="4">《玩转Git三剑客》</span><br><img src="/images/post_images/geekbang/玩转Git三剑客.jpg" alt="玩转Git三剑客"><br><span id="5">《玩转Spring全家桶》</span><br><img src="/images/post_images/geekbang/玩转Spring全家桶.jpg" alt="玩转Spring全家桶"><br><span id="6">《微服务架构实战160讲》</span><br><img src="/images/post_images/geekbang/微服务架构实战160讲.jpg" alt="微服务架构实战160讲"><br><span id="7">《Java核心技术36讲》</span><br><img src="/images/post_images/geekbang/Java核心技术36讲.jpg" alt="Java核心技术36讲"><br><span id="8">《Java并发编程实战》</span><br><img src="/images/post_images/geekbang/Java并发编程实战.jpg" alt="Java并发编程实战"><br><span id="9">《Java性能调优实战》</span><br><img src="/images/post_images/geekbang/Java性能调优实战.jpg" alt="Java性能调优实战"><br><span id="10">《深入拆解Java虚拟机》</span><br><img src="/images/post_images/geekbang/深入拆解Java虚拟机.jpg" alt="深入拆解Java虚拟机"><br><span id="11">《深入浅出计算机组成原理》</span><br><img src="/images/post_images/geekbang/深入浅出计算机组成原理.jpg" alt="深入浅出计算机组成原理"><br><span id="12">《数据结构与算法之美》</span><br><img src="/images/post_images/geekbang/数据结构与算法之美.jpg" alt="数据结构与算法之美"><br><span id="13">《算法面试通关40讲》</span><br><img src="/images/post_images/geekbang/算法面试通关40讲.jpg" alt="算法面试通关40讲"><br><span id="14">《Elasticsearch核心技术与实战》</span><br><img src="/images/post_images/geekbang/Elasticsearch核心技术与实战.jpg" alt="Elasticsearch核心技术与实战"><br><span id="15">《如何设计一个秒杀系统》</span><br><img src="/images/post_images/geekbang/如何设计一个秒杀系统.jpg" alt="如何设计一个秒杀系统"><br><span id="16">《左耳朵耗子专栏》</span><br><img src="/images/post_images/geekbang/左耳朵耗子专栏.jpg" alt="左耳朵耗子专栏"></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;首先列出课程目录，然后贴出微信优惠码&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1&quot;&gt;《零基础学Java》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2&quot;&gt;《零基础学Python》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3&quot;&gt;《SQL必知必会》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#4&quot;&gt;《玩转Git三剑客》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#5&quot;&gt;《玩转Spring全家桶》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#6&quot;&gt;《微服务架构实战160讲》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#7&quot;&gt;《Java核心技术36讲》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#8&quot;&gt;《Java并发编程实战》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#9&quot;&gt;《Java性能调优实战》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#10&quot;&gt;《深入拆解Java虚拟机》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#11&quot;&gt;《深入浅出计算机组成原理》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#12&quot;&gt;《数据结构与算法之美》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#13&quot;&gt;《算法面试通关40讲》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#14&quot;&gt;《Elasticsearch核心技术与实战》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#15&quot;&gt;《如何设计一个秒杀系统》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#16&quot;&gt;《左耳朵耗子专栏》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Tutorial" scheme="https://note.pin.bo/categories/Tutorial/"/>
    
    
      <category term="优惠码" scheme="https://note.pin.bo/tags/%E4%BC%98%E6%83%A0%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>奇淫技巧之Linux篇</title>
    <link href="https://note.pin.bo/%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7%E4%B9%8BLinux/"/>
    <id>https://note.pin.bo/奇技淫巧之Linux/</id>
    <published>2018-05-20T03:13:00.000Z</published>
    <updated>2019-08-14T06:14:03.385Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Linux学习笔记</p></blockquote><h3 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a>目录操作</h3><h4 id="find"><a href="#find" class="headerlink" title="find"></a>find</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">find [-H] [-L] [-P] [-Olevel] [-D help|tree|search|stat|rates|opt|exec] [path...] [expression]</span><br><span class="line"></span><br><span class="line">path: 默认为当前目录</span><br><span class="line">-ctime n : 在过去n天内被修改过的文件</span><br><span class="line">-cmin n : 在过去n分钟内被修改过</span><br><span class="line">-name name, -iname name : 文件名称符合name的文件，iname会忽略大小写</span><br><span class="line">d: 目录</span><br><span class="line">f: 一般文件</span><br></pre></td></tr></table></figure><ol><li><p>查找文件的目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -name *.log  //*为通配符</span><br></pre></td></tr></table></figure></li><li><p>将目前目录其下子目录中所有一般文件列出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -type f</span><br></pre></td></tr></table></figure></li><li><p>将当前目录及其子目录下所有最近 20 天内更新过的文件列出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -ctime -20</span><br></pre></td></tr></table></figure></li><li><p>创建多级目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p a/b/c/d</span><br></pre></td></tr></table></figure></li><li><p>拷贝文件夹a到目录b</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -rvf a/ /b/</span><br></pre></td></tr></table></figure></li><li><p>移动文件a到/tmp目录，并重命名为b</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv -vf a /tmp/b</span><br></pre></td></tr></table></figure></li><li><p>删除tmp目录的所有文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rvf /tmp/</span><br></pre></td></tr></table></figure></li></ol><h3 id="日志查看"><a href="#日志查看" class="headerlink" title="日志查看"></a>日志查看</h3><h4 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h4><ol><li><p>打印匹配行前n行内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat log.log | grep -A n "keyword"</span><br></pre></td></tr></table></figure></li><li><p>打印匹配行后n行内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat log.log | grep -B n "keyword"</span><br></pre></td></tr></table></figure></li><li><p>打印匹配行前后n行内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat log.log | grep -C n "keyword"</span><br></pre></td></tr></table></figure></li><li><p>翻页查看</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat log.log | grep -C n "keyword" | more //空格键下翻</span><br><span class="line">cat log.log | grep -C n "keyword" | less //jk键上下翻</span><br></pre></td></tr></table></figure></li><li><p>把查询的内容存放到临时文件中  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat -n log.log &gt; tmp.log  //-n代表加上行号</span><br><span class="line">cat -b log.log &gt; tmp.log  //-b代表空白行不加行号</span><br></pre></td></tr></table></figure></li><li><p>把查询的内容追加到临时文件中  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat -n log.log &gt;&gt; tmp.log  //-n代表加上行号</span><br><span class="line">cat -b log.log &gt;&gt; tmp.log  //-b代表空白行不加行号</span><br></pre></td></tr></table></figure></li></ol><h4 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h4><ol><li><p>实时监控日志 显示最后m行 -f自动刷新 默认10行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tail -f -nm log.log</span><br><span class="line">tail -mf log.log</span><br></pre></td></tr></table></figure></li><li><p>简写命令 tailf 等于 tail -f</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tailf log.log</span><br></pre></td></tr></table></figure></li><li><p>显示最后n个字符</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -cn log.log</span><br></pre></td></tr></table></figure></li><li><p>从n行显示到文件末尾</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail +n log.log</span><br></pre></td></tr></table></figure></li></ol><h4 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h4><p>命令定义：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">grep [-a] [-c] [-n] [-An] [-Bn] [-Cn] [--color=auto] [-i] [keyword] [filename]</span><br><span class="line"></span><br><span class="line">-a ：将 binary 文件以 text 文件的方式搜寻数据</span><br><span class="line">-An: 除了显示符合行之外，并显示该行之后n行的内容</span><br><span class="line">-Bn: 除了显示符合行之外，并显示该行之前n行的内容</span><br><span class="line">-Cn: 除了显示符合行之外，并显示该行之前后n行的内容</span><br><span class="line">-c ：计算找到 '搜寻字符串' 的次数</span><br><span class="line">-n ：顺便输出行号</span><br><span class="line">--color=auto ：可以将找到的关键词部分加上颜色</span><br><span class="line">-i ：忽略大小写的不同，所以大小写视为相同</span><br><span class="line">keyword：搜索关键词</span><br><span class="line">filename: 指定被搜索的文件</span><br></pre></td></tr></table></figure><ol><li>查询文件中出现关键字的行<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -n --color=auto 'warn' log.log -C0 //代表只输出出现关键字的那一行 默认为0</span><br></pre></td></tr></table></figure></li></ol><h4 id="head"><a href="#head" class="headerlink" title="head"></a>head</h4><p>用途：显示文件的开头至标准输出中</p><p>命令定义：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">head [OPTION]... FILE...</span><br><span class="line"> [OPTION]</span><br><span class="line">　　　　-n显示文件的前n行</span><br><span class="line">　　　　　　如：head -5 file　　显示文件file的前5行</span><br><span class="line"></span><br><span class="line">　　　　-c n　　显示文件的前n个字节</span><br><span class="line">如：head -c 20 file　　显示文件file的前20个字节</span><br><span class="line"></span><br><span class="line">　　　　-c -n　 显示文件除了最后n个字节的其他内容</span><br><span class="line"></span><br><span class="line">　　　　-q　　  隐藏文件名（当指定了多个文件时，在内容的前面会以文件名作为开头）</span><br><span class="line"></span><br><span class="line">　　　　-v　　   显示文件名（默认单个文件不显示，多个文件显示）</span><br></pre></td></tr></table></figure></p><ol><li>查询m行开始的前20行<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat -n log.log | tail -n +100| head -n 20 //显示100至120行的内容</span><br></pre></td></tr></table></figure></li></ol><h4 id="more"><a href="#more" class="headerlink" title="more"></a>more</h4><p>用途：</p><p>Linux more 命令类似 cat ，不过会以一页一页的形式显示，更方便使用者逐页阅读，而最基本的指令就是按空白键（space）就往下一页显示，按 b 键就会往回（back）一页显示，而且还有搜寻字串的功能（与 vi 相似），使用中的说明文件，请按 h 。</p><p>命令定义：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">more [-dlfpcsu] [-num] [+/pattern] [+linenum] [fileNames..]</span><br><span class="line"></span><br><span class="line">参数：</span><br><span class="line">-num 一次显示的行数</span><br><span class="line">-d 提示使用者，在画面下方显示 [Press space to continue, 'q' to quit.] ，如果使用者按错键，则会显示 [Press 'h' for instructions.] 而不是 '哔' 声</span><br><span class="line">-l 取消遇见特殊字元 ^L（送纸字元）时会暂停的功能</span><br><span class="line">-f 计算行数时，以实际上的行数，而非自动换行过后的行数（有些单行字数太长的会被扩展为两行或两行以上）</span><br><span class="line">-p 不以卷动的方式显示每一页，而是先清除萤幕后再显示内容</span><br><span class="line">-c 跟 -p 相似，不同的是先显示内容再清除其他旧资料</span><br><span class="line">-s 当遇到有连续两行以上的空白行，就代换为一行的空白行</span><br><span class="line">-u 不显示下引号 （根据环境变数 TERM 指定的 terminal 而有所不同）</span><br><span class="line">+/pattern 在每个文档显示前搜寻该字串（pattern），然后从该字串之后开始显示</span><br><span class="line">+num 从第 num 行开始显示</span><br><span class="line">fileNames 欲显示内容的文档，可为复数个数</span><br><span class="line"></span><br><span class="line">常用命令：</span><br><span class="line">Enter 向下n行，需要定义。默认为1行</span><br><span class="line">Ctrl+F 向下滚动一屏</span><br><span class="line">Ctrl+B 返回上一屏</span><br><span class="line">空格键 向下滚动一屏</span><br><span class="line">b 返回上一屏</span><br><span class="line">= 输出当前行的行号</span><br><span class="line">:f 输出文件名和当前行的行号</span><br><span class="line">V 调用vi编辑器</span><br><span class="line">!命令 调用Shell，并执行命令</span><br><span class="line">q 退出more</span><br></pre></td></tr></table></figure></p><ol><li>从文件第5行开始分页查找<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">more +5 -4 +/s  a.log  从第5行开始查找 匹配s的行 一页4行</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Linux学习笔记&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;目录操作&quot;&gt;&lt;a href=&quot;#目录操作&quot; class=&quot;headerlink&quot; title=&quot;目录操作&quot;&gt;&lt;/a&gt;目录操作&lt;/h3&gt;&lt;h4 id=&quot;find&quot;&gt;&lt;a href
      
    
    </summary>
    
      <category term="Coding" scheme="https://note.pin.bo/categories/Coding/"/>
    
    
      <category term="Linux" scheme="https://note.pin.bo/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>AWS学习笔记</title>
    <link href="https://note.pin.bo/2017-05-20-aws-note/"/>
    <id>https://note.pin.bo/2017-05-20-aws-note/</id>
    <published>2017-05-20T03:13:00.000Z</published>
    <updated>2018-07-26T06:30:54.609Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>aws的所有学习笔记</p></blockquote><h3 id="申请"><a href="#申请" class="headerlink" title="申请"></a>申请</h3><p>网上有教程，需信用卡</p><h3 id="设置root和ec2-user的shh登录"><a href="#设置root和ec2-user的shh登录" class="headerlink" title="设置root和ec2-user的shh登录"></a>设置root和ec2-user的shh登录</h3><p>给root和ec2-user设置密码，并可以使用账号密码登录</p><ol><li><p>根据官网提供的方法登录连接到EC2服务器（官网推荐windows用户使用PUTTY连接）</p><p> 主机：是服务器的Public DNS<br> 端口：22</p></li><li><p>创建root的密码，输入如下命令：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo passwd root</span><br></pre></td></tr></table></figure></li><li><p>然后会提示你输入new password。输入一个你要设置的root的密码，需要你再输入一遍进行验证。</p></li><li><p>接下来，切换到root身份，输入如下命令：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> su root</span><br></pre></td></tr></table></figure> <a id="more"></a></li><li><p>使用root身份编辑亚马逊云主机的ssh登录方式，找到 PasswordAuthentication no，把no改成yes。输入：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure></li><li><p>接下来，要重新启动下sshd，如下命令：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo /sbin/service sshd restart</span><br></pre></td></tr></table></figure></li><li><p>然后再切换到root身份</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> su root</span><br></pre></td></tr></table></figure></li><li><p>再为原来的”ec2-user”添加登录密码。如下命令：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> passwd ec2-user</span><br></pre></td></tr></table></figure><p> 按提示，两次输入密码。</p></li><li><p>如果需要root用户登录，需修改sshd配置文件</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> vi /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><p> PermitRootLogin这行改为</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PermitRootLogin yes</span><br></pre></td></tr></table></figure><p> PasswordAuthentication no改为</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PasswordAuthentication yes</span><br></pre></td></tr></table></figure><p> UsePAM yes改为</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UsePAM no</span><br></pre></td></tr></table></figure></li><li><p>重启AWS VPS，就可以使用root正常登陆了</p></li></ol><h3 id="安装常用软件"><a href="#安装常用软件" class="headerlink" title="安装常用软件"></a>安装常用软件</h3><h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><p>查看版本当前操作系统发行版信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cat /etc/issue</span><br><span class="line">Amazon Linux AMI release 2017.03</span><br><span class="line">Kernel \r on an \m</span><br></pre></td></tr></table></figure><p>查看当前操作系统版本内核信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> uname -a</span><br><span class="line">Linux ip-255-255-255-255 4.9.20-11.31.amzn1.x86_64 #1 SMP Thu Apr 13 01:53:57 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux</span><br></pre></td></tr></table></figure><p>更新现有软件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo yum update</span><br></pre></td></tr></table></figure><p>安装lrzsz</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> yum -y install lrzsz</span><br></pre></td></tr></table></figure><p>如果安装不成功</p><p>安装gcc</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo yum install gcc build-essential</span><br></pre></td></tr></table></figure><p>去页面找到下载地址<br><a href="https://ohse.de/uwe/software/lrzsz.html" target="_blank" rel="noopener">https://ohse.de/uwe/software/lrzsz.html</a><br><a href="https://ohse.de/uwe/releases/lrzsz-0.12.20.tar.gz" target="_blank" rel="noopener">https://ohse.de/uwe/releases/lrzsz-0.12.20.tar.gz</a></p><p>用命令下载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> wget https://ohse.de/uwe/releases/lrzsz-0.12.20.tar.gz</span><br></pre></td></tr></table></figure><p>解压缩<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> tar -xzvf lrzsz-0.12.20.tar.gz</span><br></pre></td></tr></table></figure></p><p>安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cd lrzsz-0.12.20</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> ./configure --prefix=/usr/local/lrzsz</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> sudo make </span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> sudo make install </span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> cd /usr/bin</span><br><span class="line"><span class="meta">$</span> ln -s /usr/local/lrzsz/bin/lrz rz</span><br><span class="line"><span class="meta">$</span> ln -s /usr/local/lrzsz/bin/lsz sz</span><br></pre></td></tr></table></figure><p>测试 rz  sz</p><h4 id="更换JDK"><a href="#更换JDK" class="headerlink" title="更换JDK"></a>更换JDK</h4><p>查看jdk版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> java -version</span><br><span class="line">java version "1.7.0_131"</span><br><span class="line">OpenJDK Runtime Environment (amzn-2.6.9.0.71.amzn1-x86_64 u131-b00)</span><br><span class="line">OpenJDK 64-Bit Server VM (build 24.131-b00, mixed mode)</span><br></pre></td></tr></table></figure><p>查询是否被安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> rpm -qa |grep java</span><br><span class="line">java-1.7.0-openjdk-1.7.0.131-2.6.9.0.71.amzn1.x86_64</span><br><span class="line">javapackages-tools-0.9.1-1.5.amzn1.noarch</span><br><span class="line">tzdata-java-2017b-1.69.amzn1.noarch</span><br></pre></td></tr></table></figure><p>卸载JDK</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> rpm -e --nodeps java-1.7.0-openjdk-1.7.0.131-2.6.9.0.71.amzn1.x86_64</span><br><span class="line"><span class="meta">$</span> rpm -e --nodeps tzdata-java-2017b-1.69.amzn1.noarch</span><br></pre></td></tr></table></figure><p>查询是否被安装(是否卸载成功)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> rpm -qa |grep java</span><br><span class="line">javapackages-tools-0.9.1-1.5.amzn1.noarch</span><br></pre></td></tr></table></figure><p>去官网找到下载链接，然后下载jdk 安装，JDK默认会安装到/usr/java/目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> wget --no-cookies --no-check-certificate --header "Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie" http://download.oracle.com/otn-pub/java/jdk/8u131-b11/d54c1d3a095b4ff2b6607d096fa80163/jdk-8u131-linux-x64.rpm</span><br><span class="line"><span class="meta">$</span> rpm -ivh jdk-8u131-linux-x64.rpm</span><br></pre></td></tr></table></figure><p>配置JAVA_HOME,CLASSPATH,PATH环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> vi /etc/profile</span><br></pre></td></tr></table></figure><p>添加下面几行后保存退出</p><pre><code>export JAVA_HOME=/usr/java/jdk1.8.0_131export PATH=$PATH:$JAVA_HOME/binexport CLASSPATH=.:$JAVA_HOME/lib</code></pre><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> source /etc/profile</span><br></pre></td></tr></table></figure><p>查看安装成功，如下显示安装成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> java -version</span><br><span class="line">java version "1.8.0_131"</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_131-b11)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.131-b11, mixed mode)</span><br></pre></td></tr></table></figure><h4 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h4><p>安装</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum instal nginx</span><br></pre></td></tr></table></figure><p>启动和设置开机启动</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ /etc/init.d/nginx start</span><br><span class="line">Starting nginx:                                            [  OK  ]</span><br><span class="line">$ chkconfig nginx on</span><br></pre></td></tr></table></figure><h4 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h4><p>yum install mysql mysql-server</p><p>在服务器上，编辑/etc/my.cnf中允许所有连接<br>bind-address          = 0.0.0.0<br>user=mysql</p><p>/usr/bin/mysqld_safe start –user=mysql</p><p>service mysqld start</p><p>chkconfig –levels 345 mysqld on</p><p>service mysql start<br>service mysql stop<br>service mysql restart<br>其实如果你对service比较熟悉的话，就会知道运行上面命令，其实是service命令去找/etc/init.d下的相关的mysql脚本去执行启动、关闭动作。</p><p>直接回车<br>mysql（mysql -h localhost -u root -p）</p><p>远程访问mysql速度很慢的解决方法<br>修改/etc/my.cnf或my.ini<br>[mysqld]下添加<br>skip-name-resolve<br>skip-grant-tables</p><p><a href="http://www.cnblogs.com/Darlin356230410/p/4500165.html" target="_blank" rel="noopener">http://www.cnblogs.com/Darlin356230410/p/4500165.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;aws的所有学习笔记&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;申请&quot;&gt;&lt;a href=&quot;#申请&quot; class=&quot;headerlink&quot; title=&quot;申请&quot;&gt;&lt;/a&gt;申请&lt;/h3&gt;&lt;p&gt;网上有教程，需信用卡&lt;/p&gt;
&lt;h3 id=&quot;设置root和ec2-user的shh登录&quot;&gt;&lt;a href=&quot;#设置root和ec2-user的shh登录&quot; class=&quot;headerlink&quot; title=&quot;设置root和ec2-user的shh登录&quot;&gt;&lt;/a&gt;设置root和ec2-user的shh登录&lt;/h3&gt;&lt;p&gt;给root和ec2-user设置密码，并可以使用账号密码登录&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;根据官网提供的方法登录连接到EC2服务器（官网推荐windows用户使用PUTTY连接）&lt;/p&gt;
&lt;p&gt; 主机：是服务器的Public DNS&lt;br&gt; 端口：22&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建root的密码，输入如下命令：&lt;/p&gt;
 &lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt; sudo passwd root&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;然后会提示你输入new password。输入一个你要设置的root的密码，需要你再输入一遍进行验证。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;接下来，切换到root身份，输入如下命令：&lt;/p&gt;
 &lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt; su root&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Coding" scheme="https://note.pin.bo/categories/Coding/"/>
    
    
      <category term="Linux" scheme="https://note.pin.bo/tags/Linux/"/>
    
      <category term="AWS" scheme="https://note.pin.bo/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title>中文域名解析和绑定Pages服务</title>
    <link href="https://note.pin.bo/2017-02-20-chinese-domain-name-binding-pages/"/>
    <id>https://note.pin.bo/2017-02-20-chinese-domain-name-binding-pages/</id>
    <published>2017-02-20T03:08:00.000Z</published>
    <updated>2019-08-24T05:54:46.111Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>中文域名绑定到Pages服务时出现不支持的中文域名的解决办法</p></blockquote><h3 id="绑定到GitHub"><a href="#绑定到GitHub" class="headerlink" title="绑定到GitHub"></a>绑定到GitHub</h3><ol><li><p>中文域名的字符串专为<a href="http://baike.baidu.com/item/Punycode" target="_blank" rel="noopener">Punycode标准编码</a>的字符串，如<code>中国.我爱你</code>转为<code>xn--fiqs8s.xn--6qq986b3xl</code></p><p> 转换地址：<a href="http://www.webmasterhome.cn/tool/punycode.asp" target="_blank" rel="noopener">Punycode标准编码</a></p></li><li><p>GitHub中添加gh-pages分支</p></li></ol><a id="more"></a><ol start="3"><li><p>在gh-pages分支下新建CNAME文件,并写入域名<code>xn--fiqs8s.xn--6qq986b3xl</code></p></li><li><p>将域名的A记录解析到<code>192.30.252.153</code></p></li></ol><h3 id="绑定到Coding"><a href="#绑定到Coding" class="headerlink" title="绑定到Coding"></a>绑定到Coding</h3><ol><li><p>中文域名的字符串专为<a href="http://baike.baidu.com/item/Punycode" target="_blank" rel="noopener">Punycode标准编码</a>的字符串，如<code>中国.我爱你</code>转为<code>xn--fiqs8s.xn--6qq986b3xl</code></p><p> 转换地址：<a href="http://www.webmasterhome.cn/tool/punycode.asp" target="_blank" rel="noopener">Punycode标准编码</a></p></li><li><p>Coding中添加coding-pages分支</p></li><li><p>在coding-pages分支下新建CNAME文件,并写入域名<code>xn--fiqs8s.xn--6qq986b3xl</code></p></li><li><p>将域名的CNAME记录解析到<code>pages.coding.me</code> </p></li><li><p>此方法同样适用于GitHub</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;中文域名绑定到Pages服务时出现不支持的中文域名的解决办法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;绑定到GitHub&quot;&gt;&lt;a href=&quot;#绑定到GitHub&quot; class=&quot;headerlink&quot; title=&quot;绑定到GitHub&quot;&gt;&lt;/a&gt;绑定到GitHub&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;中文域名的字符串专为&lt;a href=&quot;http://baike.baidu.com/item/Punycode&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Punycode标准编码&lt;/a&gt;的字符串，如&lt;code&gt;中国.我爱你&lt;/code&gt;转为&lt;code&gt;xn--fiqs8s.xn--6qq986b3xl&lt;/code&gt;&lt;/p&gt;
&lt;p&gt; 转换地址：&lt;a href=&quot;http://www.webmasterhome.cn/tool/punycode.asp&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Punycode标准编码&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;GitHub中添加gh-pages分支&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Tutorial" scheme="https://note.pin.bo/categories/Tutorial/"/>
    
    
      <category term="Domain" scheme="https://note.pin.bo/tags/Domain/"/>
    
      <category term="Pages" scheme="https://note.pin.bo/tags/Pages/"/>
    
  </entry>
  
  <entry>
    <title>Vim 从入门到精通 [转]</title>
    <link href="https://note.pin.bo/2016-11-12-vi-and-vim-doc/"/>
    <id>https://note.pin.bo/2016-11-12-vi-and-vim-doc/</id>
    <published>2016-11-12T14:08:00.000Z</published>
    <updated>2017-04-05T10:03:36.260Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vim-galore-中文翻译"><a href="#vim-galore-中文翻译" class="headerlink" title="vim-galore 中文翻译"></a>vim-galore 中文翻译</h1><p><a href="https://github.com/xitu/gold-miner/" target="_blank" rel="noopener"><img src="https://rawgit.com/aleen42/badges/master/src/juejin_translation.svg" alt="掘金翻译计划"></a></p><blockquote><p>Vim from zero to hero - Vim 从入门到精通</p></blockquote><ul><li>原文地址：<a href="https://github.com/mhinz/vim-galore" target="_blank" rel="noopener">https://github.com/mhinz/vim-galore</a></li><li>原文作者：Marco Hinz</li><li>本文地址：<a href="https://github.com/wsdjeg/vim-galore-zh_cn" target="_blank" rel="noopener">https://github.com/wsdjeg/vim-galore-zh_cn</a></li></ul><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a><a href="#简介-1">简介</a></h2><ul><li><a href="#什么是-vim">什么是 Vim</a></li><li><a href="#vim-哲学">Vim 哲学</a></li><li><a href="#入门">入门</a></li><li><a href="#精简的-vimrc">精简的 vimrc</a></li><li><a href="#我正在使用什么样的-vim">我正在使用的是什么样的 Vim</a></li><li><a href="#备忘录">备忘录</a></li></ul><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a><a href="#基础-1">基础</a></h2><ul><li><a href="#缓冲区窗口标签">缓冲区，窗口，标签</a></li><li><a href="#已激活已载入已列出已命名缓冲区">当前缓冲区，加载缓冲区，缓冲区列表，命名缓冲区</a></li><li><a href="#参数列表">参数列表</a></li><li><a href="#按键映射">按键映射</a><a id="more"></a></li><li><a href="#映射占位符">映射占位符</a></li><li><a href="#寄存器">寄存器</a></li><li><a href="#范围">范围</a></li><li><a href="#标注">标注</a></li><li><a href="#补全">补全</a></li><li><a href="#动作操作符文本对象">动作，操作符，文本对象</a></li><li><a href="#自动命令">自动命令</a></li><li><a href="#变更历史跳转历史">变更历史，跳转历史</a></li><li><a href="#内容变更历史记录">内容变更历史记录</a></li><li><a href="#全局位置信息表局部位置信息表">全局位置信息表，局部位置信息表</a></li><li><a href="#宏">宏</a></li><li><a href="#颜色主题">颜色主题</a></li><li><a href="#折叠">折叠</a></li><li><a href="#会话">会话</a></li><li><a href="#局部化">局部化</a></li></ul><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a><a href="#用法-1">用法</a></h2><ul><li><a href="#获取离线帮助">获取离线帮助</a></li><li><a href="#获取离线帮助备选">获取离线帮助(备选)</a></li><li><a href="#获取在线帮助">获取在线帮助</a></li><li><a href="#执行自动命令">执行自动命令</a><ul><li><a href="#用户自定义事件">用户自定义事件</a></li><li><a href="#内部自带事件">内部自带事件</a></li></ul></li><li><a href="#剪切板">剪贴板</a><ul><li><a href="#剪贴板使用-windows-osx">剪贴板使用 (Windows, OSX)</a></li><li><a href="#剪贴板使用-linux-bsd-">剪贴板使用 (Linux, BSD, …)</a></li></ul></li><li><a href="#打开文件时恢复光标位置">打开文件时恢复光标位置</a></li><li><a href="#备份文件交换文件撤销文件以及-viminfo-文件的处理">备份文件，交换文件，撤销文件以及 viminfo 文件的处理</a></li><li><a href="#编辑远程文件">编辑远程文件</a></li><li><a href="#插件管理">插件管理</a></li><li><a href="#片段插入">片段插入</a></li><li><a href="#使用外部程序和过滤器">使用外部程序和过滤器</a></li><li><a href="#matchit">MatchIt</a></li></ul><h2 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a><a href="#技巧-1">技巧</a></h2><ul><li><a href="#聪明的使用-n-和-n">聪明的使用 n 和 N</a></li><li><a href="#聪明的使用命令行历史">聪明的使用命令行历史</a></li><li><a href="#智能-ctrl-l">智能 Ctrl-l</a></li><li><a href="#禁用错误报警声音和图标">禁用错误报警声音和图标</a></li><li><a href="#快速移动当前行">快速移动当前行</a></li><li><a href="#快速添加空行">快速添加空行</a></li><li><a href="#快速编辑自定义宏">快速编辑自定义宏</a></li><li><a href="#快速跳转到源头文件">快速跳转到源(头)文件</a></li><li><a href="#在-gui-中快速改变字体大小">在 GUI 中快速改变字体大小</a></li><li><a href="#根据模式改变光标类型">根据模式改变光标类型</a></li><li><a href="#防止水平滑动的时候失去选择">防止水平滑动的时候失去选择</a></li><li><a href="#重新载入保存文件">重新载入保存文件</a></li><li><a href="#智能当前行">智能当前行</a></li><li><a href="#更快的关键字补全">更快的关键字补全</a></li></ul><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a><a href="#命令-1">命令</a></h2><ul><li><a href="#global---在所有匹配行执行命令">:global</a> - 在所有匹配行执行命令</li><li><a href="#normal-and-execute---脚本梦之队">:normal and :execute</a> - 脚本梦之队</li><li><a href="#redir---重定向消息">:redir</a> - 重定向消息</li></ul><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a><a href="#调试-1">调试</a></h2><ul><li><a href="#常规建议">常规建议</a></li><li><a href="#查看启动日志">查看启动日志</a></li><li><a href="#查看运行时日志">查看运行时日志</a></li><li><a href="#调整日志等级">调整日志等级</a></li><li><a href="#vim-脚本调试">Vim 脚本调试</a></li><li><a href="#语法文件调试">语法文件调试</a></li></ul><h2 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a><a href="#杂项-1">杂项</a></h2><ul><li><a href="#附加资源">附加资源</a></li><li><a href="#vim-配置集合">Vim 配置集合</a></li><li><a href="#内置插件">内置插件</a></li><li><a href="#将-control-映射到-capslock">将 Control 映射到 CapsLock</a></li><li><a href="#复活节彩蛋">复活节彩蛋</a></li><li><a href="#为何使用-hjkl">为何使用 hjkl</a></li></ul><h2 id="怪癖"><a href="#怪癖" class="headerlink" title="怪癖"></a><a href="#怪癖-1">怪癖</a></h2><ul><li><a href="#编辑小文件很慢">编辑小文件很慢</a></li><li><a href="#编辑大文件很慢">编辑大文件很慢</a></li><li><a href="#新行用于-nul">新行用于 NUL</a></li><li><a href="#相同部分粘贴-要不为什么我总要设置粘贴">相同部分粘贴 (要不为什么我总要设置‘粘贴’?)</a></li><li><a href="#在终端使用-esc-延时">在终端使用 Esc 延时</a></li><li><a href="#无法重复函数中执行的搜索">无法重复函数中执行的搜索</a></li></ul><h2 id="主题列表"><a href="#主题列表" class="headerlink" title="主题列表"></a><a href="#主题列表-1">主题列表</a></h2><h2 id="插件列表"><a href="#插件列表" class="headerlink" title="插件列表"></a><a href="content/plugins.md">插件列表</a></h2><h2 id="Neovim"><a href="#Neovim" class="headerlink" title="Neovim"></a><a href="content/neovim.md">Neovim</a></h2><hr><h1 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h1><h2 id="什么是-Vim？"><a href="#什么是-Vim？" class="headerlink" title="什么是 Vim？"></a>什么是 Vim？</h2><p><a href="http://www.vim.org" target="_blank" rel="noopener">Vim</a> 是一个历史悠久的文本编辑器，可以追溯到 <a href="https://en.wikipedia.org/wiki/QED_(text_editor" target="_blank" rel="noopener">qed</a>)。<a href="https://en.wikipedia.org/wiki/Bram_Moolenaar" target="_blank" rel="noopener">Bram<br>Moolenaar</a> 于 1991 年发布初始版本。</p><p>该项目托管在 <a href="http://www.vim.org/index.php" target="_blank" rel="noopener">vim.org</a>。</p><p>获取 Vim：用包管理器安装或者直接到 vim.org <a href="http://www.vim.org/download.php" target="_blank" rel="noopener">下载</a>。</p><p>讨论使用相关问题最好使用 <a href="https://groups.google.com/forum/#!forum/vim_use" target="_blank" rel="noopener">vim_use</a> 邮件列表或者使用 IRC(<a href="https://freenode.net" target="_blank" rel="noopener">Freenode</a>) 的 <code>#vim</code> 频道。</p><p>欢迎加入我们的中文讨论群：<a href="https://jq.qq.com/?_wv=1027&amp;k=43DB6SG" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/QQ%e7%be%a4-121056965-blue.svg" alt="QQ"></a></p><p>项目在 <a href="https://github.com/vim/vim" target="_blank" rel="noopener">Github</a> 上开发，项目讨论请订阅 <a href="https://groups.google.com/forum/#!forum/vim_dev" target="_blank" rel="noopener">vim_dev</a> 邮件列表。</p><p>通过阅读 <a href="http://www.viemu.com/a-why-vi-vim.html" target="_blank" rel="noopener">Why, oh WHY, do those #?@! nutheads use vi?</a> 来对 Vim 进行大致的了解。</p><h2 id="Vim-哲学"><a href="#Vim-哲学" class="headerlink" title="Vim 哲学"></a>Vim 哲学</h2><p>Vim 采用模式编辑的理念，即它提供了多种模式，按键在不同的模式下作用不同。你可以在 <em>普通模式</em> 下浏览文件，在 <em>插入模式</em> 下插入文本，在 <em>可视模式</em> 下选择行，在 <em>命令模式</em> 下执行命令等等。起初这听起来可能很复杂，但是这有一个很大的优点：不需要通过同时按住多个键来完成操作，大多数时候你只需要依次按下这些按键即可。越常用的操作，所需要的按键数量越少。</p><p>和模式编辑紧密相连的概念是“操作符”和“动作”。<em>操作符</em>开始一些行为，例如：修改，删除，或者选择文本。之后你要用一个_动作_来指定需要操作的文本区域。比如，要改变括号内的文本，需要执行 <code>ci(</code> （读做 <em>change inner parentheses</em>）；删除整个段落的内容，需要执行 <code>dap</code> （读做：<em>delete<br>around paragraph</em>）。</p><p>如果你能看见 Vim 老司机操作，你会发现他们使用 Vim 脚本语言就如同钢琴师弹钢琴一样。复杂的操作只需要几个按键就能完成。他们甚至不用刻意去想，因为这已经成为<a href="https://en.wikipedia.org/wiki/Muscle_memory" target="_blank" rel="noopener">肌肉记忆</a>了。这减少<a href="https://en.wikipedia.org/wiki/Cognitive_load" target="_blank" rel="noopener">认识负荷</a>并帮助人们专注于实际任务。</p><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><p>Vim 自带一个交互式的教程，内含你需要了解的最基础的信息，你可以通过终端运行以下命令打开教程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vimtutor</span><br></pre></td></tr></table></figure><p>不要因为这个看上去很无聊而跳过，按照此教程多练习。你以前用的 IDE 或者其他编辑器很少是有“模式”概念的，因此一开始你会很难适应模式切换。但是你 Vim 使用的越多，<a href="https://en.wikipedia.org/wiki/Muscle_memory" target="_blank" rel="noopener">肌肉记忆</a> 将越容易形成。</p><p>Vim 基于一个 <a href="https://en.wikipedia.org/wiki/Vi" target="_blank" rel="noopener">vi</a> 克隆，叫做 <a href="https://en.wikipedia.org/wiki/Stevie_(text_editor" target="_blank" rel="noopener">Stevie</a>)，支持两种运行模式：”compatible” 和 “nocompatible”。在兼容模式下运行 Vim 意味着使用 vi 的默认设置，而不是 Vim 的默认设置。除非你新建一个用户的 <code>vimrc</code> 或者使用 <code>vim -N</code> 命令启动 Vim，否则就是在兼容模式下运行 Vim！请大家不要在兼容模式下运行 Vim。</p><p>下一步</p><ol><li>创建你自己的 <a href="#精简的-vimrc">vimrc</a>。</li><li>在第一周准备<a href="#备忘录">备忘录</a>。</li><li>通读<a href="#基础-1">基础</a>章节了解 Vim 还有哪些功能。</li><li>按需学习！Vim 是学不完的。如果你遇到了问题，先上网寻找解决方案，你的问题可能已经被解决了。Vim 拥有大量的参考文档，知道如何利用这些参考文档很有必要：<a href="#获取离线帮助">获取离线帮助</a>。</li><li>浏览<a href="#附加资源">附加资源</a>。</li></ol><p>最后一个建议：使用<a href="#插件管理">插件</a>之前，请先掌握 Vim 的基本操作。很多插件都只是对 Vim 自带功能的封装。</p><h2 id="精简的-vimrc"><a href="#精简的-vimrc" class="headerlink" title="精简的 vimrc"></a>精简的 vimrc</h2><p>用户的 vimrc 配置文件可以放在 <code>~/.vimrc</code>，或者为了更好的分离放在 <code>~/.vim/vimrc</code>，后者更便于通过版本控制软件备份和同步整个配置，比方说 Github。</p><p>你可以在网上找到许多精简的 vimrc 配置文件，我的版本可能并不是最简单的版本，但是我的版本提供了一套我认为良好的，非常适合入门的设置。</p><p>最终你需要阅读完那些设置，然后自行决定需要使用哪些。:-)</p><p>精简的 vimrc 地址：<a href="contents/minimal-vimrc.vim">minimal-vimrc</a></p><p>如果你有兴趣，这里是我（原作者）的 <a href="https://github.com/mhinz/dotfiles/blob/master/vim/vimrc" target="_blank" rel="noopener">vimrc</a>。</p><p><strong>建议</strong>：大多数插件作者都维护不止一个插件并且将他们的 vimrc 放在 Github 上展示（通常放在叫做 “vim-config” 或者 “dotfiles” 的仓库中），所以当你发现你喜欢的插件时，去插件维护者的 Github 主页看看有没有这样的仓库。</p><h2 id="我正在使用什么样的-Vim"><a href="#我正在使用什么样的-Vim" class="headerlink" title="我正在使用什么样的 Vim"></a>我正在使用什么样的 Vim</h2><p>使用 <code>:version</code> 命令将向你展示当前正在运行的 Vim 的所有相关信息，包括它是如何编译的。</p><p>第一行告诉你这个二进制文件的编译时间和版本号，比如：7.4。接下来的一行呈现 <code>Included patches: 1-1051</code>，这是补丁版本包。因此你 Vim 确切的版本号是  7.4.1051。</p><p>另一行显示着一些像 <code>Tiny version without GUI</code> 或者 <code>Huge version with GUI</code> 的信息。很显然这些信息告诉你当前的 Vim 是否支持 GUI，例如：从终端中运行 <code>gvim</code> 或者从终端模拟器中的 Vim 内运行 <code>:gui</code> 命令。另一个重要的信息是 <code>Tiny</code> 和 <code>Huge</code>。Vim 的特性集区分被叫做 <code>tiny</code>，<code>small</code>，<code>normal</code>，<code>big</code> and <code>huge</code>，所有的都实现不同的功能子集。</p><p><code>:version</code> 主要的输出内容是特性列表。<code>+clipboard</code> 意味这剪贴板功能被编译支持了，<code>-clipboard</code> 意味着剪贴板特性没有被编译支持。</p><p>一些功能特性需要编译支持才能正常工作。例如：为了让 <code>:prof</code> 工作，你需要使用 <code>huge</code> 模式编译的 Vim，因为那种模式启用了 <code>+profile</code> 特性。</p><p>如果你的输出情况并不是那样，并且你是从包管理器安装 Vim 的，确保你安装了 <code>vim-x</code>，<code>vim-x11</code>，<code>vim-gtk</code>，<code>vim-gnome</code> 这些包或者相似的，因为这些包通常都是 <code>huge</code> 模式编译的。</p><p>你也可以运行下面这段代码来测试 Vim 版本以及功能支持：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">" Do something if running at least Vim 7.4.42 with +profile enabled.</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">v:version</span> &gt; <span class="number">704</span> || <span class="variable">v:version</span> == <span class="number">704</span> &amp;&amp; <span class="built_in">has</span>(<span class="string">'patch42'</span>)) &amp;&amp; <span class="built_in">has</span>(<span class="string">'profile'</span>)</span><br><span class="line">  <span class="comment">" do stuff</span></span><br><span class="line"><span class="keyword">endif</span></span><br></pre></td></tr></table></figure><p>相关帮助：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">:h :version</span><br><span class="line">:h feature-list</span><br><span class="line">:h +feature-list</span><br></pre></td></tr></table></figure><h2 id="备忘录"><a href="#备忘录" class="headerlink" title="备忘录"></a>备忘录</h2><p>为了避免版权问题，我只贴出链接：</p><ul><li><a href="http://people.csail.mit.edu/vgod/vim/vim-cheat-sheet-en.png" target="_blank" rel="noopener">http://people.csail.mit.edu/vgod/vim/vim-cheat-sheet-en.png</a></li><li><a href="https://cdn.shopify.com/s/files/1/0165/4168/files/preview.png" target="_blank" rel="noopener">https://cdn.shopify.com/s/files/1/0165/4168/files/preview.png</a></li><li><a href="http://www.nathael.org/Data/vi-vim-cheat-sheet.svg" target="_blank" rel="noopener">http://www.nathael.org/Data/vi-vim-cheat-sheet.svg</a></li><li><a href="http://michael.peopleofhonoronly.com/vim/vim_cheat_sheet_for_programmers_screen.png" target="_blank" rel="noopener">http://michael.peopleofhonoronly.com/vim/vim_cheat_sheet_for_programmers_screen.png</a></li><li><a href="http://www.rosipov.com/images/posts/vim-movement-commands-cheatsheet.png" target="_blank" rel="noopener">http://www.rosipov.com/images/posts/vim-movement-commands-cheatsheet.png</a></li></ul><p>或者在 Vim 中快速打开备忘录：<a href="https://github.com/lifepillar/vim-cheat40" target="_blank" rel="noopener">vim-cheat40</a>。</p><h1 id="基础-1"><a href="#基础-1" class="headerlink" title="基础"></a>基础</h1><h2 id="缓冲区，窗口，标签"><a href="#缓冲区，窗口，标签" class="headerlink" title="缓冲区，窗口，标签"></a>缓冲区，窗口，标签</h2><p>Vim 是一个文本编辑器。每次文本都是作为<strong>缓冲区</strong>的一部分显示的。每一份文件都是在他们自己独有的缓冲区打开的，插件显示的内容也在它们自己的缓冲区中。</p><p>缓冲区有很多属性，比如这个缓冲区的内容是否可以修改，或者这个缓冲区是否和文件相关联，是否需要同步保存到磁盘上。</p><p><strong>窗口</strong> 是缓冲区上一层的视窗。如果你想同时查看几个文件或者查看同一文件的不同位置，那样你会需要窗口。</p><p>请别把他们叫做_分屏<em>。你可以把一个窗口分割成两个，但是这并没有让这两个窗口完全</em>分离_。</p><p>窗口可以水平或者竖直分割并且现有窗口的高度和宽度都是可以被调节设置的，因此，如果你需要多种窗口布局，请考虑使用标签。</p><p><strong>标签页</strong> （标签）是窗口的集合。因此使用标签当你想使用多种窗口布局的时候。</p><p>简单的说，如果你启动 Vim 的时候没有附带任何参数，你会得到一个包含着一个呈现一个缓冲区的窗口的标签。</p><p>顺带提一下，缓冲区列表是全局可见的，你可以在任何标签中访问任何一个缓冲区。</p><h2 id="已激活，已载入，已列出，已命名，缓冲区"><a href="#已激活，已载入，已列出，已命名，缓冲区" class="headerlink" title="已激活，已载入，已列出，已命名，缓冲区"></a>已激活，已载入，已列出，已命名，缓冲区</h2><p>用类似 <code>vim file1</code> 的命令启动 Vim 。这个文件的内容将会被加载到缓冲区中，你现在有一个<strong>已载入的缓冲区</strong>。如果你在 Vim 中保存这个文件，缓冲区内容将会被同步到磁盘上（写回文件中）。</p><p>由于这个缓冲区也在一个窗口上显示，所以他也是一个<strong>已激活的缓冲区</strong>。如果你现在通过 <code>:e file2</code> 命令加载另一个文件，<code>file1</code> 将会变成一个<strong>隐藏的缓冲区</strong>，并且 <code>file2</code> 变成已激活缓冲区。</p><p>使用 <code>:ls</code> 我们能够列出所有可以列出的缓冲区。插件缓冲区和帮助缓冲区通常被标记为不可以列出的缓冲区，因为那并不是你经常需要在编辑器中编辑的常规文件。通过 <code>:ls!</code> 命令可以显示被放入缓冲区列表的和未被放入列表的缓冲区。</p><p><strong>未命名的缓冲区</strong>是一种没有关联特定文件的缓冲区，这种缓冲区经常被插件使用。比如 <code>:enew</code> 将会创建一个无名临时缓冲区。添加一些文本然后使用 <code>:w /tmp/foo</code> 将他写入到磁盘，这样这个缓冲区就会变成一个<strong>已命名的缓冲区</strong>。</p><h2 id="参数列表"><a href="#参数列表" class="headerlink" title="参数列表"></a>参数列表</h2><p><a href="#缓冲区窗口标签">全局缓冲区列表</a>是 Vim 的特性。在这之前的 vi 中，仅仅只有参数列表，参数列表在 Vim 中依旧可以使用。</p><p>每一个通过 shell 命令传递给 Vim 的文件名都被记录在一个参数列表中。可以有多个参数列表：默认情况下所有参数都被放在全局参数列表下，但是你可以使用 <code>:arglocal</code> 命令去创建一个新的本地窗口的参数列表。</p><p>使用 <code>:args</code> 命令可以列出当前参数。使用 <code>:next</code>，<code>:previous</code>，<code>:first</code>，<code>:last</code> 命令可以在切换在参数列表中的文件。通过使用 <code>:argadd</code>，<code>:argdelete</code> 或者 <code>:args</code> 等命令加上一个文件列表可以改变参数列表。</p><p>偏爱缓冲区列表还是参数列表完全是个人选择，我的印象中大多数人都是使用缓冲区列表的。</p><p>然而参数列表在有些情况下被大量使用：批处理<br>使用 <code>:argdo</code>！ 一个简单的重构例子：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">:<span class="keyword">args</span> **/*.[ch]</span><br><span class="line">:<span class="keyword">argdo</span> %s/foo/bar/ge | <span class="keyword">update</span></span><br></pre></td></tr></table></figure><p>这条命令将替换掉当前目录下以及当前目录的子目录中所有的 C 源文件和头文件中的“foo”，并用“bar”代替。</p><p>相关帮助：<code>:h argument-list</code></p><h2 id="按键映射"><a href="#按键映射" class="headerlink" title="按键映射"></a>按键映射</h2><p>使用 <code>:map</code> 命令家族你可以定义属于你自己的快捷键。该家族的每一个命令都限定在特定的模式下。从技术上来说 Vim 自带高达 12 中模式，其中 6 种可以被映射。另外一些命令作用于多种模式：</p><table><thead><tr><th>递归</th><th>非递归</th><th>模式</th></tr></thead><tbody><tr><td><code>:map</code></td><td><code>:noremap</code></td><td>normal, visual, operator-pending</td></tr><tr><td><code>:nmap</code></td><td><code>:nnoremap</code></td><td>normal</td></tr><tr><td><code>:xmap</code></td><td><code>:xnoremap</code></td><td>visual</td></tr><tr><td><code>:cmap</code></td><td><code>:cnoremap</code></td><td>command-line</td></tr><tr><td><code>:omap</code></td><td><code>:onoremap</code></td><td>operator-pending</td></tr><tr><td><code>:imap</code></td><td><code>:inoremap</code></td><td>insert</td></tr></tbody></table><p>例如：这个自定义的快捷键只在普通模式下工作。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:<span class="keyword">nmap</span> <span class="symbol">&lt;space&gt;</span> :<span class="keyword">echo</span> <span class="string">"foo"</span><span class="symbol">&lt;cr&gt;</span></span><br></pre></td></tr></table></figure><p>使用 <code>:nunmap &lt;space&gt;</code> 可以取消这个映射。</p><p>对于更少数，不常见的模式（或者他们的组合），查看 <code>:h map-modes</code>。</p><p>到现在为止还好，对新手而言有一个问题会困扰他们：<code>:nmap</code> 是<strong>递归执行</strong>的！结果是，右边执行可能的映射。</p><p>你自定义了一个简单的映射去输出“Foo”：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:<span class="keyword">nmap</span> <span class="keyword">b</span> :<span class="keyword">echo</span> <span class="string">"Foo"</span><span class="symbol">&lt;cr&gt;</span></span><br></pre></td></tr></table></figure><p>但是如果你想要映射 <code>b</code> （回退一个单词）的默认功能到一个键上呢？</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:<span class="keyword">nmap</span> <span class="keyword">a</span> <span class="keyword">b</span></span><br></pre></td></tr></table></figure><p>如果你敲击<kbd>a</kbd>，我们期望着光标回退到上一个单词，但是实际情况是“Foo”被输出到命令行里！因为在右边，<code>b</code> 已经被映射到别的行为上了，换句话说就是 <code>:echo &quot;Foo&quot;&lt;cr&gt;</code>。</p><p>解决此问题的正确方法是使用一种<em>非递归</em>的映射代替：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:<span class="keyword">nnoremap</span> <span class="keyword">a</span> <span class="keyword">b</span></span><br></pre></td></tr></table></figure><p>经验法则：除非递归是必须的，否则总是使用非递归映射。</p><p>通过不给一个右值来检查你的映射。比如<code>:nmap</code> 显示所以普通模式下的映射，<code>:nmap &lt;leader&gt;</code> 显示所有以 <code>&lt;leader&gt;</code> 键开头的普通模式下的映射。</p><p>如果你想禁止用标准映射，把他们映射到特殊字符 <code>&lt;nop&gt;</code> 上，例如：<code>:noremap &lt;left&gt; &lt;nop&gt;</code>。</p><p>相关帮助：</p><pre><code>:h key-notation:h mapping:h 05.3</code></pre><h2 id="映射占位符"><a href="#映射占位符" class="headerlink" title="映射占位符"></a>映射占位符</h2><p>映射占位符（Leader 键）本身就是一个按键映射，默认为 <kbd>\</kbd>。我们可以通过在 <code>map</code> 中调用 <code>&lt;leader&gt;</code> 来为把它添加到其他按键映射中。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;leader&gt;</span>h :<span class="keyword">helpgrep</span><span class="symbol">&lt;space&gt;</span></span><br></pre></td></tr></table></figure><p>这样，我们只需要先按 <kbd>\</kbd> 然后连续按 <kbd>\h</kbd> 就可以激活这个映射 <code>:helpgrep&lt;space&gt;</code>。如果你想通过先按 <kbd>空格</kbd> 键来触发，只需要这样做：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mapleader = <span class="string">' '</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;leader&gt;</span>h :<span class="keyword">helpgrep</span><span class="symbol">&lt;space&gt;</span></span><br></pre></td></tr></table></figure><p>另外，还有一个叫 <code>&lt;localleader&gt;</code> 的，可以把它理解为局部环境中的 <code>&lt;leader&gt;</code>，默认值依然为 <kbd>\</kbd>。当我们需要只对某一个条件下（比如，特定文件类型的插件）的缓冲区设置特别的 <code>&lt;leader&gt;</code> 键，那么我们就可以通过修改当前环境下的 <code>&lt;localleader&gt;</code> 来实现。</p><p><strong>注意</strong>：如果你打算设置 Leader 键，请确保在设置按键映射之前，先设置好 Leader 键。如果你先设置了含有 Leader 键的映射，然后又修改了 Leader 键，那么之前映射内的 Leader 键是不会因此而改变的。你可以通过执行 <code>:nmap &lt;leader&gt;</code> 来查看普通模式中已绑定给 Leader 键的所有映射。</p><p>请参阅 <code>:h mapleader</code> 与 <code>:h maploacalleader</code> 来获取更多帮助。</p><h2 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h2><p>寄存器就是存储文本的地方。我们常用的「复制」操作就是把文本存储到寄存器，「 粘贴」 操作就是把文本从寄存器中读出来。顺便，在 Vim 中复制的快捷键是 <kbd>y</kbd>，粘贴的快捷键是 <kbd>p</kbd>。</p><p>Vim 为我们提供了如下的寄存器：</p><table><thead><tr><th>类型</th><th>标识</th><th>读写者</th><th>是否为只读</th><th>包含的字符来源</th></tr></thead><tbody><tr><td>Unnamed</td><td><code>&quot;</code></td><td>vim</td><td>否</td><td>最近一次的复制或删除操作 (<code>d</code>, <code>c</code>, <code>s</code>, <code>x</code>, <code>y</code>)</td></tr><tr><td>Numbered</td><td><code>0</code>至<code>9</code></td><td>vim</td><td>否</td><td>寄存器 <code>0</code>: 最近一次复制。寄存器 <code>1</code>: 最近一次删除。寄存器 <code>2</code>: 倒数第二次删除，以此类推。对于寄存器 <code>1</code> 至 <code>9</code>，他们其实是只读的最多包含 9 个元素的队列。这里的队列即为数据类型 <a href="https://en.wikipedia.org/wiki/Queue_(abstract_data_type" target="_blank" rel="noopener">queue</a>)</td></tr><tr><td>Small delete</td><td><code>-</code></td><td>vim</td><td>否</td><td>最近一次行内删除</td></tr><tr><td>Named</td><td><code>a</code>至<code>z</code>, <code>A</code>至<code>Z</code></td><td>用户</td><td>否</td><td>如果你通过复制操作存储文本至寄存器 <code>a</code>，那么 <code>a</code> 中的文本就会被完全覆盖。如果你存储至 <code>A</code>，那么会将文本添加给寄存器 <code>a</code>，不会覆盖之前已有的文本</td></tr><tr><td>Read-only</td><td><code>:</code>与<code>.</code>和<code>%</code></td><td>vim</td><td>是</td><td><code>:</code>: 最近一次使用的命令，<code>.</code>: 最近一次添加的文本，<code>%</code>: 当前的文件名</td></tr><tr><td>Alternate buffer</td><td><code>#</code></td><td>vim</td><td>否</td><td>大部分情况下，这个寄存器是当前窗口中，上一次访问的缓冲区。请参阅 <code>:h alternate-file</code> 来获取更多帮助</td></tr><tr><td>Expression</td><td><code>=</code></td><td>用户</td><td>否</td><td>复制 VimL 代码时，这个寄存器用于存储代码片段的执行结果。比如，在插入模式下复制 <code>&lt;c-r&gt;=5+5&lt;cr&gt;</code>，那么这个寄存器就会存入 10</td></tr><tr><td>Selection</td><td><code>+</code>和<code>*</code></td><td>vim</td><td>否</td><td><code>*</code> 和 <code>+</code> 是 <a href="#剪贴板">剪贴板</a> 寄存器</td></tr><tr><td>Drop</td><td><code>~</code></td><td>vim</td><td>是</td><td>最后一次拖拽添加至 Vim 的文本（需要 “+dnd” 支持，暂时只支持 GTK GUI。请参阅 <code>:help dnd</code> 及 <code>:help quote~</code>）</td></tr><tr><td>Black hole</td><td><code>_</code></td><td>vim</td><td>否</td><td>一般称为黑洞寄存器。对于当前操作，如果你不希望在其他寄存器中保留文本，那就在命令前加上 <code>_</code>。比如，<code>&quot;_dd</code> 命令不会将文本放到寄存器 <code>&quot;</code>、<code>1</code>、<code>+</code> 或 <code>*</code> 中</td></tr><tr><td>Last search pattern</td><td><code>/</code></td><td>vim</td><td>否</td><td>最近一次通过 <code>/</code>、<code>?</code> 或 <code>:global</code> 等命令调用的匹配条件</td></tr></tbody></table><p>只要不是只读的寄存器，用户都有权限修改它的内容，比如：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:<span class="keyword">let</span> @/ = <span class="string">'register'</span></span><br></pre></td></tr></table></figure><p>这样，我们按 <kbd>n</kbd> 的时候就会跳转到单词”register” 出现的地方。</p><p>有些时候，你的操作可能已经修改了寄存器，而你没有察觉到。请参阅 <code>:h registers</code> 获取更多帮助。</p><p>上面提到过，复制的命令是 <kbd>y</kbd>，粘贴的命令是 <kbd>p</kbd> 或者 <kbd>P</kbd>。但请注意，Vim 会区分「字符选取」与「行选取」。请参阅 <code>:h linewise</code> 获取更多帮助。</p><p><strong>行选取</strong>：<br>命令 <code>yy</code> 或 <code>Y</code> 都是复制当前行。这时移动光标至其他位置，按下 <code>p</code> 就可以在光标下方粘贴复制的行，按下 <code>P</code> 就可以在光标上方粘贴至复制的行。</p><p><strong>字符选取</strong>：<br>命令 <code>0yw</code> 可以复制第一个单词。这时移动光标至其他位置，按下 <code>p</code> 就可以在当前行、光标后的位置粘贴单词，按下 <code>P</code> 就可以在当前行、光标前的位置粘贴单词。</p><p><strong>将文本存到指定的寄存器中</strong>：<br>命令 <code>&quot;aY</code> 可以将当前行复制，并存储到寄存器 <code>a</code> 中。这时移动光标至其他位置，通过命令 <code>&quot;AY</code> 就可以把这一行的内容扩展到寄存器 <code>a</code> 中，而之前存储的内容也不会丢失。</p><p>为了便于理解和记忆，建议大家现在就试一试上面提到的这些操作。操作过程中，你可以随时通过 <code>:reg</code> 来查看寄存器的变化。</p><p><strong>有趣的是</strong>：<br>在 Vim 中，<code>y</code> 是复制命令，源于单词 “yanking”。而在 Emacs 中，”yanking” 代表的是粘贴（或者说，重新插入刚才删掉的内容），而并不是复制。</p><h2 id="范围"><a href="#范围" class="headerlink" title="范围"></a>范围</h2><p>范围 (Ranges) 其实很好理解，但很多 Vim 用户的理解不到位。</p><ul><li>很多命令都可以加一个数字，用于指明操作范围</li><li>范围可以是一个行号，用于指定某一行</li><li>范围也可以是一对通过 <code>,</code> 或 <code>;</code> 分割的行号</li><li>大部分命令，默认只作用于当前行</li><li>只有 <code>:write</code> 和 <code>:global</code> 是默认作用于所有行的</li></ul><p>范围的使用是十分直观的。以下为一些例子（其中，<code>:d</code> 为 <code>:delete</code> 的缩写）：</p><table><thead><tr><th>命令</th><th>操作的行</th></tr></thead><tbody><tr><td><code>:d</code></td><td>当前行</td></tr><tr><td><code>:.d</code></td><td>当前行</td></tr><tr><td><code>:1d</code></td><td>第一行</td></tr><tr><td><code>:$d</code></td><td>最后一行</td></tr><tr><td><code>:1,$d</code></td><td>所有行</td></tr><tr><td><code>:%d</code></td><td>所有行（这是 <code>1,$</code> 的语法糖）</td></tr><tr><td><code>:.,5d</code></td><td>当前行至第 5 行</td></tr><tr><td><code>:,5d</code></td><td>同样是当前行至第 5 行</td></tr><tr><td><code>:,+3d</code></td><td>当前行及接下来的 3 行</td></tr><tr><td><code>:1,+3d</code></td><td>第一行至当前行再加 3 行</td></tr><tr><td><code>:,-3d</code></td><td>当前行及向上的 3 行（Vim 会弹出提示信息，因为这是一个保留的范围）</td></tr><tr><td><code>:3,&#39;xdelete</code></td><td>第三行至<a href="#标注">标注</a> 为 x 的那一行</td></tr><tr><td><code>:/^foo/,$delete</code></td><td>当前行以下，以字符 “foo” 开头的那一行至结尾</td></tr><tr><td><code>:/^foo/+1,$delete</code></td><td>当前行以下，以字符 “foo” 开头的那一行的下一行至结尾</td></tr></tbody></table><p>需要注意的是，<code>;</code> 也可以用于表示范围。区别在于，<code>a,b</code> 的 <code>b</code> 是以当前行作为参考的。而 <code>a;b</code> 的 <code>b</code> 是以 <code>a</code> 行作为参考的。举个例子，现在你的光标在第 5 行。这时 <code>:1,+1d</code> 会删除第 1 行至第 6 行，而 <code>:1;+1d</code> 会删除第 1 行和第 2 行。</p><p>如果你想设置多个寻找条件，只需要在条件前加上 <code>/</code>，比如：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:/foo//bar//quux/d</span><br></pre></td></tr></table></figure><p>这就会删除当前行之后的某一行。定位方式是，先在当前行之后寻找第一个包含 “foo” 字符的那一行，然后在找到的这一行之后寻找第一个包含 “bar” 字符的那一行，然后再在找到的这一行之后寻找第一个包含 “quux” 的那一行。删除的就是最后找到的这一行。</p><p>有时，Vim 会在命令前自动添加范围。举个例子，如果你先通过 <code>V</code> 命令进入行选取模式，选中一些行后按下 <code>:</code> 进入命令模式，这时候你会发现 Vim 自动添加了 <code>&#39;&lt;,&#39;&gt;</code> 范围。这表示，接下来的命令会使用之前选取的行号作为范围。但如果后续命令不支持范围，Vim 就会报错。为了避免这样的情况发生，有些人会设置这样的按键映射：<code>:vnoremap foo :&lt;c-u&gt;command</code>，组合键 <kbd>Ctrl + u</kbd> 可以清除当前命令行中的内容。</p><p>另一个例子是在普通模式中按下 <code>!!</code>，命令行中会出现 <code>:.!</code>。如果这时你如果输入一个外部命令，那么当前行的内容就会被这个外部命令的输出替换。你也可以通过命令 <code>:?^$?+1,/^$/-1!ls</code> 把当前段落的内容替换成外部命令 <code>ls</code> 的输出，原理是向前和向后各搜索一个空白行，删除这两个空白行之间的内容，并将外部命令 <code>ls</code> 的输出放到这两个空白行之间。</p><p>请参阅以下两个命令来获取更多帮助：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">:h cmdline-ranges</span><br><span class="line">:h <span class="number">10.3</span></span><br></pre></td></tr></table></figure><h2 id="标注"><a href="#标注" class="headerlink" title="标注"></a>标注</h2><p>你可以使用标注功能来标记一个位置，也就是记录文件某行的某个位置。</p><table><thead><tr><th>标注</th><th>设置者</th><th>使用</th></tr></thead><tbody><tr><td><code>a</code>-<code>z</code></td><td>用户</td><td>仅对当前的一个文件生效，也就意味着只可以在当前文件中跳转</td></tr><tr><td><code>A</code>-<code>Z</code></td><td>用户</td><td>全局标注，可以作用于不同文件。大写标注也称为「文件标注」。跳转时有可能会切换到另一个缓冲区</td></tr><tr><td><code>0</code>-<code>9</code></td><td>viminfo</td><td><code>0</code> 代表 viminfo 最后一次被写入的位置。实际使用中，就代表 Vim 进程最后一次结束的位置。<code>1</code> 代表 Vim 进程倒数第二次结束的位置，以此类推</td></tr></tbody></table><p>如果想跳转到指定的标注，你可以先按下 <code>&#39;</code>、<code>g&#39;</code>、<code>\`</code> 或 <code>g\`</code> 然后按下标注名。</p><p>如果你想定义当前文件中的标注，可以先按下 <code>m</code> 再按下标注名。比如，按下 <code>mm</code> 就可以把当前位置标注为 <code>m</code>。在这之后，如果你的光标切换到了文件的其他位置，只需要通过 <code>&#39;m</code> 或者 <code>\</code>m<code>即可回到刚才标注的行。区别在于，</code>‘m<code>会跳转回被标记行的第一个非空字符，而</code>`m<code>会跳转回被标记行的被标记列。根据 viminfo 的设置，你可以在退出 Vim 的时候保留小写字符标注。请参阅</code>:h viminfo-‘` 来获取更多帮助。</p><p>如果你想定义全局的标注，可以先按下 <code>m</code> 再按下大写英文字符。比如，按下 <code>mM</code> 就可以把当前文件的当前位置标注为 <code>M</code>。在这之后，就算你切换到其他的缓冲区，依然可以通过 <code>&#39;M</code> 或 <code>\</code>M` 跳转回来。</p><p>关于跳转，还有以下的方式：</p><table><thead><tr><th>按键</th><th>跳转至</th></tr></thead><tbody><tr><td><code>&#39;[</code> 与 <code>`[</code></td><td>上一次修改或复制的第一行或第一个字符</td></tr><tr><td><code>&#39;]</code> 与 <code>`]</code></td><td>上一次修改或复制的最后一行或最后一个字符</td></tr><tr><td><code>&#39;&lt;</code> 与 <code>`&lt;</code></td><td>上一次在可视模式下选取的第一行或第一个字符</td></tr><tr><td><code>&#39;&gt;</code> 与 <code>`&gt;</code></td><td>上一次在可视模式下选取的最后一行或最后一个字符</td></tr><tr><td><code>&#39;&#39;</code> 与 <code>`&#39;</code></td><td>上一次跳转之前的光标位置</td></tr><tr><td><code>&#39;&quot;</code> 与 <code>`&quot;</code></td><td>上一次关闭当前缓冲区时的光标位置</td></tr><tr><td><code>&#39;^</code> 与 <code>`^</code></td><td>上一次插入字符后的光标位置</td></tr><tr><td><code>&#39;.</code> 与 <code>`.</code></td><td>上一次修改文本后的光标位置</td></tr><tr><td><code>&#39;(</code> 与 <code>`(</code></td><td>当前句子的开头</td></tr><tr><td><code>&#39;)</code> 与 <code>`)</code></td><td>当前句子的结尾</td></tr><tr><td><code>&#39;{</code> 与 <code>`{</code></td><td>当前段落的开头</td></tr><tr><td><code>&#39;}</code> 与 <code>`}</code></td><td>当前段落的结尾</td></tr></tbody></table><p>标注也可以搭配 <a href="#范围">范围</a> 一起使用。前面提到过，如果你在可视模式下选取一些文本，然后按下 <code>:</code>，这时候你会发现命令行已经被填充了 <code>:&#39;&lt;,&#39;&gt;</code>。对照上面的表格，现在你应该明白了，这段代表的就是可视模式下选取的范围。</p><p>请使用 <code>:marks</code> 命令来显示所有的标注，参阅 <code>:h mark-motions</code> 来获取关于标注的更多帮助。</p><h2 id="补全"><a href="#补全" class="headerlink" title="补全"></a>补全</h2><p>Vim 在插入模式中为我们提供了多种补全方案。如果有多个补全结果，Vim 会弹出一个菜单供你选择。</p><p>常见的补全有标签、项目中引入的模块或库中的方法名、文件名、字典及当前缓冲区的字段。</p><p>针对不同的补全方案，Vim 为我们提供了不同的按键映射。这些映射都是在<strong>插入模式中</strong>通过 <kbd>Ctrl</kbd> + <kbd>x</kbd> 来触发：</p><table><thead><tr><th>映射</th><th>类型</th><th>帮助文档</th></tr></thead><tbody><tr><td><code>&lt;c-x&gt;&lt;c-l&gt;</code></td><td>整行</td><td><code>:h i^x^l</code></td></tr><tr><td><code>&lt;c-x&gt;&lt;c-n&gt;</code></td><td>当前缓冲区中的关键字</td><td><code>:h i^x^n</code></td></tr><tr><td><code>&lt;c-x&gt;&lt;c-k&gt;</code></td><td>字典（请参阅 <code>:h &#39;dictionary&#39;</code>）中的关键字</td><td><code>:h i^x^k</code></td></tr><tr><td><code>&lt;c-x&gt;&lt;c-t&gt;</code></td><td>同义词字典（请参阅 <code>:h &#39;thesaurus&#39;</code>）中的关键字</td><td><code>:h i^x^t</code></td></tr><tr><td><code>&lt;c-x&gt;&lt;c-i&gt;</code></td><td>当前文件以及包含的文件中的关键字</td><td><code>:h i^x^i</code></td></tr><tr><td><code>&lt;c-x&gt;&lt;c-]&gt;</code></td><td>标签</td><td><code>:h i^x^]</code></td></tr><tr><td><code>&lt;c-x&gt;&lt;c-f&gt;</code></td><td>文件名</td><td><code>:h i^x^f</code></td></tr><tr><td><code>&lt;c-x&gt;&lt;c-d&gt;</code></td><td>定义或宏定义</td><td><code>:h i^x^d</code></td></tr><tr><td><code>&lt;c-x&gt;&lt;c-v&gt;</code></td><td>Vim 命令</td><td><code>:h i^x^v</code></td></tr><tr><td><code>&lt;c-x&gt;&lt;c-u&gt;</code></td><td>用户自定义补全（通过 <code>&#39;completefunc&#39;</code> 定义）</td><td><code>:h i^x^u</code></td></tr><tr><td><code>&lt;c-x&gt;&lt;c-o&gt;</code></td><td>Omni Completion（通过 <code>&#39;omnifunc&#39;</code> 定义）</td><td><code>:h i^x^o</code></td></tr><tr><td><code>&lt;c-x&gt;s</code></td><td>拼写建议</td><td><code>:h i^Xs</code></td></tr></tbody></table><p>尽管用户自定义补全与 Omni Completion 是不同的，但他们做的事情基本一致。共同点在于，他们都是一个监听当前光标位置的函数，返回值为一系列的补全建议。用户自定义补全是由用户定义的，基于用户的个人用途，因此你可以根据自己的喜好和需求随意定制。而 Omni Completion 是针对文件类型的补全，比如在 C 语言中补全一个结构体（struct）的成员（members），或者补全一个类的方法，因而它通常都是由文件类型插件设置和调用的。</p><p>如果你设置了 <code>&#39;complete&#39;</code> 选项，那么你就可以在一次操作中采用多种补全方案。这个选项默认包含了多种可能性，因此请按照自己的需求来配置。你可以通过 <code>&lt;c-n&gt;</code> 来调用下一个补全建议，或通过 <code>&lt;c-p&gt;</code> 来调用上一个补全建议。当然，这两个映射同样可以直接调用补全函数。请参阅 <code>:h i^n</code> 与 <code>:h &#39;complete&#39;</code> 来获得更多帮助。</p><p>如果你想配置弹出菜单的行为，请一定要看一看 <code>:h &#39;completeopt&#39;</code> 这篇帮助文档。默认的配置已经不错了，但我个人（原作者）更倾向于把 “noselect” 加上。</p><p>请参阅以下文档获取更多帮助：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">:h ins-completion</span><br><span class="line">:h popupmenu-<span class="built_in">keys</span></span><br><span class="line">:h <span class="keyword">new</span>-omni-completion</span><br></pre></td></tr></table></figure></p><h2 id="动作，操作符，文本对象"><a href="#动作，操作符，文本对象" class="headerlink" title="动作，操作符，文本对象"></a>动作，操作符，文本对象</h2><p><strong>动作</strong>也就是指移动光标的操作，你肯定很熟悉 <code>h</code>、<code>j</code>、<code>k</code> 和 <code>l</code>，以及 <code>w</code> 和 <code>b</code>。但其实，<code>/</code> 也是一个动作。他们都可以搭配数字使用，比如 <code>2?the&lt;cr&gt;</code> 可以将光标移动到倒数第二个 “the” 出现的位置。</p><p>以下会列出一些常用的动作。你也可以通过 <code>:h navigation</code> 来获取更多的帮助。</p><p><strong>操作符</strong>是对某个区域文本执行的操作。比如，<code>d</code>、<code>~</code>、<code>gU</code> 和 <code>&gt;</code> 都是操作符。这些操作符既可以在普通模式下使用，也可以在可视模式下使用。在普通模式中，顺序是先按操作符，再按动作指令，比如 <code>&gt;j</code>。在可是模式中，选中区域后直接按操作符就可以，比如 <code>Vjd</code>。</p><p>与动作一样，操作符也可以搭配数字使用，比如 <code>2gUw</code> 可以将当前单词以及下一个单词转成大写。由于动作和操作符都可以搭配数字使用，因此 <code>2gU2w</code> 与执行两次 <code>gU2w</code> 效果是相同的。</p><p>请参阅 <code>:h operator</code> 来查看所有的操作符。你也可以通过 <code>:set tildeop</code> 命令把 <code>~</code> 也变成一个操作符</p><p>值得注意的是，动作是单向的，而<strong>文本对象</strong>是双向的。文本对象不仅作用于符号（比如括号、中括号和大括号等）标记的范围内，也作用于整个单词、整个句子等其他情况。</p><p>文本对象不能用于普通模式中移动光标的操作，因为光标还没有智能到可以向两个方向同时跳转。但这个功能可以在可视模式中实现，因为在对象的一端选中的情况下，光标只需要跳转到另一端就可以了。</p><p>文本对象操作一般用 <code>i</code> 或 <code>a</code> 加上对象标识符操作，其中 <code>i</code> 表示在对象内（英文 inner）操作，<code>a</code> 表示对整个对象（英文 around）操作，这时开头和结尾的空格都会被考虑进来。举个例子，<code>diw</code> 可以删除当前单词，<code>ci(</code> 可以改变括号中的内容。</p><p>文本对象同样可以与数字搭配使用。比如，像 <code>(((  )))</code> 这样的文本，假如光标位于最内层的括号上或最内层的括号内，那么 <code>d2a(</code> 将会删除从最内层开始的两对括号，以及他们之间的所有内容。其实，<code>d2a(</code> 这个操作等同于 <code>2da(</code>。在 Vim 的命令中，如果有两处都可以接收数字作为参数，那么最终结果就等同于两个数字相乘。在这里，<code>d</code> 与 <code>a(</code> 都是可以接收参数的，一个参数是 1，另一个是 2，我们可以把它们相乘然后放到最前面。</p><p>请参阅 <code>:h text-objects</code> 来获取更多关于文本对象的帮助。</p><h2 id="自动命令"><a href="#自动命令" class="headerlink" title="自动命令"></a>自动命令</h2><p>在特定的情况下，Vim 会传出事件。如果你想针对这些事件执行回调方法，那么就需要用到自动命令这个功能。</p><p>如果没有了自动命令，那你基本上是用不了 Vim 的。自动命令一直都在执行，只是很多时候你没有注意到。不信的话，可以执行命令 <code>:au</code> ，不要被结果吓到，这些是当前有效的所有自动命令。</p><p>请使用 <code>:h {event}</code> 来查看 Vim 中所有事件的列表，你也可以参考 <code>:h autocmd-events-abc</code> 来获取关于事件的更多帮助。</p><p>一个很常用的例子，就是针对文件类型执行某些设置：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">autocmd</span> FileType <span class="keyword">ruby</span> <span class="keyword">setlocal</span> <span class="built_in">shiftwidth</span>=<span class="number">2</span> softtabstop=<span class="number">2</span> comments-=:#</span><br></pre></td></tr></table></figure><p>但是缓冲区是如何知道当前的文件中包含 Ruby 代码呢？这其实是另一个自动命令检测的到的，然后把文件类型设置成为 Ruby，这样就触发了上面的 <code>FileType</code> 事件。</p><p>在配置 vimrc 的时候，一般第一行加进去的就是 <code>filetype on</code>。这就意味着，Vim 启动时会读取 <code>filetype.vim</code> 文件，然后根据文件类型来触发相应的自动命令。</p><p>如果你勇于尝试，可以查看下 <code>:e $VIMRUNTIME/filetype.vim</code>，然后在输出中搜索 “Ruby”。这样，你就会发现其实 Vim 只是通过文件扩展名 <code>.rb</code> 判断某个文件是不是 Ruby 的。</p><p><strong>注意</strong>：对于相同事件，如果有多个自动命令，那么自动命令会按照定义时的顺序执行。通过 <code>:au</code> 就可以查看它们的执行顺序。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">au</span> BufNewFile,BufRead *.rb,*.rbw <span class="keyword">setf</span> <span class="keyword">ruby</span></span><br></pre></td></tr></table></figure><p><code>BufNewFile</code> 与 <code>BufRead</code> 事件是被写在 Vim 源文件中的。因此，每当你通过 <code>:e</code> 或者类似的命令打开文件，这两个事件都会触发。然后，就是读取 <code>filetype.vim</code> 文件来判断打开的文件类型。</p><p>简单来说，事件和自动命令在 Vim 中的应用十分广泛。而且，Vim 为我们留出了一些易用的接口，方便用户配置适合自己的事件驱动回调。</p><p>请参阅 <code>:h autocommand</code> 来获取更多帮助</p><h2 id="变更历史，跳转历史"><a href="#变更历史，跳转历史" class="headerlink" title="变更历史，跳转历史"></a>变更历史，跳转历史</h2><p>在 Vim 中，用户最近 100 次的文字改动都会被保存在<strong>变更历史</strong>中。如果在同一行有多个小改动，那么 Vim 会把它们合并成一个。尽管内容改动会合并，但作用的位置还是会只记录下最后一次改动的位置。</p><p>在你移动光标或跳转的时候，每一次的移动或跳转前的位置会被记录到<strong>跳转历史</strong>中。类似地，跳转历史也可以最多保存 100 条记录。对于每个窗口，跳转记录是独立的。但当你分离窗口时（比如使用 <code>:split</code> 命令），跳转历史会被复制过去。</p><p>Vim 中的跳转命令，包括 <code>&#39;</code>、<code>`</code>、<code>G</code>、<code>/</code>、<code>?</code>、<code>n</code>、<code>N</code>、<code>%</code>、<code>(</code>、<code>)</code>、<code>[[</code>、<code>]]</code>、<code>{</code>、<code>}</code>、<code>:s</code>、<code>:tag</code>、<code>L</code>、<code>M</code>、<code>H</code> 以及开始编辑一个新文件的命令。</p><table><thead><tr><th>列表</th><th>显示所有条目</th><th>跳转到上一个位置</th><th>跳转到下一个位置</th></tr></thead><tbody><tr><td>跳转历史</td><td><code>:jumps</code></td><td><code>[count]&lt;c-o&gt;</code></td><td><code>[count]&lt;c-i&gt;</code></td></tr><tr><td>变更历史</td><td><code>:changes</code></td><td><code>[count]g;</code></td><td><code>[count]g,</code></td></tr></tbody></table><p>如果你执行第二列的命令显示所有条目，这时 Vim 会用 <code>&gt;</code> 标记来为你指示当前位置。通常这个标记位于 1 的下方，也就代表最后一次的位置。</p><p>如果你希望关闭 Vim 之后还保留这些条目，请参阅 <code>:h viminfo-&#39;</code> 来获取更多帮助。</p><p><strong>注意</strong>：上面提到过，最后一次跳转前的位置也会记录在<a href="#标注">标注</a>中，也可以通过连按 <kbd>``</kbd> 或 <kbd>‘’</kbd> 跳转到那个位置</p><p>请参阅以下两个命令来获取更多帮助：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">:h changelist</span><br><span class="line">:h jumplist</span><br></pre></td></tr></table></figure><h2 id="内容变更历史记录"><a href="#内容变更历史记录" class="headerlink" title="内容变更历史记录"></a>内容变更历史记录</h2><p>Vim 会记录文本改变之前的状态。因此，你可以使用「撤销」操作 <kbd>u</kbd> 来取消更改，也可以通过「重做」操作 <kbd>Ctrl + r</kbd> 来恢复更改。</p><p>值得注意的是，Vim 采用 <a href="https://en.wikipedia.org/wiki/Tree_(data_structure" target="_blank" rel="noopener">tree</a>) 数据结构来存储内容变更的历史记录，而不是采用 <a href="https://en.wikipedia.org/wiki/Queue_(abstract_data_type" target="_blank" rel="noopener">queue</a>)。你的每次改动都会成为存储为树的节点。而且，除了第一次改动（根节点），之后的每次改动都可以找到一个对应的父节点。每一个节点都会记录改动的内容和时间。其中，「分支」代表从任一节点到根节点的路径。当你进行了撤销操作，然后又输入了新的内容，这时候就相当于创建了分支。这个原理和 git 中的 branch（分支）十分类似。</p><p>考虑以下这一系列按键操作：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ifoo<span class="symbol">&lt;esc&gt;</span></span><br><span class="line">obar<span class="symbol">&lt;esc&gt;</span></span><br><span class="line">obaz<span class="symbol">&lt;esc&gt;</span></span><br><span class="line"><span class="keyword">u</span></span><br><span class="line">oquux<span class="symbol">&lt;exc&gt;</span></span><br></pre></td></tr></table></figure><p>那么现在，Vim 中会显示三行文本，分别是 “foo”、”bar” 和 “quux”。这时候，存储的树形结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">     foo(1)</span><br><span class="line">       /</span><br><span class="line">    bar(2)</span><br><span class="line">   /      \</span><br><span class="line">baz(3)   quux(4)</span><br></pre></td></tr></table></figure><p>这个树形结构共包含四次改动，括号中的数字就代表时间顺序。</p><p>现在，我们有两种方式遍历这个树结构。一种叫「按分支遍历」，一种叫「按时间遍历」。</p><p>撤销 <kbd>u</kbd> 与重做 <kbd>Ctrl + r</kbd> 操作是按分支遍历。对于上面的例子，现在我们有三行字符。这时候按 <kbd>u</kbd> 会回退到 “bar” 节点，如果再按一次 <kbd>u</kbd> 则会回退到 “foo” 节点。这时，如果我们按下 <kbd>Ctrl + r</kbd> 就会前进至 “bar” 节点，再按一次就回前进至 “quux” 节点。在这种方式下，我们无法访问到兄弟节点（即 “baz” 节点）。</p><p>与之对应的是按时间遍历，对应的按键是 <code>g-</code> 和 <code>g+</code>。对于上面的例子，按下 <code>g-</code> 会首先回退到 “baz” 节点。再次按下 <code>g-</code> 会回退到 “bar” 节点。</p><table><thead><tr><th>命令/按键</th><th>执行效果</th></tr></thead><tbody><tr><td><code>[count]u</code> 或 <code>:undo [count]</code></td><td>回退到 <code>[count]</code> 次改动之前</td></tr><tr><td><code>[count]&lt;c-r&gt;</code> 或 <code>:redo [count]</code></td><td>重做 <code>[count]</code> 次改动</td></tr><tr><td><code>U</code></td><td>回退至最新的改动</td></tr><tr><td><code>[count]g-</code> 或 <code>:earlier [count]?</code></td><td>根据时间回退到 <code>[count]</code> 次改动之前。”?” 为 “s”、”m”、”h”、”d” 或 “f”之一。例如，<code>:earlier 2d</code> 会回退到两天之前。<code>:earlier 1f</code> 则会回退到最近一次文件保存时的内容</td></tr><tr><td><code>[count]g+</code> 或 <code>:later [count]?</code></td><td>类似 <code>g-</code>，但方向相反</td></tr></tbody></table><p>内容变更记录会储存在内存中，当 Vim 退出时就会清空。如果需要持久化存储内容变更记录，请参阅<a href="#备份文件交换文件撤销文件以及viminfo文件的处理">备份文件，交换文件，撤销文件以及viminfo文件的处理</a>章节的内容。</p><p>如果你觉得这一部分的内容难以理解，请参阅 <a href="https://github.com/mbbill/undotree" target="_blank" rel="noopener">undotree</a>，这是一个可视化管理内容变更历史记录的插件。类似的还有 <a href="https://github.com/simnalamburt/vim-mundo" target="_blank" rel="noopener">vim-mundo</a>。</p><p>请参阅以下链接获取更多帮助：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">:h <span class="keyword">undo</span>.txt</span><br><span class="line">:h usr_32</span><br></pre></td></tr></table></figure><h2 id="全局位置信息表，局部位置信息表"><a href="#全局位置信息表，局部位置信息表" class="headerlink" title="全局位置信息表，局部位置信息表"></a>全局位置信息表，局部位置信息表</h2><p>在某一个动作返回一系列「位置」的时候，我们可以利用「全局位置信息表」和「局部位置信息表」来存储这些位置信息，方便以后跳转回对应的位置。每一个存储的位置包括文件名、行号和列号。</p><p>比如，编译代码是出现错误，这时候我们就可以把错误的位置直接显示在全局位置信息表，或者通过外部抓取工具使位置显示在局部位置信息表中。</p><p>尽管我们也可以把这些信息显示到一个空格缓冲区中，但用这两个信息表显示的好处在于接口调用很方便，而且也便于浏览输出。</p><p>Vim 中，全局位置信息表只能有一个，但每一个窗口都可以有自己的局部位置信息表。这两个信息表的外观看上去很类似，但在操作上会稍有不同。</p><p>以下为两者的操作比较：</p><table><thead><tr><th>动作</th><th>全局位置信息表</th><th>局部位置信息表</th></tr></thead><tbody><tr><td>打开窗口</td><td><code>:copen</code></td><td><code>:lopen</code></td></tr><tr><td>关闭窗口</td><td><code>:cclose</code></td><td><code>:lclose</code></td></tr><tr><td>下一个条目</td><td><code>:cnext</code></td><td><code>:lnext</code></td></tr><tr><td>上一个条目</td><td><code>:cprevious</code></td><td><code>:lprevious</code></td></tr><tr><td>第一个条目</td><td><code>:cfirst</code></td><td><code>:lfirst</code></td></tr><tr><td>最后一个条目</td><td><code>:clast</code></td><td><code>:llast</code></td></tr></tbody></table><p>请参阅 <code>:h :cc</code> 以及底下的内容，来获取更多命令的帮助。</p><p><strong>应用实例</strong>：<br>如果我们想用 <code>grep</code> 递归地在当前文件夹中寻找某个关键词，然后把输出结果放到全局位置信息表中，只需要这样：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">:<span class="keyword">let</span> &amp;grepprg = <span class="string">'grep -Rn $* .'</span></span><br><span class="line">:grep! foo</span><br><span class="line">&lt;<span class="keyword">grep</span> output - hit enter&gt;</span><br><span class="line">:<span class="keyword">copen</span></span><br></pre></td></tr></table></figure><p>执行了上面的代码，你就能看到所有包含字符串 “foo” 的文件名以及匹配到的相关字段都会显示在全局位置信息表中。</p><h2 id="宏"><a href="#宏" class="headerlink" title="宏"></a>宏</h2><p>你可以在 Vim 中录制一系列按键，并把他们存储到<a href="#寄存器">寄存器</a>中。对于一些需要临时使用多次的一系列操作，把它们作为宏保存起来会显著地提升效率。对于一些复杂的操作，建议使用 Vim 脚本来实现。</p><ul><li>首先，按下 <kbd>q</kbd>，然后按下你想要保存的寄存器，任何小写字母都可以。比如我们来把它保存到 <code>q</code> 这个寄存器中。按下 <code>qq</code>，你会发现命令行里已经显示了 “recording @q”。</li><li>如果你已经录制完成，那么只需要再按一次 <kbd>q</kbd> 就可以结束录制。</li><li>如果你想调用刚才录制的宏，只需要 <code>[count]@q</code></li><li>如果你想调用上一次使用的宏，只需要 <code>[count]@@</code></li></ul><p><strong>实例1</strong>：</p><p>一个插入字符串 “abc” 后换行的宏，重复调用十次：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">qq</span><br><span class="line"><span class="keyword">iabc</span><span class="symbol">&lt;cr&gt;</span><span class="symbol">&lt;esc&gt;</span></span><br><span class="line">q</span><br><span class="line"><span class="number">10</span>@q</span><br></pre></td></tr></table></figure><p>（对于上面这个功能，你同样可以通过如下的按键： <kbd>o</kbd><kbd>a</kbd><kbd>b</kbd><kbd>c</kbd> 然后 <kbd>ESC</kbd> 然后 <kbd>1</kbd><kbd>0</kbd><kbd>.</kbd> 来实现）。</p><p><strong>实例2</strong>：</p><p>一个在每行前都加上行号的宏。从第一行开始，行号为 1，后面依次递增。我们可以通过 <kbd>Ctrl</kbd> + <kbd>a</kbd> 来实现递增的行号，在定义宏的时候，它会显示成 <code>^A</code>。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">qq</span><br><span class="line"><span class="number">0</span>yf jP0^A</span><br><span class="line">q</span><br><span class="line"><span class="number">1000</span> @q</span><br></pre></td></tr></table></figure><p>这里能实现功能，是因为我们假定了文件最多只有 1000 行。但更好的方式是使用「递归」宏，它会一直执行，知道不能执行为止：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">qq</span><br><span class="line"><span class="number">0</span>yf jP0^A@q</span><br><span class="line">q</span><br><span class="line">@q</span><br></pre></td></tr></table></figure><p>（对于上面这个插入行号的功能，如果你不愿意使用宏，同样可以通过这段按键操作来实现：<code>:%s/^/\=line(&#39;.&#39;) . &#39;. &#39;</code>）。</p><p>这里向大家展示了如何不用宏来达到相应的效果，但要注意，这些不用宏的实现方式只适用于这些简单的示例。对于一些比较复杂的自动化操作，你确实应该考虑使用宏。</p><p>请参阅以下文档获取更多帮助：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">:h recording</span><br><span class="line">:h <span class="string">'lazyredraw'</span></span><br></pre></td></tr></table></figure><h2 id="颜色主题"><a href="#颜色主题" class="headerlink" title="颜色主题"></a>颜色主题</h2><p>颜色主题可以把你的 Vim 变得更漂亮。Vim 是由多个组件构成的，我们可以给每一个组件都设置不同的文字颜色、背景颜色以及文字加粗等等。比如，我们可以通过这个命令来设置背景颜色：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:<span class="keyword">highlight</span> Normal ctermbg=<span class="number">1</span> guibg=<span class="keyword">red</span></span><br></pre></td></tr></table></figure><p>执行后你会发现，现在背景颜色变成红色了。请参阅 <code>:h :highlight</code> 来获取更多帮助。</p><p>其实，颜色主题就是一系列的 <code>:highlight</code> 命令的集合。</p><p>事实上，大部分颜色主题都包含两套配置。一套适用于例如 xterm 和 iTerm 这样的终端环境（使用前缀 <code>cterm</code>），另一套适用于例如 gvim 和 MacVim 的图形界面环境（使用前缀 <code>gui</code>）。对于上面的例子，<code>ctermbg</code> 就是针对终端环境的，而 <code>guibg</code> 就是针对图形界面环境的。</p><p>如果你下载了一个颜色主题，并且在终端环境中打开了 Vim，然后发现显示的颜色与主题截图中差别很大，那很可能是配置文件只设置了图形界面环境的颜色。反之同理，如果你使用的是图形界面环境，发现显示颜色有问题，那就很可能是配置文件只设置了终端环境的颜色。</p><p>第二种情况（图形界面环境的显示问题）其实不难解决。如果你使用的是 Neovim 或者 Vim 7.4.1830 的后续版本，可以通过打开<a href="https://zh.wikipedia.org/wiki/真彩色" target="_blank" rel="noopener">真彩色</a>设置来解决显示问题。这就可以让终端环境的 Vim 使用 GUI 的颜色定义，但首先，你要确认一下你的终端环境和环境内的组件（比如 tmux）是否都支持真彩色。可以看一下<a href="https://gist.github.com/XVilka/8346728" target="_blank" rel="noopener">这篇文档</a>，描述的十分详细。</p><p>请参阅以下文档或链接来获取更多帮助：</p><ul><li><code>:h &#39;termguicolors&#39;</code></li><li><a href="#主题列表">主题列表</a></li><li><a href="#自定义主题中的颜色">自定义主题中的颜色</a></li></ul><h2 id="折叠"><a href="#折叠" class="headerlink" title="折叠"></a>折叠</h2><p>每一部分文字（或者代码）都会有特定的结构。对于存在结构的文字和代码，也就意味着它们可以按照一定的逻辑分割成不同区域。Vim 中的折叠功能，就是按照特定的逻辑把文字和代码折叠成一行，并显示一些简短的描述。折叠功能涉及到很多操作，而且折叠功能可以嵌套使用。</p><p>在 Vim 中，有以下 6 中折叠类型：</p><table><thead><tr><th>折叠方式</th><th>概述</th></tr></thead><tbody><tr><td>diff</td><td>在「比较窗口」中折叠未改变的文本</td></tr><tr><td>expr</td><td>使用 <code>&#39;foldexpr&#39;</code> 来创建新的折叠逻辑</td></tr><tr><td>indent</td><td>基于缩进折叠</td></tr><tr><td>manual</td><td>使用 <code>zf</code>、<code>zF</code> 或 <code>:fold</code> 来自定义折叠</td></tr><tr><td>marker</td><td>根据特定的文本标记折叠（通常用于代码注释）</td></tr><tr><td>syntax</td><td>根据语法折叠，比如折叠 <code>if</code> 代码块</td></tr></tbody></table><p><strong>注意</strong>：折叠功能可能会显著地影响性能。如果你在使用折叠功能的时候出现了打字卡顿之类的问题，请考虑使用 <a href="https://github.com/Konfekt/FastFold" target="_blank" rel="noopener">FastFold 插件</a>。这个插件可以让 Vim 按需更新折叠内容，而不是一直调用。</p><p>请参阅以下文档获取更多帮助：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">:h usr_28</span><br><span class="line">:h folds</span><br></pre></td></tr></table></figure><h2 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h2><p>如果你保存了当前的「视图」（请参阅 <code>:h :mkview</code>），那么当前窗口、配置和按键映射都会被保存下来（请参阅 <code>:h :loadview</code>）。</p><p>「会话」就是存储所有窗口的相关设置，以及全局设置。简单来说，就是给当前的 Vim 运行实例拍个照，然后把相关信息存储到会话文件中。存储之后的改动就不会在会话文件中显示，你只需要在改动后更新一下会话文件就可以了。</p><p>你可以把当前工作的「项目」存储起来，然后可以在不同的「项目」之间切换。</p><p>现在就来试试吧。打开几个窗口和标签，然后执行 <code>:mksession Foo.vim</code>。如果你没有指定文件名，那就会默认保存为 <code>Session.vim</code>。这个文件会保存在当前的目录下，你可以通过 <code>:pwd</code> 来显示当前路径。重启 Vim 之后，你只需要执行 <code>:source Foo.vim</code>，就可以恢复刚才的会话了。所有的缓冲区、窗口布局、按键映射以及工作路径都会恢复到保存时的状态。</p><p>其实 Vim 的会话文件就只是 Vim 命令的集合。你可以通过命令 <code>:vs Foo.vim</code> 来看看会话文件中究竟有什么。</p><p>你可以决定 Vim 会话中究竟要保存哪些配置，只需要设置一下 <code>&#39;sessionoptions&#39;</code> 就可以了。</p><p>为了方便开发，Vim 把最后一次调用或写入的会话赋值给了一个内部变量 <code>v:this_session</code>。</p><p>请参阅以下文档来获取更多帮助：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">:h Session</span><br><span class="line">:h <span class="string">'sessionoptions'</span></span><br><span class="line">:h <span class="variable">v:this_session</span></span><br></pre></td></tr></table></figure><h2 id="局部化"><a href="#局部化" class="headerlink" title="局部化"></a>局部化</h2><p>以上提到的很多概念，都有一个局部化（非全局）的版本：</p><table><thead><tr><th>全局</th><th>局部</th><th>作用域</th><th>帮助文档</th></tr></thead><tbody><tr><td><code>:set</code></td><td><code>:setlocal</code></td><td>缓冲区或窗口</td><td><code>:h local-options</code></td></tr><tr><td><code>:map</code></td><td><code>:map &lt;buffer&gt;</code></td><td>缓冲区</td><td><code>:h :map-local</code></td></tr><tr><td><code>:autocmd</code></td><td><code>:autocmd * &lt;buffer&gt;</code></td><td>缓冲区</td><td><code>:h autocmd-buflocal</code></td></tr><tr><td><code>:cd</code></td><td><code>:lcd</code></td><td>窗口</td><td><code>:h :lcd</code></td></tr><tr><td><code>:&lt;leader&gt;</code></td><td><code>:&lt;localleader&gt;</code></td><td>缓冲区</td><td><code>:h maploacalleader</code></td></tr></tbody></table><p>变量也有不同的作用域，详细内容请参考 <a href="http://vimdoc.sourceforge.net/htmldoc/usr_41.html" target="_blank" rel="noopener">Vim scripting 的文档</a>。</p><h1 id="用法-1"><a href="#用法-1" class="headerlink" title="用法"></a>用法</h1><h2 id="获取离线帮助"><a href="#获取离线帮助" class="headerlink" title="获取离线帮助"></a>获取离线帮助</h2><h2 id="获取离线帮助-备选"><a href="#获取离线帮助-备选" class="headerlink" title="获取离线帮助(备选)"></a>获取离线帮助(备选)</h2><h2 id="获取在线帮助"><a href="#获取在线帮助" class="headerlink" title="获取在线帮助"></a>获取在线帮助</h2><h2 id="执行自动命令"><a href="#执行自动命令" class="headerlink" title="执行自动命令"></a>执行自动命令</h2><h3 id="用户自定义事件"><a href="#用户自定义事件" class="headerlink" title="用户自定义事件"></a>用户自定义事件</h3><h3 id="内部自带事件"><a href="#内部自带事件" class="headerlink" title="内部自带事件"></a>内部自带事件</h3><h2 id="剪贴板"><a href="#剪贴板" class="headerlink" title="剪贴板"></a>剪贴板</h2><h2 id="剪贴板使用-Windows-OSX"><a href="#剪贴板使用-Windows-OSX" class="headerlink" title="剪贴板使用 (Windows, OSX)"></a>剪贴板使用 (Windows, OSX)</h2><h2 id="剪贴板使用-Linux-BSD-…"><a href="#剪贴板使用-Linux-BSD-…" class="headerlink" title="剪贴板使用 (Linux, BSD, …)"></a>剪贴板使用 (Linux, BSD, …)</h2><h2 id="打开文件时恢复光标位置"><a href="#打开文件时恢复光标位置" class="headerlink" title="打开文件时恢复光标位置"></a>打开文件时恢复光标位置</h2><h2 id="备份文件，交换文件，撤销文件以及-viminfo-文件的处理"><a href="#备份文件，交换文件，撤销文件以及-viminfo-文件的处理" class="headerlink" title="备份文件，交换文件，撤销文件以及 viminfo 文件的处理"></a>备份文件，交换文件，撤销文件以及 viminfo 文件的处理</h2><h2 id="编辑远程文件"><a href="#编辑远程文件" class="headerlink" title="编辑远程文件"></a>编辑远程文件</h2><h2 id="插件管理"><a href="#插件管理" class="headerlink" title="插件管理"></a>插件管理</h2><h2 id="片段插入"><a href="#片段插入" class="headerlink" title="片段插入"></a>片段插入</h2><h2 id="使用外部程序和过滤器"><a href="#使用外部程序和过滤器" class="headerlink" title="使用外部程序和过滤器"></a>使用外部程序和过滤器</h2><h2 id="MatchIt"><a href="#MatchIt" class="headerlink" title="MatchIt"></a>MatchIt</h2><h1 id="技巧-1"><a href="#技巧-1" class="headerlink" title="技巧"></a>技巧</h1><h2 id="聪明的使用-n-和-N"><a href="#聪明的使用-n-和-N" class="headerlink" title="聪明的使用 n 和 N"></a>聪明的使用 n 和 N</h2><h2 id="聪明的使用命令行历史"><a href="#聪明的使用命令行历史" class="headerlink" title="聪明的使用命令行历史"></a>聪明的使用命令行历史</h2><h2 id="智能-Ctrl-l"><a href="#智能-Ctrl-l" class="headerlink" title="智能 Ctrl-l"></a>智能 Ctrl-l</h2><h2 id="禁用错误报警声音和图标"><a href="#禁用错误报警声音和图标" class="headerlink" title="禁用错误报警声音和图标"></a>禁用错误报警声音和图标</h2><h2 id="快速移动当前行"><a href="#快速移动当前行" class="headerlink" title="快速移动当前行"></a>快速移动当前行</h2><h2 id="快速添加空行"><a href="#快速添加空行" class="headerlink" title="快速添加空行"></a>快速添加空行</h2><h2 id="快速编辑自定义宏"><a href="#快速编辑自定义宏" class="headerlink" title="快速编辑自定义宏"></a>快速编辑自定义宏</h2><h2 id="快速跳转到源-头-文件"><a href="#快速跳转到源-头-文件" class="headerlink" title="快速跳转到源(头)文件"></a>快速跳转到源(头)文件</h2><h2 id="在-GUI-中快速改变字体大小"><a href="#在-GUI-中快速改变字体大小" class="headerlink" title="在 GUI 中快速改变字体大小"></a>在 GUI 中快速改变字体大小</h2><h2 id="根据模式改变光标类型"><a href="#根据模式改变光标类型" class="headerlink" title="根据模式改变光标类型"></a>根据模式改变光标类型</h2><h2 id="防止水平滑动的时候失去选择"><a href="#防止水平滑动的时候失去选择" class="headerlink" title="防止水平滑动的时候失去选择"></a>防止水平滑动的时候失去选择</h2><h2 id="重新载入保存文件"><a href="#重新载入保存文件" class="headerlink" title="重新载入保存文件"></a>重新载入保存文件</h2><h2 id="智能当前行"><a href="#智能当前行" class="headerlink" title="智能当前行"></a>智能当前行</h2><h2 id="更快的关键字补全"><a href="#更快的关键字补全" class="headerlink" title="更快的关键字补全"></a>更快的关键字补全</h2><h1 id="命令-1"><a href="#命令-1" class="headerlink" title="命令"></a>命令</h1><h2 id="global-在所有匹配行执行命令"><a href="#global-在所有匹配行执行命令" class="headerlink" title=":global - 在所有匹配行执行命令"></a>:global - 在所有匹配行执行命令</h2><h2 id="normal-and-execute-脚本梦之队"><a href="#normal-and-execute-脚本梦之队" class="headerlink" title=":normal and :execute - 脚本梦之队"></a>:normal and :execute - 脚本梦之队</h2><h2 id="redir-重定向消息"><a href="#redir-重定向消息" class="headerlink" title=":redir - 重定向消息"></a>:redir - 重定向消息</h2><h1 id="调试-1"><a href="#调试-1" class="headerlink" title="调试"></a>调试</h1><h2 id="常规建议"><a href="#常规建议" class="headerlink" title="常规建议"></a>常规建议</h2><h2 id="查看启动日志"><a href="#查看启动日志" class="headerlink" title="查看启动日志"></a>查看启动日志</h2><h2 id="查看运行时日志"><a href="#查看运行时日志" class="headerlink" title="查看运行时日志"></a>查看运行时日志</h2><h2 id="调整日志等级"><a href="#调整日志等级" class="headerlink" title="调整日志等级"></a>调整日志等级</h2><h2 id="vim-脚本调试"><a href="#vim-脚本调试" class="headerlink" title="vim 脚本调试"></a>vim 脚本调试</h2><h2 id="语法文件调试"><a href="#语法文件调试" class="headerlink" title="语法文件调试"></a>语法文件调试</h2><h1 id="杂项-1"><a href="#杂项-1" class="headerlink" title="杂项"></a>杂项</h1><h2 id="附加资源"><a href="#附加资源" class="headerlink" title="附加资源"></a>附加资源</h2><h2 id="Vim-配置集合"><a href="#Vim-配置集合" class="headerlink" title="Vim 配置集合"></a>Vim 配置集合</h2><h2 id="内置插件"><a href="#内置插件" class="headerlink" title="内置插件"></a>内置插件</h2><h2 id="将-Control-映射到-CapsLock"><a href="#将-Control-映射到-CapsLock" class="headerlink" title="将 Control 映射到 CapsLock"></a>将 Control 映射到 CapsLock</h2><h2 id="复活节彩蛋"><a href="#复活节彩蛋" class="headerlink" title="复活节彩蛋"></a>复活节彩蛋</h2><h2 id="为何使用-hjkl"><a href="#为何使用-hjkl" class="headerlink" title="为何使用 hjkl"></a>为何使用 hjkl</h2><h1 id="怪癖-1"><a href="#怪癖-1" class="headerlink" title="怪癖"></a>怪癖</h1><h2 id="编辑小文件很慢"><a href="#编辑小文件很慢" class="headerlink" title="编辑小文件很慢"></a>编辑小文件很慢</h2><h2 id="编辑大文件很慢"><a href="#编辑大文件很慢" class="headerlink" title="编辑大文件很慢"></a>编辑大文件很慢</h2><h2 id="新行用于-NUL"><a href="#新行用于-NUL" class="headerlink" title="新行用于 NUL"></a>新行用于 NUL</h2><h2 id="相同部分粘贴-要不为什么我总要设置‘粘贴’"><a href="#相同部分粘贴-要不为什么我总要设置‘粘贴’" class="headerlink" title="相同部分粘贴 (要不为什么我总要设置‘粘贴’?)"></a>相同部分粘贴 (要不为什么我总要设置‘粘贴’?)</h2><h2 id="在终端使用-Esc-延时"><a href="#在终端使用-Esc-延时" class="headerlink" title="在终端使用 Esc 延时"></a>在终端使用 Esc 延时</h2><h2 id="无法重复函数中执行的搜索"><a href="#无法重复函数中执行的搜索" class="headerlink" title="无法重复函数中执行的搜索"></a>无法重复函数中执行的搜索</h2><h2 id="主题列表-1"><a href="#主题列表-1" class="headerlink" title="主题列表"></a>主题列表</h2><h1 id="插件列表-1"><a href="#插件列表-1" class="headerlink" title="插件列表"></a>插件列表</h1><h1 id="Neovim-1"><a href="#Neovim-1" class="headerlink" title="Neovim"></a>Neovim</h1><h2 id="加入我们"><a href="#加入我们" class="headerlink" title="加入我们"></a>加入我们</h2><p>可以协助我们核对翻译，或者从<a href="CONTRIBUTING.md">章节列表</a>中认领章节进行翻译。</p><h2 id="致谢："><a href="#致谢：" class="headerlink" title="致谢："></a>致谢：</h2><ul><li><a href="https://github.com/LCTT" target="_blank" rel="noopener">Linux 中国翻译组</a></li><li><a href="https://github.com/xitu/gold-miner" target="_blank" rel="noopener">掘金翻译计划</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;vim-galore-中文翻译&quot;&gt;&lt;a href=&quot;#vim-galore-中文翻译&quot; class=&quot;headerlink&quot; title=&quot;vim-galore 中文翻译&quot;&gt;&lt;/a&gt;vim-galore 中文翻译&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/xitu/gold-miner/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://rawgit.com/aleen42/badges/master/src/juejin_translation.svg&quot; alt=&quot;掘金翻译计划&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Vim from zero to hero - Vim 从入门到精通&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;原文地址：&lt;a href=&quot;https://github.com/mhinz/vim-galore&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/mhinz/vim-galore&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;原文作者：Marco Hinz&lt;/li&gt;
&lt;li&gt;本文地址：&lt;a href=&quot;https://github.com/wsdjeg/vim-galore-zh_cn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/wsdjeg/vim-galore-zh_cn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#简介-1&quot;&gt;简介&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#什么是-vim&quot;&gt;什么是 Vim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#vim-哲学&quot;&gt;Vim 哲学&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#入门&quot;&gt;入门&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#精简的-vimrc&quot;&gt;精简的 vimrc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#我正在使用什么样的-vim&quot;&gt;我正在使用的是什么样的 Vim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#备忘录&quot;&gt;备忘录&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#基础-1&quot;&gt;基础&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#缓冲区窗口标签&quot;&gt;缓冲区，窗口，标签&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#已激活已载入已列出已命名缓冲区&quot;&gt;当前缓冲区，加载缓冲区，缓冲区列表，命名缓冲区&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#参数列表&quot;&gt;参数列表&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#按键映射&quot;&gt;按键映射&lt;/a&gt;
    
    </summary>
    
      <category term="Tutorial" scheme="https://note.pin.bo/categories/Tutorial/"/>
    
    
      <category term="vi" scheme="https://note.pin.bo/tags/vi/"/>
    
      <category term="vim" scheme="https://note.pin.bo/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>Lodash中文文档</title>
    <link href="https://note.pin.bo/2016-07-26-lodash-syntax-doc/"/>
    <id>https://note.pin.bo/2016-07-26-lodash-syntax-doc/</id>
    <published>2016-07-26T11:08:00.000Z</published>
    <updated>2017-02-20T04:34:06.646Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h1><hr><h2 id="chunk"><a href="#chunk" class="headerlink" title="_.chunk"></a>_.chunk</h2><p><strong><code>_.chunk(array, [size=0])</code></strong></p><p>将数组拆分成多个 size 长度的块，并组成一个新数组。 如果数组无法被分割成全部等长的块，那么最后剩余的元素将组成一个块。</p><p><strong><code>参数</code></strong></p><ol><li>array (Array):需要被处理的数组</li><li>[size=0] (number):每个块的长度</li></ol><p><strong><code>返回值 (Array)</code></strong></p><p>返回一个拆分好的新数组</p><a id="more"></a><p><strong><code>示例</code></strong></p><pre><code>_.chunk([&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;], 2);// =&gt; [[&apos;a&apos;, &apos;b&apos;], [&apos;c&apos;, &apos;d&apos;]]_.chunk([&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;], 3);// =&gt; [[&apos;a&apos;, &apos;b&apos;, &apos;c&apos;], [&apos;d&apos;]]</code></pre><hr><h2 id="compact"><a href="#compact" class="headerlink" title="_.compact"></a>_.compact</h2><p><strong><code>_.compact(array)</code></strong></p><p>创建一个移除了所有假值的数组。例如：false、null、 0、””、undefined， 以及NaN 都是 “假值”.</p><p><strong><code>参数</code></strong></p><ol><li>array (Array):需要被处理的数组。</li></ol><p><strong><code>返回值 (Array)</code></strong></p><p>返回移除了假值的数组。</p><p><strong><code>示例</code></strong></p><pre><code>_.compact([0, 1, false, 2, &apos;&apos;, 3]);// =&gt; [1, 2, 3]</code></pre><hr><h2 id="concat"><a href="#concat" class="headerlink" title="_.concat"></a>_.concat</h2><p><strong><code>_.concat(array, [values])</code></strong></p><p>创建一个用任何数组 或 值连接的新数组。</p><p><strong><code>参数</code></strong></p><ol><li><p>array (Array):需要被连接的数组</p></li><li><p>[values] (…*):需要被连接的值的队列</p></li></ol><p><strong><code>返回值 (Array)</code></strong></p><p>返回连接后的新数组</p><p><strong><code>示例</code></strong></p><pre><code>var array = [1];var other = _.concat(array, 2, [3], [[4]]);console.log(other);// =&gt; [1, 2, 3, [4]]console.log(array);// =&gt; [1]</code></pre><hr><h2 id="difference"><a href="#difference" class="headerlink" title="_.difference"></a>_.difference</h2><p><strong><code>_.difference(array, [values])</code></strong></p><p>创建一个差异化后的数组，不包括使用 <a href="http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero" target="_blank" rel="noopener">SameValueZero</a> 方法提供的数组。</p><p><strong><code>参数</code></strong></p><ol><li><p>array (Array):需要处理的数组</p></li><li><p>[values] (…Array):用于对比差异的数组</p></li></ol><p><strong><code>返回值 (Array)</code></strong></p><p>返回一个差异化后的新数组</p><p><strong><code>示例</code></strong></p><pre><code>_.difference([3, 2, 1], [4, 2]);// =&gt; [3, 1]</code></pre><hr><h2 id="differenceBy"><a href="#differenceBy" class="headerlink" title="_.differenceBy"></a>_.differenceBy</h2><p><strong><code>_.differenceBy(array, [values], [iteratee=_.identity])</code></strong></p><p>这个方法类似 _.difference，此外它接受一个 iteratee 调用每一个数组和值。iteratee 会传入一个参数：(value)。</p><p><strong><code>参数</code></strong></p><ol><li><p>array (Array):需要处理的数组</p></li><li><p>[values] (…Array):用于对比差异的数组</p></li><li><p>[iteratee=_.identity] (Function|Object|string):这个函数会处理每一个元素</p></li></ol><p><strong><code>返回值 (Array)</code></strong></p><p>返回一个差异化后的新数组</p><p><strong><code>示例</code></strong></p><pre><code>_.differenceBy([3.1, 2.2, 1.3], [4.4, 2.5], Math.floor);// =&gt; [3.1, 1.3]// 使用了 `_.property` 的回调结果_.differenceBy([{ &apos;x&apos;: 2 }, { &apos;x&apos;: 1 }], [{ &apos;x&apos;: 1 }], &apos;x&apos;);// =&gt; [{ &apos;x&apos;: 2 }]</code></pre><hr><h2 id="differenceWith"><a href="#differenceWith" class="headerlink" title="_.differenceWith"></a>_.differenceWith</h2><p><strong><code>_.differenceWith(array, [values], [comparator])</code></strong></p><p>这个方法类似 _.difference，此外它接受一个 comparator 调用每一个数组元素的值。 comparator 会传入2个参数：(arrVal, othVal)。</p><p><strong><code>参数</code></strong></p><ol><li><p>array (Array):需要处理的数组</p></li><li><p>[values] (…Array):用于对比差异的数组</p></li><li><p>[comparator] (Function):这个函数会处理每一个元素</p></li></ol><p><strong><code>返回值 (Array)</code></strong></p><p>返回一个差异化后的新数组</p><p><strong><code>示例</code></strong></p><pre><code>var objects = [{ &apos;x&apos;: 1, &apos;y&apos;: 2 }, { &apos;x&apos;: 2, &apos;y&apos;: 1 }];_.differenceWith(objects, [{ &apos;x&apos;: 1, &apos;y&apos;: 2 }], _.isEqual);// =&gt; [{ &apos;x&apos;: 2, &apos;y&apos;: 1 }]</code></pre><hr><h2 id="drop"><a href="#drop" class="headerlink" title="_.drop"></a>_.drop</h2><p><strong><code>_.drop(array, [n=1])</code></strong></p><p>裁剪数组中的前 N 个数组，返回剩余的部分。</p><p><strong><code>参数</code></strong></p><ol><li><p>array (Array):需要处理的数组</p></li><li><p>[n=1] (number):裁剪的个数</p></li></ol><p><strong><code>返回值 (Array)</code></strong></p><p>返回数组的剩余的部分。</p><p><strong><code>示例</code></strong></p><pre><code>_.drop([1, 2, 3]);// =&gt; [2, 3]_.drop([1, 2, 3], 2);// =&gt; [3]_.drop([1, 2, 3], 5);// =&gt; []_.drop([1, 2, 3], 0);// =&gt; [1, 2, 3]</code></pre><hr><h2 id="dropRight"><a href="#dropRight" class="headerlink" title="_.dropRight"></a>_.dropRight</h2><p><strong><code>_.dropRight(array, [n=1])</code></strong></p><p>从右边开始裁剪数组中的 N 个数组，返回剩余的部分。</p><p><strong><code>参数</code></strong></p><ol><li><p>array (Array):需要处理的数组</p></li><li><p>[n=1] (number):裁剪的个数</p></li></ol><p><strong><code>返回值 (Array)</code></strong></p><p>返回数组的剩余的部分。</p><p><strong><code>示例</code></strong></p><pre><code>_.dropRight([1, 2, 3]);// =&gt; [1, 2]_.dropRight([1, 2, 3], 2);// =&gt; [1]_.dropRight([1, 2, 3], 5);// =&gt; []_.dropRight([1, 2, 3], 0);// =&gt; [1, 2, 3]</code></pre><hr><h2 id="dropRightWhile"><a href="#dropRightWhile" class="headerlink" title="_.dropRightWhile"></a>_.dropRightWhile</h2><p><strong><code>_.dropRightWhile(array, [predicate=_.identity])</code></strong></p><p>从右边开始裁剪数组，起点从 predicate 返回假值开始。predicate 会传入3个参数：(value, index, array)。</p><p><strong><code>参数</code></strong></p><ol><li><p>array (Array):需要处理的数组</p></li><li><p>[predicate=_.identity] (Function|Object|string):这个函数会在每一次迭代调用</p></li></ol><p><strong><code>返回值 (Array)</code></strong></p><p>返回裁剪后的数组</p><p><strong><code>示例</code></strong></p><pre><code>var resolve = _.partial(_.map, _, &apos;user&apos;);var users = [  { &apos;user&apos;: &apos;barney&apos;,  &apos;active&apos;: true },  { &apos;user&apos;: &apos;fred&apos;,    &apos;active&apos;: false },  { &apos;user&apos;: &apos;pebbles&apos;, &apos;active&apos;: false }];resolve( _.dropRightWhile(users, function(o) { return !o.active; }) );// =&gt; [&apos;barney&apos;]// 使用了 `_.matches` 的回调结果resolve( _.dropRightWhile(users, { &apos;user&apos;: &apos;pebbles&apos;, &apos;active&apos;: false }) );// =&gt; [&apos;barney&apos;, &apos;fred&apos;]// 使用了 `_.matchesProperty` 的回调结果resolve( _.dropRightWhile(users, [&apos;active&apos;, false]) );// =&gt; [&apos;barney&apos;]// 使用了 `_.property` 的回调结果resolve( _.dropRightWhile(users, &apos;active&apos;) );// =&gt; [&apos;barney&apos;, &apos;fred&apos;, &apos;pebbles&apos;]</code></pre><hr><h2 id="dropWhile"><a href="#dropWhile" class="headerlink" title="_.dropWhile"></a>_.dropWhile</h2><p><strong><code>_.dropWhile(array, [predicate=_.identity])</code></strong></p><p>裁剪数组，起点从 predicate 返回假值开始。predicate 会传入3个参数：(value, index, array)。</p><p><strong><code>参数</code></strong></p><ol><li><p>array (Array):需要处理的数组</p></li><li><p>[predicate=_.identity] (Function|Object|string):这个函数会在每一次迭代调用</p></li></ol><p><strong><code>返回值 (Array)</code></strong></p><p>返回裁剪后的数组</p><p><strong><code>示例</code></strong></p><pre><code>var users = [  { &apos;user&apos;: &apos;barney&apos;,  &apos;active&apos;: false },  { &apos;user&apos;: &apos;fred&apos;,    &apos;active&apos;: false },  { &apos;user&apos;: &apos;pebbles&apos;, &apos;active&apos;: true }];_.dropWhile(users, function(o) { return !o.active; });// =&gt; 结果: [&apos;pebbles&apos;]// 使用了 `_.matches` 的回调处理_.dropWhile(users, { &apos;user&apos;: &apos;barney&apos;, &apos;active&apos;: false });// =&gt; 结果: [&apos;fred&apos;, &apos;pebbles&apos;]// 使用了 `_.matchesProperty` 的回调处理_.dropWhile(users, [&apos;active&apos;, false]);// =&gt; 结果: [&apos;pebbles&apos;]// 使用了 `_.property` 的回调处理_.dropWhile(users, &apos;active&apos;);// =&gt; 结果: [&apos;barney&apos;, &apos;fred&apos;, &apos;pebbles&apos;]</code></pre><hr><h2 id="fill"><a href="#fill" class="headerlink" title="_.fill"></a>_.fill</h2><p><strong><code>_.fill(array, value, [start=0], [end=array.length])</code></strong></p><p>指定 值 填充数组，从 start 到 end 的位置，但不包括 end 本身的位置。 </p><p>注意: 这个方法会改变数组</p><p><strong><code>参数</code></strong></p><ol><li><p>array (Array):需要填充的数组</p></li><li><p>value (*):填充的值</p></li><li><p>[start=0] (number):开始位置</p></li><li><p>[end=array.length] (number):结束位置</p></li></ol><p><strong><code>返回值 (Array)</code></strong></p><p>返回数组</p><p><strong><code>示例</code></strong></p><pre><code>var array = [1, 2, 3];_.fill(array, &apos;a&apos;);console.log(array);// =&gt; [&apos;a&apos;, &apos;a&apos;, &apos;a&apos;]_.fill(Array(3), 2);// =&gt; [2, 2, 2]_.fill([4, 6, 8, 10], &apos;*&apos;, 1, 3);// =&gt; [4, &apos;*&apos;, &apos;*&apos;, 10]</code></pre><hr><h2 id="findIndex"><a href="#findIndex" class="headerlink" title="_.findIndex"></a>_.findIndex</h2><p><strong><code>_.findIndex(array, [predicate=_.identity])</code></strong></p><p>这个方法类似 _.find。除了它返回最先通过 predicate 判断为真值的元素的 index ，而不是元素本身。</p><p><strong><code>参数</code></strong></p><ol><li><p>array (Array):需要搜索的数组</p></li><li><p>[predicate=_.identity] (Function|Object|string):这个函数会在每一次迭代调用</p></li></ol><p><strong><code>返回值 (Number)</code></strong></p><p>返回符合元素的 index，否则返回 -1。</p><p><strong><code>示例</code></strong></p><pre><code>var users = [  { &apos;user&apos;: &apos;barney&apos;,  &apos;active&apos;: false },  { &apos;user&apos;: &apos;fred&apos;,    &apos;active&apos;: false },  { &apos;user&apos;: &apos;pebbles&apos;, &apos;active&apos;: true }];_.findIndex(users, function(o) { return o.user == &apos;barney&apos;; });// =&gt; 0// 使用了 `_.matches` 的回调结果_.findIndex(users, { &apos;user&apos;: &apos;fred&apos;, &apos;active&apos;: false });// =&gt; 1// 使用了 `_.matchesProperty` 的回调结果_.findIndex(users, [&apos;active&apos;, false]);// =&gt; 0// 使用了 `_.property` 的回调结果_.findIndex(users, &apos;active&apos;);// =&gt; 2</code></pre><hr><h2 id="findLastIndex"><a href="#findLastIndex" class="headerlink" title="_.findLastIndex"></a>_.findLastIndex</h2><p><strong><code>_.findLastIndex(array, [predicate=_.identity])</code></strong></p><p>这个方式类似 _.findIndex ， 不过它是从右到左的。</p><p><strong><code>参数</code></strong></p><ol><li><p>array (Array):需要搜索的数组</p></li><li><p>[predicate=_.identity] (Function|Object|string):这个函数会在每一次迭代调用</p></li></ol><p><strong><code>返回值 (Number)</code></strong></p><p>返回符合元素的 index，否则返回 -1。</p><p><strong><code>示例</code></strong></p><pre><code>var users = [  { &apos;user&apos;: &apos;barney&apos;,  &apos;active&apos;: true },  { &apos;user&apos;: &apos;fred&apos;,    &apos;active&apos;: false },  { &apos;user&apos;: &apos;pebbles&apos;, &apos;active&apos;: false }];_.findLastIndex(users, function(o) { return o.user == &apos;pebbles&apos;; });// =&gt; 2// 使用了 `_.matches` 的回调结果_.findLastIndex(users, { &apos;user&apos;: &apos;barney&apos;, &apos;active&apos;: true });// =&gt; 0// 使用了 `_.matchesProperty` 的回调结果_.findLastIndex(users, [&apos;active&apos;, false]);// =&gt; 2// 使用了 `_.property` 的回调结果_.findLastIndex(users, &apos;active&apos;);// =&gt; 0</code></pre><hr><h2 id="flatten"><a href="#flatten" class="headerlink" title="_.flatten"></a>_.flatten</h2><p><strong><code>_.flatten(array)</code></strong></p><p>向上一级展平数组嵌套</p><p><strong><code>参数</code></strong></p><ol><li>array (Array):需要展平的数组</li></ol><p><strong><code>返回值 (Array)</code></strong></p><p>返回展平后的新数组</p><p><strong><code>示例</code></strong></p><pre><code>_.flatten([1, [2, [3, [4]], 5]]);// =&gt; [1, 2, [3, [4]], 5]</code></pre><hr><h2 id="flattenDeep"><a href="#flattenDeep" class="headerlink" title="_.flattenDeep"></a>_.flattenDeep</h2><p><strong><code>_.flattenDeep(array)</code></strong></p><p>递归展平 数组.</p><p><strong><code>参数</code></strong></p><ol><li>array (Array):需要展平的数组</li></ol><p><strong><code>返回值 (Array)</code></strong></p><p>返回展平后的新数组</p><p><strong><code>示例</code></strong></p><pre><code>_.flattenDeep([1, [2, [3, [4]], 5]]);// =&gt; [1, 2, 3, 4, 5]</code></pre><hr><h2 id="flattenDepth"><a href="#flattenDepth" class="headerlink" title="_.flattenDepth"></a>_.flattenDepth</h2><p><strong><code>_.flattenDepth(array, [depth=1])</code></strong></p><p>根据 depth 递归展平 数组 的层级</p><p><strong><code>参数</code></strong></p><ol><li><p>array (Array):需要展平的数组</p></li><li><p>[depth=1] (number):展平的层级</p></li></ol><p><strong><code>返回值 (Array)</code></strong></p><p>返回展平后的新数组</p><p><strong><code>示例</code></strong></p><pre><code>var array = [1, [2, [3, [4]], 5]];_.flattenDepth(array, 1);// =&gt; [1, 2, [3, [4]], 5]_.flattenDepth(array, 2);// =&gt; [1, 2, 3, [4], 5]</code></pre><hr><h2 id="fromPairs"><a href="#fromPairs" class="headerlink" title="_.fromPairs"></a>_.fromPairs</h2><p><strong><code>_.fromPairs(pairs)</code></strong></p><p>反向版 _.toPairs，这个方法返回一个由键值对构成的对象。</p><p><strong><code>参数</code></strong></p><ol><li>pairs (Array):键值对</li></ol><p><strong><code>返回值 (Object)</code></strong></p><p>返回一个新对象</p><p><strong><code>示例</code></strong></p><pre><code>_.fromPairs([[&apos;fred&apos;, 30], [&apos;barney&apos;, 40]]);// =&gt; { &apos;fred&apos;: 30, &apos;barney&apos;: 40 }</code></pre><hr><h2 id="head-first"><a href="#head-first" class="headerlink" title="_.head(first)"></a>_.head(first)</h2><p><strong><code>_.head(array)</code></strong></p><p>获得数组的首个元素</p><p><strong><code>参数</code></strong></p><ol><li>array (Array):要检索的数组</li></ol><p><strong><code>返回值 (*)</code></strong></p><p>返回数组中的首个元素</p><p><strong><code>示例</code></strong></p><pre><code>_.head([1, 2, 3]);// =&gt; 1_.head([]);// =&gt; undefined</code></pre><hr><h2 id="indexOf"><a href="#indexOf" class="headerlink" title="_.indexOf"></a>_.indexOf</h2><p><strong><code>_.indexOf(array, value, [fromIndex=0])</code></strong></p><p>根据 value 使用 <a href="http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero" target="_blank" rel="noopener">SameValueZero</a> 等值比较返回数组中首次匹配的 index， 如果 fromIndex 为负值，将从数组尾端索引进行匹配，如果将 fromIndex 设置为 true，将使用更快的二进制检索机制。</p><p><strong><code>参数</code></strong></p><ol><li><p>array (Array):要检索的数组</p></li><li><p>value (*):要检索的值</p></li><li><p>[fromIndex=0] (number):需要检索的起始位置，如果为 true 将使用二进制检索方式。</p></li></ol><p><strong><code>返回值 (Number)</code></strong></p><p>返回匹配值的index，否则返回 -1。</p><p><strong><code>示例</code></strong></p><pre><code>_.indexOf([1, 2, 1, 2], 2);// =&gt; 1// 使用了 `fromIndex`_.indexOf([1, 2, 1, 2], 2, 2);// =&gt; 3</code></pre><hr><h2 id="initial"><a href="#initial" class="headerlink" title="_.initial"></a>_.initial</h2><p><strong><code>_.initial(array)</code></strong></p><p>获取数组中除了最后一个元素之外的所有元素。</p><p><strong><code>参数</code></strong></p><ol><li>array (Array):原数组</li></ol><p><strong><code>返回值 (Array)</code></strong></p><p>返回没有最后一个元素的数组</p><p><strong><code>示例</code></strong></p><pre><code>_.initial([1, 2, 3]);// =&gt; [1, 2]</code></pre><hr><h2 id="intersection"><a href="#intersection" class="headerlink" title="_.intersection"></a>_.intersection</h2><p><strong><code>_.intersection([arrays])</code></strong></p><p>创建一个包含所有使用 <a href="http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero" target="_blank" rel="noopener">SameValueZero</a> 进行等值比较后筛选的唯一值数组。</p><p><strong><code>参数</code></strong></p><ol><li>[arrays] (…Array)：需要处理的数组队列</li></ol><p><strong><code>返回值 (Array)</code></strong></p><p>返回数组中所有数组共享元素的新数组</p><p><strong><code>示例</code></strong></p><pre><code>_.intersection([2, 1], [4, 2], [1, 2]);// =&gt; [2]</code></pre><hr><h2 id="intersectionBy"><a href="#intersectionBy" class="headerlink" title="_.intersectionBy"></a>_.intersectionBy</h2><p><strong><code>_.intersectionBy([arrays], [iteratee=_.identity])</code></strong></p><p>这个方法类似 _.intersection，此外它接受一个 iteratee 调用每一个数组和值。iteratee 会传入一个参数：(value)。</p><p><strong><code>参数</code></strong></p><ol><li><p>[arrays] (…Array)：需要处理的数组队列</p></li><li><p>[iteratee=_.identity] (Function|Object|string):这个函数会处理每一个元素</p></li></ol><p><strong><code>返回值 (Array)</code></strong></p><p>返回数组中共享元素的新数组</p><p><strong><code>示例</code></strong></p><pre><code>_.intersectionBy([2.1, 1.2], [4.3, 2.4], Math.floor);// =&gt; [2.1]// 使用了 `_.property` 的回调结果_.intersectionBy([{ &apos;x&apos;: 1 }], [{ &apos;x&apos;: 2 }, { &apos;x&apos;: 1 }], &apos;x&apos;);// =&gt; [{ &apos;x&apos;: 1 }]</code></pre><hr><h2 id="intersectionWith"><a href="#intersectionWith" class="headerlink" title="_.intersectionWith"></a>_.intersectionWith</h2><p><strong><code>_.intersectionWith([arrays], [comparator])</code></strong></p><p>这个方法类似 _.intersection，此外它接受一个 comparator 调用每一个数组和值。iteratee 会传入2个参数：((arrVal, othVal)。</p><p><strong><code>参数</code></strong></p><ol><li><p>[arrays] (…Array)：需要处理的数组队列</p></li><li><p>[comparator] (Function)：这个函数会处理每一个元素</p></li></ol><p><strong><code>返回值 (Array)</code></strong></p><p>返回数组中共享元素的新数组</p><p><strong><code>示例</code></strong></p><pre><code>var objects = [{ &apos;x&apos;: 1, &apos;y&apos;: 2 }, { &apos;x&apos;: 2, &apos;y&apos;: 1 }];var others = [{ &apos;x&apos;: 1, &apos;y&apos;: 1 }, { &apos;x&apos;: 1, &apos;y&apos;: 2 }];_.intersectionWith(objects, others, _.isEqual);// =&gt; [{ &apos;x&apos;: 1, &apos;y&apos;: 2 }]</code></pre><hr><h2 id="join"><a href="#join" class="headerlink" title="_.join"></a>_.join</h2><p><strong><code>_.join(array, [separator=&#39;,&#39;])</code></strong></p><p>将数组中的所有元素转换为由 separator 分隔的字符串。</p><p><strong><code>参数</code></strong></p><ol><li><p>array (Array):需要转换的数组</p></li><li><p>[separator=’,’] (string):分隔符</p></li></ol><p><strong><code>返回值 (String)</code></strong></p><p>返回连接好的字符串</p><p><strong><code>示例</code></strong></p><pre><code>_.join([&apos;a&apos;, &apos;b&apos;, &apos;c&apos;], &apos;~&apos;);// =&gt; &apos;a~b~c&apos;}]</code></pre><hr><h2 id="last"><a href="#last" class="headerlink" title="_.last"></a>_.last</h2><p><strong><code>_.last(array)</code></strong></p><p>获取数组中的最后一个元素</p><p><strong><code>参数</code></strong></p><ol><li>array (Array):需要检索的数组</li></ol><p><strong><code>返回值 (*)</code></strong></p><p>返回数组中的最后一个元素</p><p><strong><code>示例</code></strong></p><pre><code>_.last([1, 2, 3]);// =&gt; 3</code></pre><hr><h2 id="lastIndexOf"><a href="#lastIndexOf" class="headerlink" title="_.lastIndexOf"></a>_.lastIndexOf</h2><p><strong><code>_.lastIndexOf(array, value, [fromIndex=array.length-1])</code></strong></p><p>这个方法类似 _.indexOf，但它是从右到左遍历元素的。</p><p><strong><code>参数</code></strong></p><ol><li><p>array (Array):要检索的数组</p></li><li><p>value (*):要检索的值</p></li><li><p>[fromIndex=array.length-1] (number)：检索 index 的起点</p></li></ol><p><strong><code>返回值 (Number)</code></strong></p><p>返回匹配值的index，否则返回 -1。</p><p><strong><code>示例</code></strong></p><pre><code>_.lastIndexOf([1, 2, 1, 2], 2);// =&gt; 3// 使用了 `fromIndex`_.lastIndexOf([1, 2, 1, 2], 2, 2);// =&gt; 1</code></pre><hr><h2 id="pull"><a href="#pull" class="headerlink" title="_.pull"></a>_.pull</h2><p><strong><code>_.pull(array, [values])</code></strong></p><p>移除所有经过 <a href="http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero" target="_blank" rel="noopener">SameValueZero</a> 等值比较为 true 的元素。</p><p>注意: 不同于 _.without，这个方法会改变数组。</p><p><strong><code>参数</code></strong></p><ol><li><p>array (Array):需要调整的数组</p></li><li><p>[values] (…*):要移除的值</p></li></ol><p><strong><code>返回值 (Array)</code></strong></p><p>返回数组本身</p><p><strong><code>示例</code></strong></p><pre><code>var array = [1, 2, 3, 1, 2, 3];_.pull(array, 2, 3);console.log(array);// =&gt; [1, 1]</code></pre><hr><h2 id="pullAll"><a href="#pullAll" class="headerlink" title="_.pullAll"></a>_.pullAll</h2><p><strong><code>_.pullAll(array, values)</code></strong></p><p>这个方式类似 _.pull，但它接受数组形式的一系列值。 </p><p>注意: 不同于 _.difference，这个方法会改变数组。</p><p><strong><code>参数</code></strong></p><ol><li><p>array (Array):需要调整的数组</p></li><li><p>values (Array)：要移除的值</p></li></ol><p><strong><code>返回值 (Array)</code></strong></p><p>返回数组本身</p><p><strong><code>示例</code></strong></p><pre><code>var array = [1, 2, 3, 1, 2, 3];_.pullAll(array, [2, 3]);console.log(array);// =&gt; [1, 1]</code></pre><hr><h2 id="pullAllBy"><a href="#pullAllBy" class="headerlink" title="_.pullAllBy"></a>_.pullAllBy</h2><p><strong><code>_.pullAllBy(array, values, [iteratee=_.identity])</code></strong></p><p>这个方法类似 _.pullAll，除了它接受一个 comparator 调用每一个数组元素的值。 comparator 会传入一个参数：(value)。 </p><p>注意: 不同于 _.differenceBy，这个方法会改变数组。</p><p><strong><code>参数</code></strong></p><ol><li><p>array (Array):需要调整的数组</p></li><li><p>values (Array):要移除的值</p></li><li><p>[iteratee=_.identity] (Function|Object|string):这个函数会处理每一个元素</p></li></ol><p><strong><code>返回值 (Array)</code></strong></p><p>返回数组本身</p><p><strong><code>示例</code></strong></p><pre><code>var array = [{ &apos;x&apos;: 1 }, { &apos;x&apos;: 2 }, { &apos;x&apos;: 3 }, { &apos;x&apos;: 1 }];_.pullAllBy(array, [{ &apos;x&apos;: 1 }, { &apos;x&apos;: 3 }], &apos;x&apos;);console.log(array);// =&gt; [{ &apos;x&apos;: 2 }]</code></pre><hr><h2 id="pullAt"><a href="#pullAt" class="headerlink" title="_.pullAt"></a>_.pullAt</h2><p><strong><code>_.pullAt(array, [indexes])</code></strong></p><p>根据给的 indexes 移除对应的数组元素并返回被移除的元素。 </p><p>注意: 不同于 _.at，这个方法会改变数组。</p><p><strong><code>参数</code></strong></p><ol><li><p>array (Array):需要调整的数组</p></li><li><p>[indexes] (…(number|number[]):indexes 可以是特殊的数组队列，或者个别的单个或多个参数</p></li></ol><p><strong><code>返回值 (Array)</code></strong></p><p>返回被移除的元素数组</p><p><strong><code>示例</code></strong></p><pre><code>var array = [5, 10, 15, 20];var evens = _.pullAt(array, 1, 3);console.log(array);// =&gt; [5, 15]console.log(evens);// =&gt; [10, 20]</code></pre><hr><h2 id="remove"><a href="#remove" class="headerlink" title="_.remove"></a>_.remove</h2><p><strong><code>_.remove(array, [predicate=_.identity])</code></strong></p><p>移除经过 predicate 处理为真值的元素，并返回被移除的元素。predicate 会传入3个参数：(value, index, array) </p><p>注意: 不同于 _.filter，这个方法会改变数组。</p><p><strong><code>参数</code></strong></p><ol><li><p>array (Array)：需要调整的数组</p></li><li><p>[predicate=_.identity] (Function|Object|string)：这个函数会处理每一个元素</p></li></ol><p><strong><code>返回值 (Array)</code></strong></p><p>返回被移除的元素的数组</p><p><strong><code>示例</code></strong></p><pre><code>var array = [1, 2, 3, 4];var evens = _.remove(array, function(n) {  return n % 2 == 0;});console.log(array);// =&gt; [1, 3]console.log(evens);// =&gt; [2, 4]</code></pre><hr><h2 id="reverse"><a href="#reverse" class="headerlink" title="_.reverse"></a>_.reverse</h2><p><strong><code>_.reverse(array)</code></strong></p><p>反转数组，第一个元素移动到最后一位，第二个元素移动到倒数第二，类似这样。 </p><p>注意: 这个方法会改变数组，根据 Array#<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse" target="_blank" rel="noopener">reverse</a></p><p><strong><code>参数</code></strong></p><ol><li>array (Array)：需要调整的数组</li></ol><p><strong><code>返回值 (Array)</code></strong></p><p>返回原数组</p><p><strong><code>示例</code></strong></p><pre><code>var array = [1, 2, 3];_.reverse(array);// =&gt; [3, 2, 1]console.log(array);// =&gt; [3, 2, 1]</code></pre><hr><h2 id="slice"><a href="#slice" class="headerlink" title="_.slice"></a>_.slice</h2><p><strong><code>_.slice(array, [start=0], [end=array.length])</code></strong></p><p>创建一个裁剪后的数组，从 start 到 end 的位置，但不包括 end 本身的位置。 </p><p>注意: 这个方法用于代替 Array#<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice" target="_blank" rel="noopener">slice</a> 来确保数组正确返回。</p><p><strong><code>参数</code></strong></p><ol><li><p>array (Array)：需要裁剪的数组</p></li><li><p>[start=0] (number)：开始位置</p></li><li><p>[end=array.length] (number)：结束位置</p></li></ol><p><strong><code>返回值 (Array)</code></strong></p><p>返回裁剪后的数组</p><p><strong><code>示例</code></strong></p><pre><code>。。。</code></pre><hr><h2 id="sortedIndex"><a href="#sortedIndex" class="headerlink" title="_.sortedIndex"></a>_.sortedIndex</h2><p><strong><code>_.sortedIndex(array, value)</code></strong></p><p>使用二进制的方式检索来决定 value 应该插入在数组中位置。它的 index 应该尽可能的小以保证数组的排序。</p><p><strong><code>参数</code></strong></p><ol><li><p>array (Array):需要检索的已排序数组</p></li><li><p>value (*):要评估位置的值</p></li></ol><p><strong><code>返回值 (Number)</code></strong></p><p>返回 value 应该在数组中插入的 index。</p><p><strong><code>示例</code></strong></p><pre><code>_.sortedIndex([30, 50], 40);// =&gt; 1_.sortedIndex([4, 5], 4);// =&gt; 0</code></pre><hr><h2 id="sortedIndexBy"><a href="#sortedIndexBy" class="headerlink" title="_.sortedIndexBy"></a>_.sortedIndexBy</h2><p><strong><code>_.sortedIndexBy(array, value, [iteratee=_.identity])</code></strong></p><p>这个方法类似 _.sortedIndex，它还接受一个 iteratee 调用每一个数组和值来计算排序。iteratee 会传入一个参数：(value)。</p><p><strong><code>参数</code></strong></p><ol><li><p>array (Array):需要检索的已排序数组</p></li><li><p>value (*):要评估位置的值</p></li><li><p>[iteratee=_.identity] (Function|Object|string):这个函数会处理每一个元素</p></li></ol><p><strong><code>返回值 (Number)</code></strong></p><p>返回 value 应该在数组中插入的 index。</p><p><strong><code>示例</code></strong></p><pre><code>var dict = { &apos;thirty&apos;: 30, &apos;forty&apos;: 40, &apos;fifty&apos;: 50 };_.sortedIndexBy([&apos;thirty&apos;, &apos;fifty&apos;], &apos;forty&apos;, _.propertyOf(dict));// =&gt; 1// 使用了 `_.property` 回调结果_.sortedIndexBy([{ &apos;x&apos;: 4 }, { &apos;x&apos;: 5 }], { &apos;x&apos;: 4 }, &apos;x&apos;);// =&gt; 0</code></pre><hr><h2 id="sortedIndexOf"><a href="#sortedIndexOf" class="headerlink" title="_.sortedIndexOf"></a>_.sortedIndexOf</h2><p><strong><code>_.sortedIndexOf(array, value)</code></strong></p><p>这个方法类似 _.indexOf，但它是执行二进制来检索已经排序的数组的。</p><p><strong><code>参数</code></strong></p><ol><li><p>array (Array):需要检索的已排序数组</p></li><li><p>value (*):要评估位置的值</p></li></ol><p><strong><code>返回值 (Number)</code></strong></p><p>返回匹配值的 index ，否则返回 -1.</p><p><strong><code>示例</code></strong></p><pre><code>_.sortedIndexOf([1, 1, 2, 2], 2);// =&gt; 2</code></pre><hr><h2 id="sortedLastIndex"><a href="#sortedLastIndex" class="headerlink" title="_.sortedLastIndex"></a>_.sortedLastIndex</h2><p><strong><code>_.sortedLastIndex(array, value)</code></strong></p><p>这个方法类似 _.sortedIndex，它返回在 value 中尽可能大的 index 位置。</p><p><strong><code>参数</code></strong></p><ol><li><p>array (Array):需要检索的已排序数组</p></li><li><p>value (*):要评估位置的值</p></li></ol><p><strong><code>返回值 (Number)</code></strong></p><p>返回 value 应该在数组中插入的 index。</p><p><strong><code>示例</code></strong></p><pre><code>_.sortedLastIndex([4, 5], 4);// =&gt; 1</code></pre><hr><h2 id="sortedLastIndexBy"><a href="#sortedLastIndexBy" class="headerlink" title="_.sortedLastIndexBy"></a>_.sortedLastIndexBy</h2><p><strong><code>_.sortedLastIndexBy(array, value, [iteratee=_.identity])</code></strong></p><p>这个方法类似 _.sortedLastIndex，它接受一个 iteratee 调用每一个数组和值来计算排序。iteratee 会传入一个参数：(value)。</p><p><strong><code>参数</code></strong></p><ol><li><p>array (Array):需要检索的已排序数组</p></li><li><p>value (*):要评估位置的值</p></li><li><p>[iteratee=_.identity] (Function|Object|string):这个函数会处理每一个元素</p></li></ol><p><strong><code>返回值 (Number)</code></strong></p><p>返回 value 应该在数组中插入的 index。</p><p><strong><code>示例</code></strong></p><pre><code>// 使用了 `_.property` 的回调结果_.sortedLastIndexBy([{ &apos;x&apos;: 4 }, { &apos;x&apos;: 5 }], { &apos;x&apos;: 4 }, &apos;x&apos;);// =&gt; 1</code></pre><hr><h2 id="sortedLastIndexOf"><a href="#sortedLastIndexOf" class="headerlink" title="_.sortedLastIndexOf"></a>_.sortedLastIndexOf</h2><p><strong><code>_.sortedLastIndexOf(array, value)</code></strong></p><p>这个方法类似 _.lastIndexOf，除了它是执行二进制来检索已经排序的数组的。</p><p><strong><code>参数</code></strong></p><ol><li><p>array (Array):需要检索的数组</p></li><li><p>value (*):要评估位置的值</p></li></ol><p><strong><code>返回值 (Number)</code></strong></p><p>返回匹配值的 index ，否则返回 -1.</p><p><strong><code>示例</code></strong></p><pre><code>_.sortedLastIndexOf([1, 1, 2, 2], 2);// =&gt; 3</code></pre><hr><h2 id="sortedUniq"><a href="#sortedUniq" class="headerlink" title="_.sortedUniq"></a>_.sortedUniq</h2><p><strong><code>_.sortedUniq(array)</code></strong></p><p>这个方法类似 _.uniq，并且它会排序并优化数组。</p><p><strong><code>参数</code></strong></p><ol><li>array (Array):需要检索的已排序数组</li></ol><p><strong><code>返回值 (Array)</code></strong></p><p>返回一个不重复的数组</p><p><strong><code>示例</code></strong></p><pre><code>_.sortedUniq([1, 1, 2]);// =&gt; [1, 2]</code></pre><hr><h2 id="sortedUniqBy"><a href="#sortedUniqBy" class="headerlink" title="_.sortedUniqBy"></a>_.sortedUniqBy</h2><p><strong><code>_.sortedUniqBy(array, [iteratee])</code></strong></p><p>这个方法类似 _.uniqBy，它接受一个 iteratee 调用每一个数组和值来排序并优化数组。</p><p><strong><code>参数</code></strong></p><ol><li><p>array (Array):需要检索的数组</p></li><li><p>[iteratee] (Function):这个函数会处理每一个元素</p></li></ol><p><strong><code>返回值 (Array)</code></strong></p><p>返回一个不重复的数组</p><p><strong><code>示例</code></strong></p><pre><code>_.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);// =&gt; [1.1, 2.3]</code></pre><hr><h2 id="tail"><a href="#tail" class="headerlink" title="_.tail"></a>_.tail</h2><p><strong><code>_.tail(array)</code></strong></p><p>获取数组中除了第一个元素的剩余数组。</p><p><strong><code>参数</code></strong></p><ol><li>array (Array):需要检索的数组</li></ol><p><strong><code>返回值 (Array)</code></strong></p><p>返回数组中除了第一个元素的剩余数组</p><p><strong><code>示例</code></strong></p><pre><code>_.tail([1, 2, 3]);// =&gt; [2, 3]</code></pre><hr><h2 id="take"><a href="#take" class="headerlink" title="_.take"></a>_.take</h2><p><strong><code>_.take(array, [n=1])</code></strong></p><p>从数组的起始元素开始提取 N 个元素。</p><p><strong><code>参数</code></strong></p><ol><li><p>array (Array):需要处理的数组</p></li><li><p>[n=1] (number):要提取的个数</p></li></ol><p><strong><code>返回值 (Array)</code></strong></p><p>返回提取的元素数组</p><p><strong><code>示例</code></strong></p><pre><code>_.take([1, 2, 3]);// =&gt; [1]_.take([1, 2, 3], 2);// =&gt; [1, 2]_.take([1, 2, 3], 5);// =&gt; [1, 2, 3]_.take([1, 2, 3], 0);// =&gt; []</code></pre><hr><h2 id="takeRight"><a href="#takeRight" class="headerlink" title="_.takeRight"></a>_.takeRight</h2><p><strong><code>_.takeRight(array, [n=1])</code></strong></p><p>从数组的结束元素开始提取 N 个数组.</p><p><strong><code>参数</code></strong></p><ol><li><p>array (Array):需要处理的数组</p></li><li><p>[n=1] (number):要提取的个数</p></li></ol><p><strong><code>返回值 (Array)</code></strong></p><p>返回提取的元素数组</p><p><strong><code>示例</code></strong></p><pre><code>_.takeRight([1, 2, 3]);// =&gt; [3]_.takeRight([1, 2, 3], 2);// =&gt; [2, 3]_.takeRight([1, 2, 3], 5);// =&gt; [1, 2, 3]_.takeRight([1, 2, 3], 0);// =&gt; []</code></pre><hr><h2 id="takeRightWhile"><a href="#takeRightWhile" class="headerlink" title="_.takeRightWhile"></a>_.takeRightWhile</h2><p><strong><code>_.takeRightWhile(array, [predicate=_.identity])</code></strong></p><p>从数组的最右边开始提取数组，直到 predicate 返回假值。predicate 会传入三个参数：(value, index, array)。</p><p><strong><code>参数</code></strong></p><ol><li><p>array (Array):需要处理的数组</p></li><li><p>[predicate=_.identity] (Function|Object|string):这个函数会处理每一个元素</p></li></ol><p><strong><code>返回值 (Array)</code></strong></p><p>返回提取的元素数组</p><p><strong><code>示例</code></strong></p><pre><code>var users = [  { &apos;user&apos;: &apos;barney&apos;,  &apos;active&apos;: true },  { &apos;user&apos;: &apos;fred&apos;,    &apos;active&apos;: false },  { &apos;user&apos;: &apos;pebbles&apos;, &apos;active&apos;: false }];_.takeRightWhile(users, function(o) { return !o.active; });// =&gt; 结果:  [&apos;fred&apos;, &apos;pebbles&apos;]// 使用了 `_.matches` 的回调处理_.takeRightWhile(users, { &apos;user&apos;: &apos;pebbles&apos;, &apos;active&apos;: false });// =&gt; 结果:  [&apos;pebbles&apos;]// 使用了 `_.matchesProperty` 的回调处理_.takeRightWhile(users, [&apos;active&apos;, false]);// =&gt; 结果:  [&apos;fred&apos;, &apos;pebbles&apos;]// 使用了 `_.property` 的回调处理_.takeRightWhile(users, &apos;active&apos;);// =&gt; []</code></pre><hr><h2 id="takeWhile"><a href="#takeWhile" class="headerlink" title="_.takeWhile"></a>_.takeWhile</h2><p><strong><code>_.takeWhile(array, [predicate=_.identity])</code></strong></p><p>从数组的开始提取数组，直到 predicate 返回假值。predicate 会传入三个参数：(value, index, array)。</p><p><strong><code>参数</code></strong></p><ol><li><p>array (Array):需要处理的数组</p></li><li><p>[predicate=_.identity] (Function|Object|string):这个函数会处理每一个元素</p></li></ol><p><strong><code>返回值 (Array)</code></strong></p><p>返回提取的元素数组</p><p><strong><code>示例</code></strong></p><pre><code>var users = [  { &apos;user&apos;: &apos;barney&apos;,  &apos;active&apos;: false },  { &apos;user&apos;: &apos;fred&apos;,    &apos;active&apos;: false},  { &apos;user&apos;: &apos;pebbles&apos;, &apos;active&apos;: true }];_.takeWhile(users, function(o) { return !o.active; });// =&gt; objects for [&apos;barney&apos;, &apos;fred&apos;]// 使用了 `_.matches` 的回调处理_.takeWhile(users, { &apos;user&apos;: &apos;barney&apos;, &apos;active&apos;: false });// =&gt;结果: [&apos;barney&apos;]// 使用了 `_.matchesProperty` 的回调处理_.takeWhile(users, [&apos;active&apos;, false]);// =&gt;结果: [&apos;barney&apos;, &apos;fred&apos;]// 使用了 `_.property` 的回调处理_.takeWhile(users, &apos;active&apos;);// =&gt; []</code></pre><hr><h2 id="union"><a href="#union" class="headerlink" title="_.union"></a>_.union</h2><p><strong><code>_.union([arrays])</code></strong></p><p>创建顺序排列的唯一值组成的数组。所有值经过 <a href="http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero" target="_blank" rel="noopener">SameValueZero</a> 等值比较。</p><p><strong><code>参数</code></strong></p><ol><li>[arrays] (…Array):需要处理的数组队列</li></ol><p><strong><code>返回值 (Array)</code></strong></p><p>返回处理好的数组</p><p><strong><code>示例</code></strong></p><pre><code>_.union([2, 1], [4, 2], [1, 2]);// =&gt; [2, 1, 4]</code></pre><hr><h2 id="unionBy"><a href="#unionBy" class="headerlink" title="_.unionBy"></a>_.unionBy</h2><p><strong><code>_.unionBy([arrays], [iteratee=_.identity])</code></strong></p><p>这个方法类似 _.union，此外它接受一个 iteratee 调用每一个数组和值。iteratee 会传入一个参数：(value)。</p><p><strong><code>参数</code></strong></p><ol><li><p>[arrays] (…Array):需要处理的数组队列</p></li><li><p>[iteratee=_.identity] (Function|Object|string):这个函数会处理每一个元素</p></li></ol><p><strong><code>返回值 (Array)</code></strong></p><p>返回处理好的数组</p><p><strong><code>示例</code></strong></p><pre><code>_.unionBy([2.1, 1.2], [4.3, 2.4], Math.floor);// =&gt; [2.1, 1.2, 4.3]// 使用了 `_.property` 的回调结果_.unionBy([{ &apos;x&apos;: 1 }], [{ &apos;x&apos;: 2 }, { &apos;x&apos;: 1 }], &apos;x&apos;);// =&gt; [{ &apos;x&apos;: 1 }, { &apos;x&apos;: 2 }]</code></pre><hr><h2 id="unionWith"><a href="#unionWith" class="headerlink" title="_.unionWith"></a>_.unionWith</h2><p><strong><code>_.unionWith([arrays], [comparator])</code></strong></p><p>这个方法类似 _.union， 此外它接受一个 comparator 调用每一个数组元素的值。 comparator 会传入2个参数：(arrVal, othVal)。</p><p><strong><code>参数</code></strong></p><ol><li><p>[arrays] (…Array):需要处理的数组队列</p></li><li><p>[comparator] (Function):这个函数会处理每一个元素</p></li></ol><p><strong><code>返回值 (Array)</code></strong></p><p>返回处理好的数组</p><p><strong><code>示例</code></strong></p><pre><code>var objects = [{ &apos;x&apos;: 1, &apos;y&apos;: 2 }, { &apos;x&apos;: 2, &apos;y&apos;: 1 }];var others = [{ &apos;x&apos;: 1, &apos;y&apos;: 1 }, { &apos;x&apos;: 1, &apos;y&apos;: 2 }];_.unionWith(objects, others, _.isEqual);// =&gt; [{ &apos;x&apos;: 1, &apos;y&apos;: 2 }, { &apos;x&apos;: 2, &apos;y&apos;: 1 }, { &apos;x&apos;: 1, &apos;y&apos;: 1 }]</code></pre><hr><h2 id="uniq"><a href="#uniq" class="headerlink" title="_.uniq"></a>_.uniq</h2><p><strong><code>_.uniq(array)</code></strong></p><p>创建一个不重复的数组副本。使用了 <a href="http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero" target="_blank" rel="noopener">SameValueZero</a> 等值比较。只有首次出现的元素才会被保留。</p><p><strong><code>参数</code></strong></p><ol><li>array (Array):需要处理的数组</li></ol><p><strong><code>返回值 (Array)</code></strong></p><p>返回不重复的数组</p><p><strong><code>示例</code></strong></p><pre><code>_.uniq([2, 1, 2]);// =&gt; [2, 1]</code></pre><hr><h2 id="uniqBy"><a href="#uniqBy" class="headerlink" title="_.uniqBy"></a>_.uniqBy</h2><p><strong><code>_.uniqBy(array, [iteratee=_.identity])</code></strong></p><p>这个方法类似 _.uniq，但它接受一个 iteratee 调用每一个数组和值来计算唯一性。iteratee 会传入一个参数：(value)。</p><p><strong><code>参数</code></strong></p><ol><li><p>array (Array):需要处理的数组</p></li><li><p>[iteratee=_.identity] (Function|Object|string):这个函数会处理每一个元素</p></li></ol><p><strong><code>返回值 (Array)</code></strong></p><p>返回不重复的数组</p><p><strong><code>示例</code></strong></p><pre><code>_.uniqBy([2.1, 1.2, 2.3], Math.floor);// =&gt; [2.1, 1.2]// 使用了 `_.property` 的回调结果_.uniqBy([{ &apos;x&apos;: 1 }, { &apos;x&apos;: 2 }, { &apos;x&apos;: 1 }], &apos;x&apos;);// =&gt; [{ &apos;x&apos;: 1 }, { &apos;x&apos;: 2 }]</code></pre><hr><h2 id="uniqWith"><a href="#uniqWith" class="headerlink" title="_.uniqWith"></a>_.uniqWith</h2><p><strong><code>_.uniqWith(array, [comparator])</code></strong></p><p>这个方法类似 _.uniq，除了它接受一个 comparator 来比较计算唯一性。 comparator 会传入2个参数：(arrVal, othVal).</p><p><strong><code>参数</code></strong></p><ol><li><p>array (Array):需要处理的数组</p></li><li><p>[comparator] (Function):这个函数会处理每一个元素</p></li></ol><p><strong><code>返回值 (Array)</code></strong></p><p>返回不重复的数组</p><p><strong><code>示例</code></strong></p><pre><code>var objects = [{ &apos;x&apos;: 1, &apos;y&apos;: 2 }, { &apos;x&apos;: 2, &apos;y&apos;: 1 },  { &apos;x&apos;: 1, &apos;y&apos;: 2 }];_.uniqWith(objects, _.isEqual);// =&gt; [{ &apos;x&apos;: 1, &apos;y&apos;: 2 }, { &apos;x&apos;: 2, &apos;y&apos;: 1 }]</code></pre><hr><h2 id="unzip"><a href="#unzip" class="headerlink" title="_.unzip"></a>_.unzip</h2><p><strong><code>_.unzip(array)</code></strong></p><p>这个方法类似 _.zip，除了它接收一个打包后的数组并且还原为打包前的状态。</p><p><strong><code>参数</code></strong></p><ol><li>array (Array):需要解包的已打包数组</li></ol><p><strong><code>返回值 (Array)</code></strong></p><p>返回一个解包后的数组</p><p><strong><code>示例</code></strong></p><pre><code>var zipped = _.zip([&apos;fred&apos;, &apos;barney&apos;], [30, 40], [true, false]);// =&gt; [[&apos;fred&apos;, 30, true], [&apos;barney&apos;, 40, false]]_.unzip(zipped);// =&gt; [[&apos;fred&apos;, &apos;barney&apos;], [30, 40], [true, false]]</code></pre><hr><h2 id="unzipWith"><a href="#unzipWith" class="headerlink" title="_.unzipWith"></a>_.unzipWith</h2><p><strong><code>_.unzipWith(array, [iteratee=_.identity])</code></strong></p><p>这个方法类似 _.unzip，除了它接受一个 iteratee 来决定如何重组解包后的数组。iteratee 会传入4个参数：(accumulator, value, index, group)。每组的第一个元素作为初始化的值。</p><p><strong><code>参数</code></strong></p><ol><li><p>array (Array):需要解包的已打包数组</p></li><li><p>[iteratee=_.identity] (Function):决定如何重组解包后的元素</p></li></ol><p><strong><code>返回值 (Array)</code></strong></p><p>返回一个解包后的数组</p><p><strong><code>示例</code></strong></p><pre><code>var zipped = _.zip([1, 2], [10, 20], [100, 200]);// =&gt; [[1, 10, 100], [2, 20, 200]]_.unzipWith(zipped, _.add);// =&gt; [3, 30, 300]</code></pre><hr><h2 id="without"><a href="#without" class="headerlink" title="_.without"></a>_.without</h2><p><strong><code>_.without(array, [values])</code></strong></p><p>创建一个移除了所有提供的 values 的数组。使用了 <a href="http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero" target="_blank" rel="noopener">SameValueZero</a> 等值比较。</p><p><strong><code>参数</code></strong></p><ol><li><p>array (Array):要处理的数组</p></li><li><p>[values] (…*):要排除的值</p></li></ol><p><strong><code>返回值 (Array)</code></strong></p><p>返回一个处理好的新数组</p><p><strong><code>示例</code></strong></p><pre><code>_.without([1, 2, 1, 3], 1, 2);// =&gt; [3]</code></pre><hr><h2 id="xor"><a href="#xor" class="headerlink" title="_.xor"></a>_.xor</h2><p><strong><code>_.xor([arrays])</code></strong></p><p>创建一个包含了所有唯一值的数组。使用了 <a href="https://en.wikipedia.org/wiki/Symmetric_difference" target="_blank" rel="noopener">symmetric difference</a> 等值比较。</p><p><strong><code>参数</code></strong></p><ol><li>[arrays] (…Array):要处理的数组</li></ol><p><strong><code>返回值 (Array)</code></strong></p><p>包含了所有唯一值的新数组</p><p><strong><code>示例</code></strong></p><pre><code>_.xor([2, 1], [4, 2]);// =&gt; [1, 4]</code></pre><hr><h2 id="xorBy"><a href="#xorBy" class="headerlink" title="_.xorBy"></a>_.xorBy</h2><p><strong><code>_.xorBy([arrays], [iteratee=_.identity])</code></strong></p><p>这个方法类似 _.xor，除了它接受一个 iteratee 调用每一个数组和值。iteratee 会传入一个参数：(value)。</p><p><strong><code>参数</code></strong></p><ol><li><p>[arrays] (…Array):要处理的数组</p></li><li><p>[iteratee=_.identity] (Function|Object|string):这个函数会处理每一个元素</p></li></ol><p><strong><code>返回值 (Array)</code></strong></p><p>包含了所有唯一值的新数组</p><p><strong><code>示例</code></strong></p><pre><code>_.xorBy([2.1, 1.2], [4.3, 2.4], Math.floor);// =&gt; [1.2, 4.3]// 使用了 `_.property` 的回调结果_.xorBy([{ &apos;x&apos;: 1 }], [{ &apos;x&apos;: 2 }, { &apos;x&apos;: 1 }], &apos;x&apos;);// =&gt; [{ &apos;x&apos;: 2 }]</code></pre><hr><h2 id="xorWith"><a href="#xorWith" class="headerlink" title="_.xorWith"></a>_.xorWith</h2><p><strong><code>_.xorWith([arrays], [comparator])</code></strong></p><p>这个方法类似 _.xor，除了它接受一个 comparator 调用每一个数组元素的值。 comparator 会传入2个参数：(arrVal, othVal)。</p><p><strong><code>参数</code></strong></p><ol><li><p>[arrays] (…Array):要处理的数组</p></li><li><p>[comparator] (Function):这个函数会处理每一个元素</p></li></ol><p><strong><code>返回值 (Array)</code></strong></p><p>包含了所有唯一值的新数组</p><p><strong><code>示例</code></strong></p><pre><code>var objects = [{ &apos;x&apos;: 1, &apos;y&apos;: 2 }, { &apos;x&apos;: 2, &apos;y&apos;: 1 }];var others = [{ &apos;x&apos;: 1, &apos;y&apos;: 1 }, { &apos;x&apos;: 1, &apos;y&apos;: 2 }];_.xorWith(objects, others, _.isEqual);// =&gt; [{ &apos;x&apos;: 2, &apos;y&apos;: 1 }, { &apos;x&apos;: 1, &apos;y&apos;: 1 }]</code></pre><hr><h2 id="zip"><a href="#zip" class="headerlink" title="_.zip"></a>_.zip</h2><p><strong><code>_.zip([arrays])</code></strong></p><p>创建一个打包所有元素后的数组。第一个元素包含所有提供数组的第一个元素，第二个包含所有提供数组的第二个元素，以此类推。</p><p><strong><code>参数</code></strong></p><ol><li>[arrays] (…Array):要处理的数组</li></ol><p><strong><code>返回值 (Array)</code></strong></p><p>返回一个打包后的数组</p><p><strong><code>示例</code></strong></p><pre><code>_.zip([&apos;fred&apos;, &apos;barney&apos;], [30, 40], [true, false]);// =&gt; [[&apos;fred&apos;, 30, true], [&apos;barney&apos;, 40, false]]</code></pre><hr><h2 id="zipObject"><a href="#zipObject" class="headerlink" title="_.zipObject"></a>_.zipObject</h2><p><strong><code>_.zipObject([props=[]], [values=[]])</code></strong></p><p>这个方法类似 _.fromPairs，除了它接受2个数组，一个作为属性名，一个作为属性值。</p><p><strong><code>参数</code></strong></p><ol><li><p>[props=[]] (Array):属性名</p></li><li><p>[values=[]] (Array):属性值</p></li></ol><p><strong><code>返回值 (Object)</code></strong></p><p>返回一个新的对象</p><p><strong><code>示例</code></strong></p><pre><code>_.zipObject([&apos;a&apos;, &apos;b&apos;], [1, 2]);// =&gt; { &apos;a&apos;: 1, &apos;b&apos;: 2 }</code></pre><hr><h2 id="zipObjectDeep"><a href="#zipObjectDeep" class="headerlink" title="_.zipObjectDeep"></a>_.zipObjectDeep</h2><p><strong><code>_.zipObjectDeep([props=[]], [values=[]])</code></strong></p><p>这个方法类似 _.zipObject，除了它支持属性路径。</p><p><strong><code>参数</code></strong></p><ol><li><p>[props=[]] (Array):属性名</p></li><li><p>[values=[]] (Array):属性值</p></li></ol><p><strong><code>返回值 (Object)</code></strong></p><p>返回一个新的对象</p><p><strong><code>示例</code></strong></p><pre><code>_.zipObjectDeep([&apos;a.b[0].c&apos;, &apos;a.b[1].d&apos;], [1, 2]);// =&gt; { &apos;a&apos;: { &apos;b&apos;: [{ &apos;c&apos;: 1 }, { &apos;d&apos;: 2 }] } }</code></pre><hr><h2 id="zipWith"><a href="#zipWith" class="headerlink" title="_.zipWith"></a>_.zipWith</h2><p><strong><code>_.zipWith([arrays], [iteratee=_.identity])</code></strong></p><p>这个方法类似 _.zip， 除了它接受一个 iteratee 决定如何重组值。 iteratee 会调用每一组元素。</p><p><strong><code>参数</code></strong></p><ol><li><p>[arrays] (…Array):要处理的数组</p></li><li><p>[iteratee=_.identity] (Function): The function to combine grouped values.</p></li></ol><p><strong><code>返回值 (Array)</code></strong></p><p>返回一个打包后的数组</p><p><strong><code>示例</code></strong></p><pre><code>_.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {  return a + b + c;});// =&gt; [111, 222]</code></pre><hr><h1 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h1><hr><h2 id="countBy"><a href="#countBy" class="headerlink" title="_.countBy"></a>_.countBy</h2><p><strong><code>_.countBy(collection, [iteratee=_.identity])</code></strong></p><p>创建一个组成对象，key是经过 iteratee 处理的集合的结果，value 是处理结果的次数。 iteratee 会传入一个参数：(value)。</p><p><strong><code>参数</code></strong></p><ol><li><p>collection (Array|Object):需要遍历的集合</p></li><li><p>[iteratee=_.identity] (Function|Object|string):这个函数会处理每一个元素</p></li></ol><p><strong><code>返回值 (Object)</code></strong></p><p>返回一个组成汇总的对象</p><p><strong><code>示例</code></strong></p><pre><code>_.countBy([6.1, 4.2, 6.3], Math.floor);// =&gt; { &apos;4&apos;: 1, &apos;6&apos;: 2 }_.countBy([&apos;one&apos;, &apos;two&apos;, &apos;three&apos;], &apos;length&apos;);// =&gt; { &apos;3&apos;: 2, &apos;5&apos;: 1 }</code></pre><hr><h2 id="every"><a href="#every" class="headerlink" title="_.every"></a>_.every</h2><p><strong><code>_.every(collection, [predicate=_.identity])</code></strong></p><p>通过 predicate 检查集合中的元素是否都返回 真值，只要 predicate 返回一次假值，遍历就停止，并返回 false。 predicate 会传入3个参数：(value, index|key, collection)。</p><p><strong><code>参数</code></strong></p><ol><li><p>collection (Array|Object):需要遍历的集合</p></li><li><p>[predicate=_.identity] (Function|Object|string):这个函数会处理每一个元素</p></li></ol><p><strong><code>返回值 (Boolean)</code></strong></p><p>返回 true，如果所有元素经 predicate 检查都为真值，否则返回 false。</p><p><strong><code>示例</code></strong></p><pre><code>_.every([true, 1, null, &apos;yes&apos;], Boolean);// =&gt; falsevar users = [  { &apos;user&apos;: &apos;barney&apos;, &apos;active&apos;: false },  { &apos;user&apos;: &apos;fred&apos;,   &apos;active&apos;: false }];// 使用了 `_.matches` 的回调结果_.every(users, { &apos;user&apos;: &apos;barney&apos;, &apos;active&apos;: false });// =&gt; false// 使用了 `_.matchesProperty` 的回调结果_.every(users, [&apos;active&apos;, false]);// =&gt; true// 使用了 `_.property` 的回调结果_.every(users, &apos;active&apos;);// =&gt; false</code></pre><hr><h2 id="filter"><a href="#filter" class="headerlink" title="_.filter"></a>_.filter</h2><p><strong><code>_.filter(collection, [predicate=_.identity])</code></strong></p><p>遍历集合中的元素，筛选出一个经过 predicate 检查结果为真值的数组，predicate 会传入3个参数：(value, index|key, collection)。</p><p><strong><code>参数</code></strong></p><ol><li><p>collection (Array|Object):需要遍历的集合</p></li><li><p>[predicate=_.identity] (Function|Object|string):这个函数会处理每一个元素</p></li></ol><p><strong><code>返回值 (Array)</code></strong></p><p>返回筛选结果的新数组</p><p><strong><code>示例</code></strong></p><pre><code>var resolve = _.partial(_.map, _, &apos;user&apos;);var users = [  { &apos;user&apos;: &apos;barney&apos;, &apos;age&apos;: 36, &apos;active&apos;: true },  { &apos;user&apos;: &apos;fred&apos;,   &apos;age&apos;: 40, &apos;active&apos;: false }];resolve( _.filter(users, function(o) { return !o.active; }) );// =&gt; [&apos;fred&apos;]// 使用了 `_.matches` 的回调结果resolve( _.filter(users, { &apos;age&apos;: 36, &apos;active&apos;: true }) );// =&gt; [&apos;barney&apos;]// 使用了 `_.matchesProperty` 的回调结果resolve( _.filter(users, [&apos;active&apos;, false]) );// =&gt; [&apos;fred&apos;]// 使用了 `_.property` 的回调结果resolve( _.filter(users, &apos;active&apos;) );// =&gt; [&apos;barney&apos;]</code></pre><hr><h2 id="find"><a href="#find" class="headerlink" title="_.find"></a>_.find</h2><p><strong><code>_.find(collection, [predicate=_.identity])</code></strong></p><p>遍历集合中的元素，返回最先经 predicate 检查为真值的元素。 predicate 会传入3个元素：(value, index|key, collection)。</p><p><strong><code>参数</code></strong></p><ol><li><p>collection (Array|Object):需要遍历的集合</p></li><li><p>[predicate=_.identity] (Function|Object|string):这个函数会处理每一个元素</p></li></ol><p><strong><code>返回值 (*)</code></strong></p><p>返回匹配元素，否则返回 undefined</p><p><strong><code>示例</code></strong></p><pre><code>var users = [  { &apos;user&apos;: &apos;barney&apos;,  &apos;age&apos;: 36, &apos;active&apos;: true },  { &apos;user&apos;: &apos;fred&apos;,    &apos;age&apos;: 40, &apos;active&apos;: false },  { &apos;user&apos;: &apos;pebbles&apos;, &apos;age&apos;: 1,  &apos;active&apos;: true }];_.find(users, function(o) { return o.age &lt; 40; });// =&gt; 结果: &apos;barney&apos;// 使用了 `_.matches` 的回调结果_.find(users, { &apos;age&apos;: 1, &apos;active&apos;: true });// =&gt; 结果: &apos;pebbles&apos;// 使用了 `_.matchesProperty` 的回调结果_.find(users, [&apos;active&apos;, false]);// =&gt; 结果: &apos;fred&apos;// 使用了 `_.property` 的回调结果_.find(users, &apos;active&apos;);// =&gt; 结果: &apos;barney&apos;</code></pre><hr><h2 id="findLast"><a href="#findLast" class="headerlink" title="_.findLast"></a>_.findLast</h2><p><strong><code>_.findLast(collection, [predicate=_.identity])</code></strong></p><p>这个方法类似 _.find，除了它是从右至左遍历集合的。</p><p><strong><code>参数</code></strong></p><ol><li><p>collection (Array|Object):需要遍历的集合</p></li><li><p>[predicate=_.identity] (Function|Object|string):这个函数会处理每一个元素</p></li></ol><p><strong><code>返回值 (*)</code></strong></p><p>返回匹配元素，否则返回 undefined</p><p><strong><code>示例</code></strong></p><pre><code>_.findLast([1, 2, 3, 4], function(n) {  return n % 2 == 1;});// =&gt; 3</code></pre><hr><h2 id="flatMap"><a href="#flatMap" class="headerlink" title="_.flatMap"></a>_.flatMap</h2><p><strong><code>_.flatMap(collection, [iteratee=_.identity])</code></strong></p><p>创建一个扁平化的数组，每一个值会传入 iteratee 处理，处理结果会与值合并。 iteratee 会传入3个参数：(value, index|key, array)。</p><p><strong><code>参数</code></strong></p><ol><li><p>collection (Array|Object):需要遍历的集合</p></li><li><p>[iteratee=_.identity] (Function|Object|string):这个函数会处理每一个元素</p></li></ol><p><strong><code>返回值 (Array)</code></strong></p><p>返回新数组</p><p><strong><code>示例</code></strong></p><pre><code>function duplicate(n) {  return [n, n];}_.flatMap([1, 2], duplicate);// =&gt; [1, 1, 2, 2]</code></pre><hr><h2 id="forEach-each"><a href="#forEach-each" class="headerlink" title="_.forEach(each)"></a>_.forEach(each)</h2><p><strong><code>_.forEach(collection, [iteratee=_.identity])</code></strong></p><p>调用 iteratee 遍历集合中的元素， iteratee 会传入3个参数：(value, index|key, collection)。 如果显式的返回 false ，iteratee 会提前退出。 </p><p>注意: 与其他集合方法一样，对象的 length 属性也会被遍历，避免这种情况，可以用 .forIn 或者 .forOwn 代替。</p><p><strong><code>参数</code></strong></p><ol><li><p>collection (Array|Object):需要遍历的集合</p></li><li><p>[iteratee=_.identity] (Function|Object|string):这个函数会处理每一个元素</p></li></ol><p><strong><code>返回值 (Array|Object)</code></strong></p><p>返回集合</p><p><strong><code>示例</code></strong></p><pre><code>_([1, 2]).forEach(function(value) {  console.log(value);});// =&gt; 输出 `1` 和 `2`_.forEach({ &apos;a&apos;: 1, &apos;b&apos;: 2 }, function(value, key) {  console.log(key);});// =&gt; 输出 &apos;a&apos; 和 &apos;b&apos; (不保证遍历的顺序)</code></pre><hr><h2 id="forEachRight-eachRight"><a href="#forEachRight-eachRight" class="headerlink" title="_.forEachRight(eachRight)"></a>_.forEachRight(eachRight)</h2><p><strong><code>_.forEachRight(collection, [iteratee=_.identity])</code></strong></p><p>这个方法类似 _.forEach，除了它是从右到左遍历的集合中的元素的。</p><p><strong><code>参数</code></strong></p><ol><li><p>collection (Array|Object):需要遍历的集合</p></li><li><p>[iteratee=_.identity] (Function|Object|string):这个函数会处理每一个元素</p></li></ol><p><strong><code>返回值 (Array|Object)</code></strong></p><p>返回集合</p><p><strong><code>示例</code></strong></p><pre><code>_.forEachRight([1, 2], function(value) {  console.log(value);});// =&gt; 输出 `2` 和 `1`</code></pre><hr><h2 id="groupBy"><a href="#groupBy" class="headerlink" title="_.groupBy"></a>_.groupBy</h2><p><strong><code>_.groupBy(collection, [iteratee=_.identity])</code></strong></p><p>创建一个对象组成，key 是经 iteratee 处理的结果， value 是产生 key 的元素数组。 iteratee 会传入1个参数：(value)。</p><p><strong><code>参数</code></strong></p><ol><li><p>collection (Array|Object):需要遍历的集合</p></li><li><p>[iteratee=_.identity] (Function|Object|string):这个函数会处理每一个元素</p></li></ol><p><strong><code>返回值 (Object)</code></strong></p><p>返回一个组成汇总的对象</p><p><strong><code>示例</code></strong></p><pre><code>_.groupBy([6.1, 4.2, 6.3], Math.floor);// =&gt; { &apos;4&apos;: [4.2], &apos;6&apos;: [6.1, 6.3] }// 使用了 `_.property` 的回调结果_.groupBy([&apos;one&apos;, &apos;two&apos;, &apos;three&apos;], &apos;length&apos;);// =&gt; { &apos;3&apos;: [&apos;one&apos;, &apos;two&apos;], &apos;5&apos;: [&apos;three&apos;] }</code></pre><hr><h2 id="includes"><a href="#includes" class="headerlink" title="_.includes"></a>_.includes</h2><p><strong><code>_.includes(collection, value, [fromIndex=0])</code></strong></p><p>检查 值 是否在 集合中，如果集合是字符串，那么检查 值 是否在字符串中。 其他情况用 SameValueZero 等值比较。 如果指定 fromIndex 是负数，从结尾开始检索。</p><p><strong><code>参数</code></strong></p><ol><li><p>collection (Array|Object|string):要检索的集合</p></li><li><p>value (*):要检索的值</p></li><li><p>[fromIndex=0] (number):要检索的 index 位置</p></li></ol><p><strong><code>返回值 (Boolean)</code></strong></p><p>如果找到 value 返回 ture， 否则返回 false。</p><p><strong><code>示例</code></strong></p><pre><code>_.includes([1, 2, 3], 1);// =&gt; true_.includes([1, 2, 3], 1, 2);// =&gt; false_.includes({ &apos;user&apos;: &apos;fred&apos;, &apos;age&apos;: 40 }, &apos;fred&apos;);// =&gt; true_.includes(&apos;pebbles&apos;, &apos;eb&apos;);// =&gt; true</code></pre><hr><h2 id="invokeMap"><a href="#invokeMap" class="headerlink" title="_.invokeMap"></a>_.invokeMap</h2><p><strong><code>_.invokeMap(collection, path, [args])</code></strong></p><p>调用 path 的方法处理集合中的每一个元素，返回处理的数组。 如何附加的参数会传入到调用方法中。如果方法名是个函数，集合中的每个元素都会被调用到。</p><p><strong><code>参数</code></strong></p><ol><li><p>collection (Array|Object):需要遍历的集合</p></li><li><p>path (Array|Function|string):要调用的方法名 或者 这个函数会处理每一个元素</p></li><li><p>[args] (…*):The arguments to invoke each method with.</p></li></ol><p><strong><code>返回值 (Array)</code></strong></p><p>返回数组结果</p><p><strong><code>示例</code></strong></p><pre><code>_.invokeMap([[5, 1, 7], [3, 2, 1]], &apos;sort&apos;);// =&gt; [[1, 5, 7], [1, 2, 3]]_.invokeMap([123, 456], String.prototype.split, &apos;&apos;);// =&gt; [[&apos;1&apos;, &apos;2&apos;, &apos;3&apos;], [&apos;4&apos;, &apos;5&apos;, &apos;6&apos;]]</code></pre><hr><h2 id="keyBy"><a href="#keyBy" class="headerlink" title="_.keyBy"></a>_.keyBy</h2><p><strong><code>_.keyBy(collection, [iteratee=_.identity])</code></strong></p><p>创建一个对象组成。key 是经 iteratee 处理的结果，value 是产生key的元素。 iteratee 会传入1个参数：(value)。</p><p><strong><code>参数</code></strong></p><ol><li><p>collection (Array|Object):需要遍历的集合</p></li><li><p>[iteratee=_.identity] (Function|Object|string):这个函数会处理每一个元素</p></li></ol><p><strong><code>返回值 (Object)</code></strong></p><p>返回一个组成汇总的对象</p><p><strong><code>示例</code></strong></p><pre><code>var array = [  { &apos;dir&apos;: &apos;left&apos;, &apos;code&apos;: 97 },  { &apos;dir&apos;: &apos;right&apos;, &apos;code&apos;: 100 }];_.keyBy(array, function(o) {  return String.fromCharCode(o.code);});// =&gt; { &apos;a&apos;: { &apos;dir&apos;: &apos;left&apos;, &apos;code&apos;: 97 }, &apos;d&apos;: { &apos;dir&apos;: &apos;right&apos;, &apos;code&apos;: 100 } }_.keyBy(array, &apos;dir&apos;);// =&gt; { &apos;left&apos;: { &apos;dir&apos;: &apos;left&apos;, &apos;code&apos;: 97 }, &apos;right&apos;: { &apos;dir&apos;: &apos;right&apos;, &apos;code&apos;: 100 } }</code></pre><hr><h2 id="map"><a href="#map" class="headerlink" title="_.map"></a>_.map</h2><p><strong><code>_.map(collection, [iteratee=_.identity])</code></strong></p><p>创建一个经过 iteratee 处理的集合中每一个元素的结果数组。 iteratee 会传入3个参数：(value, index|key, collection)。 </p><p>有许多 lodash 的方法以 iteratees 的身份守护其工作，例如： _.every, _.filter, _.map, _.mapValues, _.reject, 以及 _.some </p><p>被守护的有:<br>ary, curry, curryRight, drop, dropRight, every, fill, invert, parseInt, random, range, rangeRight, slice, some, sortBy, take, takeRight, template, trim, trimEnd, trimStart, 以及 words</p><p><strong><code>参数</code></strong></p><ol><li><p>collection (Array|Object):需要遍历的集合</p></li><li><p>[iteratee=_.identity] (Function|Object|string):这个函数会处理每一个元素</p></li></ol><p><strong><code>返回值 (Array)</code></strong></p><p>返回映射后的新数组</p><p><strong><code>示例</code></strong></p><pre><code>function square(n) {  return n * n;}_.map([4, 8], square);// =&gt; [16, 64]_.map({ &apos;a&apos;: 4, &apos;b&apos;: 8 }, square);// =&gt; [16, 64] (无法保证遍历的顺序)var users = [  { &apos;user&apos;: &apos;barney&apos; },  { &apos;user&apos;: &apos;fred&apos; }];// 使用了 `_.property` 的回调结果_.map(users, &apos;user&apos;);// =&gt; [&apos;barney&apos;, &apos;fred&apos;]</code></pre><hr><h2 id="orderBy"><a href="#orderBy" class="headerlink" title="_.orderBy"></a>_.orderBy</h2><p><strong><code>_.orderBy(collection, [iteratees=[_.identity]], [orders])</code></strong></p><p>这个方法类似 _.sortBy，除了它允许指定 iteratees 结果如何排序。 如果没指定 orders，所有值以升序排序。 其他情况，指定 “desc” 降序，指定 “asc” 升序其对应值。</p><p><strong><code>参数</code></strong></p><ol><li><p>collection (Array|Object):需要遍历的集合</p></li><li><p>[iteratees=[_.identity]] (Function[]|Object[]|string[]):通过 iteratees 决定排序</p></li><li><p>[orders] (string[]):决定 iteratees 的排序方法collection (Array|Object):需要遍历的集合</p></li></ol><p><strong><code>返回值 (Array)</code></strong></p><p>返回排序后的新数组</p><p><strong><code>示例</code></strong></p><pre><code>var users = [  { &apos;user&apos;: &apos;fred&apos;,   &apos;age&apos;: 48 },  { &apos;user&apos;: &apos;barney&apos;, &apos;age&apos;: 34 },  { &apos;user&apos;: &apos;fred&apos;,   &apos;age&apos;: 42 },  { &apos;user&apos;: &apos;barney&apos;, &apos;age&apos;: 36 }];// 以 `user` 升序排序 再 以 `age` 降序排序。_.orderBy(users, [&apos;user&apos;, &apos;age&apos;], [&apos;asc&apos;, &apos;desc&apos;]);// =&gt; 结果: [[&apos;barney&apos;, 36], [&apos;barney&apos;, 34], [&apos;fred&apos;, 48], [&apos;fred&apos;, 42]]</code></pre><hr><h2 id="partition"><a href="#partition" class="headerlink" title="_.partition"></a>_.partition</h2><p><strong><code>_.partition(collection, [predicate=_.identity])</code></strong></p><p>创建一个拆分为两部分的数组。 第一部分是 predicate 检查为真值的，第二部分是 predicate 检查为假值的。 predicate 会传入3个参数：(value, index|key, collection)。</p><p><strong><code>参数</code></strong></p><ol><li><p>collection (Array|Object):需要遍历的集合</p></li><li><p>[predicate=_.identity] (Function|Object|string):这个函数会处理每一个元素</p></li></ol><p><strong><code>返回值 (Array)</code></strong></p><p>返回分组元素的数组</p><p><strong><code>示例</code></strong></p><pre><code>var users = [  { &apos;user&apos;: &apos;barney&apos;,  &apos;age&apos;: 36, &apos;active&apos;: false },  { &apos;user&apos;: &apos;fred&apos;,    &apos;age&apos;: 40, &apos;active&apos;: true },  { &apos;user&apos;: &apos;pebbles&apos;, &apos;age&apos;: 1,  &apos;active&apos;: false }];_.partition(users, function(o) { return o.active; });// =&gt; 结果: [[&apos;fred&apos;], [&apos;barney&apos;, &apos;pebbles&apos;]]// 使用了 `_.matches` 的回调结果_.partition(users, { &apos;age&apos;: 1, &apos;active&apos;: false });// =&gt; 结果: [[&apos;pebbles&apos;], [&apos;barney&apos;, &apos;fred&apos;]]// 使用了 `_.matchesProperty` 的回调结果_.partition(users, [&apos;active&apos;, false]);// =&gt; 结果: [[&apos;barney&apos;, &apos;pebbles&apos;], [&apos;fred&apos;]]// 使用了 `_.property` 的回调结果_.partition(users, &apos;active&apos;);// =&gt; 结果: [[&apos;fred&apos;], [&apos;barney&apos;, &apos;pebbles&apos;]]</code></pre><hr><h2 id="reduce"><a href="#reduce" class="headerlink" title="_.reduce"></a>_.reduce</h2><p><strong><code>_.reduce(collection, [iteratee=_.identity], [accumulator])</code></strong></p><p>通过 iteratee 遍历集合中的每个元素。 每次返回的值会作为下一次 iteratee 使用。 如果没有提供 accumulator，则集合中的第一个元素作为 accumulator。 iteratee 会传入4个参数：(accumulator, value, index|key, collection)。 </p><p>有许多 lodash 的方法以 iteratees 的身份守护其工作，例如： _.reduce, _.reduceRight, 以及 _.transform. </p><p>被守护的有:<br>assign, defaults, defaultsDeep, includes, merge, orderBy, 以及 sortBy</p><p><strong><code>参数</code></strong></p><ol><li><p>collection (Array|Object):需要遍历的集合</p></li><li><p>[iteratee=_.identity] (Function):这个函数会处理每一个元素</p></li><li><p>[accumulator] (*):初始化的值</p></li></ol><p><strong><code>返回值 (*)</code></strong></p><p>返回累加后的值</p><p><strong><code>示例</code></strong></p><pre><code>_.reduce([1, 2], function(sum, n) {  return sum + n;}, 0);// =&gt; 3_.reduce({ &apos;a&apos;: 1, &apos;b&apos;: 2, &apos;c&apos;: 1 }, function(result, value, key) {  (result[value] || (result[value] = [])).push(key);  return result;}, {});// =&gt; { &apos;1&apos;: [&apos;a&apos;, &apos;c&apos;], &apos;2&apos;: [&apos;b&apos;] } (无法保证遍历的顺序)</code></pre><hr><h2 id="reduceRight"><a href="#reduceRight" class="headerlink" title="_.reduceRight"></a>_.reduceRight</h2><p><strong><code>_.reduceRight(collection, [iteratee=_.identity], [accumulator])</code></strong></p><p>这个方法类似 _.reduce ，除了它是从右到左遍历的。</p><p><strong><code>参数</code></strong></p><ol><li><p>collection (Array|Object):需要遍历的集合</p></li><li><p>[iteratee=_.identity] (Function):这个函数会处理每一个元素</p></li><li><p>[accumulator] (*):初始化的值</p></li></ol><p><strong><code>返回值 (*)</code></strong></p><p>返回累加后的值</p><p><strong><code>示例</code></strong></p><pre><code>var array = [[0, 1], [2, 3], [4, 5]];_.reduceRight(array, function(flattened, other) {  return flattened.concat(other);}, []);// =&gt; [4, 5, 2, 3, 0, 1]</code></pre><hr><h2 id="reject"><a href="#reject" class="headerlink" title="_.reject"></a>_.reject</h2><p><strong><code>_.reject(collection, [predicate=_.identity])</code></strong></p><p>反向版 _.filter，这个方法返回 predicate 检查为非真值的元素。</p><p><strong><code>参数</code></strong></p><ol><li><p>collection (Array|Object):需要遍历的集合</p></li><li><p>[predicate=_.identity] (Function|Object|string):这个函数会处理每一个元素</p></li></ol><p><strong><code>返回值 (Array)</code></strong></p><p>返回过滤后的新数组</p><p><strong><code>示例</code></strong></p><pre><code>var users = [  { &apos;user&apos;: &apos;barney&apos;, &apos;age&apos;: 36, &apos;active&apos;: false },  { &apos;user&apos;: &apos;fred&apos;,   &apos;age&apos;: 40, &apos;active&apos;: true }];_.reject(users, function(o) { return !o.active; });// =&gt; 结果: [&apos;fred&apos;]// 使用了 `_.matches` 的回调结果_.reject(users, { &apos;age&apos;: 40, &apos;active&apos;: true });// =&gt; 结果: [&apos;barney&apos;]// 使用了 `_.matchesProperty` 的回调结果_.reject(users, [&apos;active&apos;, false]);// =&gt; 结果: [&apos;fred&apos;]// 使用了 `_.property` 的回调结果_.reject(users, &apos;active&apos;);// =&gt; 结果: [&apos;barney&apos;]</code></pre><hr><h2 id="sample"><a href="#sample" class="headerlink" title="_.sample"></a>_.sample</h2><p><strong><code>_.sample(collection)</code></strong></p><p>从集合中随机获得元素</p><p><strong><code>参数</code></strong></p><ol><li>collection (Array|Object):要取样的集合</li></ol><p><strong><code>返回值 (*)</code></strong></p><p>返回随机元素</p><p><strong><code>示例</code></strong></p><pre><code>_.sample([1, 2, 3, 4]);// =&gt; 2</code></pre><hr><h2 id="sampleSize"><a href="#sampleSize" class="headerlink" title="_.sampleSize"></a>_.sampleSize</h2><p><strong><code>_.sampleSize(collection, [n=0])</code></strong></p><p>从集合中随机获得 N 个元素</p><p><strong><code>参数</code></strong></p><ol><li><p>collection (Array|Object):要取样的集合</p></li><li><p>[n=0] (number):要取得的元素个数</p></li></ol><p><strong><code>返回值 (*)</code></strong></p><p>返回随机元素</p><p><strong><code>示例</code></strong></p><pre><code>_.sampleSize([1, 2, 3], 2);// =&gt; [3, 1]_.sampleSize([1, 2, 3], 4);// =&gt; [2, 3, 1]</code></pre><hr><h2 id="shuffle"><a href="#shuffle" class="headerlink" title="_.shuffle"></a>_.shuffle</h2><p><strong><code>_.shuffle(collection)</code></strong></p><p>创建一个被打乱元素的集合。 使用了 <a href="https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle" target="_blank" rel="noopener">Fisher-Yates shuffle</a> 版本。</p><p><strong><code>参数</code></strong></p><ol><li>collection (Array|Object):要打乱的集合</li></ol><p><strong><code>返回值 (Array)</code></strong></p><p>返回一个被打乱元素的新集合</p><p><strong><code>示例</code></strong></p><pre><code>_.shuffle([1, 2, 3, 4]);// =&gt; [4, 1, 3, 2]</code></pre><hr><h2 id="size"><a href="#size" class="headerlink" title="_.size"></a>_.size</h2><p><strong><code>_.size(collection)</code></strong></p><p>返回集合的长度或对象中可枚举属性的个数。</p><p><strong><code>参数</code></strong></p><ol><li>collection (Array|Object):要打乱的集合</li></ol><p><strong><code>返回值 (Number)</code></strong></p><p>返回集合的大小</p><p><strong><code>示例</code></strong></p><pre><code>_.size([1, 2, 3]);// =&gt; 3_.size({ &apos;a&apos;: 1, &apos;b&apos;: 2 });// =&gt; 2_.size(&apos;pebbles&apos;);// =&gt; 7</code></pre><hr><h2 id="some"><a href="#some" class="headerlink" title="_.some"></a>_.some</h2><p><strong><code>_.some(collection, [predicate=_.identity])</code></strong></p><p>通过 predicate 检查集合中的元素是否存在任意真值的元素，只要 predicate 返回一次真值，遍历就停止，并返回 true。 predicate 会传入3个参数：(value, index|key, collection)。</p><p><strong><code>参数</code></strong></p><ol><li><p>collection (Array|Object):需要遍历的集合</p></li><li><p>[predicate=_.identity] (Function|Object|string):这个函数会处理每一个元素</p></li></ol><p><strong><code>返回值 (Boolean)</code></strong></p><p>返回 true，如果任意元素经 predicate 检查都为真值，否则返回 false。</p><p><strong><code>示例</code></strong></p><pre><code>_.some([null, 0, &apos;yes&apos;, false], Boolean);// =&gt; truevar users = [  { &apos;user&apos;: &apos;barney&apos;, &apos;active&apos;: true },  { &apos;user&apos;: &apos;fred&apos;,   &apos;active&apos;: false }];// 使用了 `_.matches` 的回调结果_.some(users, { &apos;user&apos;: &apos;barney&apos;, &apos;active&apos;: false });// =&gt; false// 使用了 `_.matchesProperty` 的回调结果_.some(users, [&apos;active&apos;, false]);// =&gt; true// 使用了 `_.property` 的回调结果_.some(users, &apos;active&apos;);// =&gt; true</code></pre><hr><h2 id="sortBy"><a href="#sortBy" class="headerlink" title="_.sortBy"></a>_.sortBy</h2><p><strong><code>_.sortBy(collection, [iteratees=[_.identity]])</code></strong></p><p>创建一个元素数组。 以 iteratee 处理的结果升序排序。 这个方法执行稳定排序，也就是说相同元素会保持原始排序。 iteratees 会传入1个参数：(value)。</p><p><strong><code>参数</code></strong></p><ol><li><p>collection (Array|Object):需要遍历的集合</p></li><li><p>[iteratees=[_.identity]] (…(Function|Function[]|Object|Object[]|string|string[]):这个函数决定排序</p></li></ol><p><strong><code>返回值 (Array)</code></strong></p><p>返回排序后的数组</p><p><strong><code>示例</code></strong></p><pre><code>var users = [  { &apos;user&apos;: &apos;fred&apos;,   &apos;age&apos;: 48 },  { &apos;user&apos;: &apos;barney&apos;, &apos;age&apos;: 36 },  { &apos;user&apos;: &apos;fred&apos;,   &apos;age&apos;: 42 },  { &apos;user&apos;: &apos;barney&apos;, &apos;age&apos;: 34 }];_.sortBy(users, function(o) { return o.user; });// =&gt; 排序结果 [[&apos;barney&apos;, 36], [&apos;barney&apos;, 34], [&apos;fred&apos;, 48], [&apos;fred&apos;, 42]]_.sortBy(users, [&apos;user&apos;, &apos;age&apos;]);// =&gt; 排序结果 [[&apos;barney&apos;, 34], [&apos;barney&apos;, 36], [&apos;fred&apos;, 42], [&apos;fred&apos;, 48]]_.sortBy(users, &apos;user&apos;, function(o) {  return Math.floor(o.age / 10);});// =&gt; 排序结果 [[&apos;barney&apos;, 36], [&apos;barney&apos;, 34], [&apos;fred&apos;, 48], [&apos;fred&apos;, 42]]</code></pre><hr><h1 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h1><hr><h2 id="now"><a href="#now" class="headerlink" title="_.now"></a>_.now</h2><p><strong><code>_.now()</code></strong></p><p>获得 Unix 纪元(1970 1月1日 00:00:00 UTC) 直到现在的毫秒数。</p><p><strong><code>参数</code></strong></p><p>无</p><p><strong><code>返回值 (Number)</code></strong></p><p>返回时间戳</p><p><strong><code>示例</code></strong></p><p><em>.defer(function(stamp) {<br>  console.log(</em>.now() - stamp);<br>}, _.now());<br>// =&gt; 记录延迟函数调用的毫秒数</p><hr><h1 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h1><hr><h2 id="assign"><a href="#assign" class="headerlink" title="_.assign"></a>_.assign</h2><p><strong><code>_.assign(object, [sources])</code></strong></p><p>分配来源对象的可枚举属性到目标对象上。 来源对象的应用规则是从左到右，随后的下一个对象的属性会覆盖上一个对象的属性。</p><p>注意: 这方法会改变源对象，参考自 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign" target="_blank" rel="noopener">Object.assign</a>.</p><p><strong><code>参数</code></strong></p><ol><li><p>object (Object):目标对象</p></li><li><p>[sources] (…Object):来源对象</p></li></ol><p><strong><code>返回值 (Object)</code></strong></p><p>返回对象</p><p><strong><code>示例</code></strong></p><pre><code>function Foo() {  this.c = 3;}function Bar() {  this.e = 5;}Foo.prototype.d = 4;Bar.prototype.f = 6;_.assign({ &apos;a&apos;: 1 }, new Foo, new Bar);// =&gt; { &apos;a&apos;: 1, &apos;c&apos;: 3, &apos;e&apos;: 5 }</code></pre><hr><h2 id="assignIn-extend"><a href="#assignIn-extend" class="headerlink" title=".assignIn(.extend)"></a><em>.assignIn(</em>.extend)</h2><p><strong><code>_.assignIn(object, [sources])</code></strong></p><p>这个方法类似 _.assign。 除了它会遍历并继承来源对象的属性。 </p><p>注意: 这方法会改变源对象</p><p><strong><code>参数</code></strong></p><ol><li><p>object (Object):目标对象</p></li><li><p>[sources] (…Object):来源对象</p></li></ol><p><strong><code>返回值 (Object)</code></strong></p><p>返回对象</p><p><strong><code>示例</code></strong></p><pre><code>function Foo() {  this.b = 2;}function Bar() {  this.d = 4;}Foo.prototype.c = 3;Bar.prototype.e = 5;_.assignIn({ &apos;a&apos;: 1 }, new Foo, new Bar);// =&gt; { &apos;a&apos;: 1, &apos;b&apos;: 2, &apos;c&apos;: 3, &apos;d&apos;: 4, &apos;e&apos;: 5 }</code></pre><hr><h2 id="assignInWith-extendWith"><a href="#assignInWith-extendWith" class="headerlink" title=".assignInWith(.extendWith)"></a><em>.assignInWith(</em>.extendWith)</h2><p><strong><code>_.assignInWith(object, sources, [customizer])</code></strong></p><p>这个方法类似 _.assignIn。 除了它接受一个 customizer决定如何分配值。 如果customizer返回undefined将会由分配处理方法代替。customizer` 会传入5个参数：(objValue, srcValue, key, object, source)。 </p><p>注意: 这方法会改变源对象</p><p><strong><code>参数</code></strong></p><ol><li><p>object (Object):目标对象</p></li><li><p>[sources] (…Object):来源对象</p></li><li><p>[customizer] (Function):这个函数决定分配的值</p></li></ol><p><strong><code>返回值 (Object)</code></strong></p><p>返回对象</p><p><strong><code>示例</code></strong></p><pre><code>function customizer(objValue, srcValue) {  return _.isUndefined(objValue) ? srcValue : objValue;}var defaults = _.partialRight(_.assignInWith, customizer);defaults({ &apos;a&apos;: 1 }, { &apos;b&apos;: 2 }, { &apos;a&apos;: 3 });// =&gt; { &apos;a&apos;: 1, &apos;b&apos;: 2 }</code></pre><hr><h2 id="assignWith"><a href="#assignWith" class="headerlink" title="_.assignWith"></a>_.assignWith</h2><p><strong><code>_.assignWith(object, sources, [customizer])</code></strong></p><p>这个方法类似 _.assign。 除了它接受一个 customizer决定如何分配值。 如果customizer返回undefined将会由分配处理方法代替。customizer` 会传入5个参数：(objValue, srcValue, key, object, source)。 </p><p>注意: 这方法会改变源对象</p><p><strong><code>参数</code></strong></p><ol><li><p>object (Object):目标对象</p></li><li><p>[sources] (…Object):来源对象</p></li><li><p>[customizer] (Function):这个函数决定分配的值</p></li></ol><p><strong><code>返回值 (Object)</code></strong></p><p>返回对象</p><p><strong><code>示例</code></strong></p><pre><code>function customizer(objValue, srcValue) {  return _.isUndefined(objValue) ? srcValue : objValue;}var defaults = _.partialRight(_.assignWith, customizer);defaults({ &apos;a&apos;: 1 }, { &apos;b&apos;: 2 }, { &apos;a&apos;: 3 });// =&gt; { &apos;a&apos;: 1, &apos;b&apos;: 2 }</code></pre><hr><h2 id="at"><a href="#at" class="headerlink" title="_.at"></a>_.at</h2><p><strong><code>_.at(object, [paths])</code></strong></p><p>根据 object 的路径获取值为数组。</p><p><strong><code>参数</code></strong></p><ol><li><p>object (Object):要遍历的对象</p></li><li><p>[paths] (…(string|string[]):要获取的对象的元素路径，单独指定或者指定在数组中</p></li></ol><p><strong><code>返回值 (Array)</code></strong></p><p>返回选中值的数组</p><p><strong><code>示例</code></strong></p><pre><code>var object = { &apos;a&apos;: [{ &apos;b&apos;: { &apos;c&apos;: 3 } }, 4] };_.at(object, [&apos;a[0].b.c&apos;, &apos;a[1]&apos;]);// =&gt; [3, 4]_.at([&apos;a&apos;, &apos;b&apos;, &apos;c&apos;], 0, 2);// =&gt; [&apos;a&apos;, &apos;c&apos;]</code></pre><hr><h2 id="create"><a href="#create" class="headerlink" title="_.create"></a>_.create</h2><p><strong><code>_.create(prototype, [properties])</code></strong></p><p>创建一个继承 prototype 的对象。 如果提供了 properties，它的可枚举属性会被分配到创建的对象上。</p><p><strong><code>参数</code></strong></p><ol><li><p>prototype (Object):要继承的对象</p></li><li><p>[properties] (Object):待分配的属性</p></li></ol><p><strong><code>返回值 (Object)</code></strong></p><p>返回新对象</p><p><strong><code>示例</code></strong></p><pre><code>function Shape() {  this.x = 0;  this.y = 0;}function Circle() {  Shape.call(this);}Circle.prototype = _.create(Shape.prototype, {  &apos;constructor&apos;: Circle});var circle = new Circle;circle instanceof Circle;// =&gt; truecircle instanceof Shape;// =&gt; true</code></pre><hr><h2 id="defaults"><a href="#defaults" class="headerlink" title="_.defaults"></a>_.defaults</h2><p><strong><code>_.defaults(object, [sources])</code></strong></p><p>分配来源对象的可枚举属性到目标对象所有解析为 undefined 的属性上。 来源对象从左到右应用。 一旦设置了相同属性的值，后续的将被忽略掉。 </p><p>注意: 这方法会改变源对象</p><p><strong><code>参数</code></strong></p><ol><li><p>object (Object):目标对象</p></li><li><p>[sources] (…Object):来源对象</p></li></ol><p><strong><code>返回值 (Object)</code></strong></p><p>返回对象</p><p><strong><code>示例</code></strong></p><pre><code>_.defaults({ &apos;user&apos;: &apos;barney&apos; }, { &apos;age&apos;: 36 }, { &apos;user&apos;: &apos;fred&apos; });// =&gt; { &apos;user&apos;: &apos;barney&apos;, &apos;age&apos;: 36 }</code></pre><hr><h2 id="defaultsDeep"><a href="#defaultsDeep" class="headerlink" title="_.defaultsDeep"></a>_.defaultsDeep</h2><p><strong><code>_.defaultsDeep(object, [sources])</code></strong></p><p>这个方法类似 _.defaults，除了它会递归分配默认属性。 </p><p>注意: 这方法会改变源对象</p><p><strong><code>参数</code></strong></p><ol><li><p>object (Object):目标对象</p></li><li><p>[sources] (…Object):来源对象</p></li></ol><p><strong><code>返回值 (Object)</code></strong></p><p>返回对象</p><p><strong><code>示例</code></strong></p><pre><code>_.defaultsDeep({ &apos;user&apos;: { &apos;name&apos;: &apos;barney&apos; } }, { &apos;user&apos;: { &apos;name&apos;: &apos;fred&apos;, &apos;age&apos;: 36 } });// =&gt; { &apos;user&apos;: { &apos;name&apos;: &apos;barney&apos;, &apos;age&apos;: 36 } }</code></pre><hr><h2 id="findKey"><a href="#findKey" class="headerlink" title="_.findKey"></a>_.findKey</h2><p><strong><code>_.findKey(object, [predicate=_.identity])</code></strong></p><p>这个方法类似 _.find。 除了它返回最先被 predicate 判断为真值的元素 key，而不是元素本身。</p><p><strong><code>参数</code></strong></p><ol><li><p>object (Object):需要检索的对象</p></li><li><p>[predicate=_.identity] (Function|Object|string):这个函数会处理每一个元素</p></li></ol><p><strong><code>返回值 (String|undefined)</code></strong></p><p>返回匹配的 key，否则返回 undefined。</p><p><strong><code>示例</code></strong></p><pre><code>var users = {  &apos;barney&apos;:  { &apos;age&apos;: 36, &apos;active&apos;: true },  &apos;fred&apos;:    { &apos;age&apos;: 40, &apos;active&apos;: false },  &apos;pebbles&apos;: { &apos;age&apos;: 1,  &apos;active&apos;: true }};_.findKey(users, function(o) { return o.age &lt; 40; });// =&gt; &apos;barney&apos; (无法保证遍历的顺序)// 使用了 `_.matches` 的回调结果_.findKey(users, { &apos;age&apos;: 1, &apos;active&apos;: true });// =&gt; &apos;pebbles&apos;// 使用了 `_.matchesProperty` 的回调结果_.findKey(users, [&apos;active&apos;, false]);// =&gt; &apos;fred&apos;// 使用了 `_.property` 的回调结果_.findKey(users, &apos;active&apos;);// =&gt; &apos;barney&apos;</code></pre><hr><h2 id="findLastKey"><a href="#findLastKey" class="headerlink" title="_.findLastKey"></a>_.findLastKey</h2><p><strong><code>_.findLastKey(object, [predicate=_.identity])</code></strong></p><p>这个方法类似 _.findKey。 不过它是反方向开始遍历的。</p><p><strong><code>参数</code></strong></p><ol><li><p>object (Object):需要检索的对象</p></li><li><p>[predicate=_.identity] (Function|Object|string):这个函数会处理每一个元素</p></li></ol><p><strong><code>返回值 (String|undefined)</code></strong></p><p>返回匹配的 key，否则返回 undefined。</p><p><strong><code>示例</code></strong></p><pre><code>var users = {  &apos;barney&apos;:  { &apos;age&apos;: 36, &apos;active&apos;: true },  &apos;fred&apos;:    { &apos;age&apos;: 40, &apos;active&apos;: false },  &apos;pebbles&apos;: { &apos;age&apos;: 1,  &apos;active&apos;: true }};_.findLastKey(users, function(o) { return o.age &lt; 40; });// =&gt; 返回 &apos;pebbles&apos;， `_.findKey` 会返回 &apos;barney&apos;// 使用了 `_.matches` 的回调结果_.findLastKey(users, { &apos;age&apos;: 36, &apos;active&apos;: true });// =&gt; &apos;barney&apos;// 使用了 `_.matchesProperty` 的回调结果_.findLastKey(users, [&apos;active&apos;, false]);// =&gt; &apos;fred&apos;// 使用了 `_.property` 的回调结果_.findLastKey(users, &apos;active&apos;);// =&gt; &apos;pebbles&apos;</code></pre><hr><h2 id="forIn"><a href="#forIn" class="headerlink" title="_.forIn"></a>_.forIn</h2><p><strong><code>_.forIn(object, [iteratee=_.identity])</code></strong></p><p>使用 iteratee 遍历对象的自身和继承的可枚举属性。 iteratee 会传入3个参数：(value, key, object)。 如果返回 false，iteratee 会提前退出遍历。</p><p><strong><code>参数</code></strong></p><ol><li><p>object (Object):要遍历的对象</p></li><li><p>[iteratee=_.identity] (Function):这个函数会处理每一个元素</p></li></ol><p><strong><code>返回值 (Object)</code></strong></p><p>返回对象</p><p><strong><code>示例</code></strong></p><pre><code>function Foo() {  this.a = 1;  this.b = 2;}Foo.prototype.c = 3;_.forIn(new Foo, function(value, key) {  console.log(key);});// =&gt; 输出 &apos;a&apos;, &apos;b&apos;, 然后 &apos;c&apos; (无法保证遍历的顺序)</code></pre><hr><h2 id="forInRight"><a href="#forInRight" class="headerlink" title="_.forInRight"></a>_.forInRight</h2><p><strong><code>_.forInRight(object, [iteratee=_.identity])</code></strong></p><p>这个方法类似 _.forIn。 除了它是反方向开始遍历的。</p><p><strong><code>参数</code></strong></p><ol><li><p>object (Object):要遍历的对象</p></li><li><p>[iteratee=_.identity] (Function):这个函数会处理每一个元素</p></li></ol><p><strong><code>返回值 (Object)</code></strong></p><p>返回对象</p><p><strong><code>示例</code></strong></p><pre><code>function Foo() {  this.a = 1;  this.b = 2;}Foo.prototype.c = 3;_.forInRight(new Foo, function(value, key) {  console.log(key);});// =&gt; 输出 &apos;c&apos;, &apos;b&apos;, 然后 &apos;a&apos;， `_.forIn` 会输出 &apos;a&apos;, &apos;b&apos;, 然后 &apos;c&apos;</code></pre><hr><h2 id="forOwn"><a href="#forOwn" class="headerlink" title="_.forOwn"></a>_.forOwn</h2><p><strong><code>_.forOwn(object, [iteratee=_.identity])</code></strong></p><p>使用 iteratee 遍历自身的可枚举属性。 iteratee 会传入3个参数：(value, key, object)。 如果返回 false，iteratee 会提前退出遍历。</p><p><strong><code>参数</code></strong></p><ol><li><p>object (Object):要遍历的对象</p></li><li><p>[iteratee=_.identity] (Function):这个函数会处理每一个元素</p></li></ol><p><strong><code>返回值 (Object)</code></strong></p><p>返回对象</p><p><strong><code>示例</code></strong></p><pre><code>function Foo() {  this.a = 1;  this.b = 2;}Foo.prototype.c = 3;_.forOwn(new Foo, function(value, key) {  console.log(key);});// =&gt; 输出 &apos;a&apos; 然后 &apos;b&apos; (无法保证遍历的顺序)</code></pre><hr><h2 id="forOwn-1"><a href="#forOwn-1" class="headerlink" title="_.forOwn"></a>_.forOwn</h2><p><strong><code>_.forOwn(object, [iteratee=_.identity])</code></strong></p><p>这个方法类似 _.forOwn。 除了它是反方向开始遍历的。</p><p><strong><code>参数</code></strong></p><ol><li><p>object (Object):要遍历的对象</p></li><li><p>[iteratee=_.identity] (Function):这个函数会处理每一个元素</p></li></ol><p><strong><code>返回值 (Object)</code></strong></p><p>返回对象</p><p><strong><code>示例</code></strong></p><pre><code>function Foo() {  this.a = 1;  this.b = 2;}Foo.prototype.c = 3;_.forOwnRight(new Foo, function(value, key) {  console.log(key);});// =&gt; 输出 &apos;b&apos; 然后 &apos;a&apos;， `_.forOwn` 会输出 &apos;a&apos; 然后 &apos;b&apos;</code></pre><hr><h2 id="functions"><a href="#functions" class="headerlink" title="_.functions"></a>_.functions</h2><p><strong><code>_.functions(object)</code></strong></p><p>返回一个 function 对象自身可枚举属性名的数组。</p><p><strong><code>参数</code></strong></p><ol><li>object (Object):要检索的对象</li></ol><p><strong><code>返回值 (Array)</code></strong></p><p>返回包含属性名的新数组</p><p><strong><code>示例</code></strong></p><pre><code>function Foo() {  this.a = _.constant(&apos;a&apos;);  this.b = _.constant(&apos;b&apos;);}Foo.prototype.c = _.constant(&apos;c&apos;);_.functions(new Foo);// =&gt; [&apos;a&apos;, &apos;b&apos;]</code></pre><hr><h2 id="functionsIn"><a href="#functionsIn" class="headerlink" title="_.functionsIn"></a>_.functionsIn</h2><p><strong><code>_.functionsIn(object)</code></strong></p><p>返回一个 function 对象自身可枚举属性名的数组。</p><p><strong><code>参数</code></strong></p><ol><li>object (Object):要检索的对象</li></ol><p><strong><code>返回值 (Array)</code></strong></p><p>返回包含属性名的新数组</p><p><strong><code>示例</code></strong></p><pre><code>function Foo() {  this.a = _.constant(&apos;a&apos;);  this.b = _.constant(&apos;b&apos;);}Foo.prototype.c = _.constant(&apos;c&apos;);_.functionsIn(new Foo);// =&gt; [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;]</code></pre><hr><h2 id="get"><a href="#get" class="headerlink" title="_.get"></a>_.get</h2><p><strong><code>_.get(object, path, [defaultValue])</code></strong></p><p>根据对象路径获取值。 如果解析 value 是 undefined 会以 defaultValue 取代。</p><p><strong><code>参数</code></strong></p><ol><li><p>object (Object):要检索的对象</p></li><li><p>path (Array|string):要获取的对象路径</p></li><li><p>[defaultValue] (*):如果解析值是 undefined，这值会被返回</p></li></ol><p><strong><code>返回值 (*)</code></strong></p><p>返回解析的值</p><p><strong><code>示例</code></strong></p><pre><code>var object = { &apos;a&apos;: [{ &apos;b&apos;: { &apos;c&apos;: 3 } }] };_.get(object, &apos;a[0].b.c&apos;);// =&gt; 3_.get(object, [&apos;a&apos;, &apos;0&apos;, &apos;b&apos;, &apos;c&apos;]);// =&gt; 3_.get(object, &apos;a.b.c&apos;, &apos;default&apos;);// =&gt; &apos;default&apos;</code></pre><hr><h2 id="has"><a href="#has" class="headerlink" title="_.has"></a>_.has</h2><p><strong><code>_.has(object, path)</code></strong></p><p>检查 path 是否是对象的直接属性。</p><p><strong><code>参数</code></strong></p><ol><li><p>object (Object):要检索的对象</p></li><li><p>path (Array|string):要获取的对象路径</p></li></ol><p><strong><code>返回值 (boolean)</code></strong></p><p>如果存在返回 true，否则返回 false</p><p><strong><code>示例</code></strong></p><pre><code>var object = { &apos;a&apos;: { &apos;b&apos;: { &apos;c&apos;: 3 } } };var other = _.create({ &apos;a&apos;: _.create({ &apos;b&apos;: _.create({ &apos;c&apos;: 3 }) }) });_.has(object, &apos;a&apos;);// =&gt; true_.has(object, &apos;a.b.c&apos;);// =&gt; true_.has(object, [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;]);// =&gt; true_.has(other, &apos;a&apos;);// =&gt; false</code></pre><hr><h2 id="hasIn"><a href="#hasIn" class="headerlink" title="_.hasIn"></a>_.hasIn</h2><p><strong><code>_.hasIn(object, path)</code></strong></p><p>检查 path 是否是对象的直接 或者 继承属性。</p><p><strong><code>参数</code></strong></p><ol><li><p>object (Object):要检索的对象</p></li><li><p>path (Array|string):要获取的对象路径</p></li></ol><p><strong><code>返回值 (boolean)</code></strong></p><p>如果存在返回 true，否则返回 false</p><p><strong><code>示例</code></strong></p><pre><code>var object = _.create({ &apos;a&apos;: _.create({ &apos;b&apos;: _.create({ &apos;c&apos;: 3 }) }) });_.hasIn(object, &apos;a&apos;);// =&gt; true_.hasIn(object, &apos;a.b.c&apos;);// =&gt; true_.hasIn(object, [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;]);// =&gt; true_.hasIn(object, &apos;b&apos;);// =&gt; false</code></pre><hr><h2 id="invert"><a href="#invert" class="headerlink" title="_.invert"></a>_.invert</h2><p><strong><code>_.invert(object, [multiVal])</code></strong></p><p>创建一个键值倒置的对象。 如果 object 有重复的值，后面的值会覆盖前面的值。 如果 multiVal 为 true，重复的值则组成数组。</p><p><strong><code>参数</code></strong></p><ol><li><p>object (Object):要倒置的对象</p></li><li><p>[multiVal] (boolean):每个 key 允许多个值</p></li></ol><p><strong><code>返回值 (Object)</code></strong></p><p>返回新的倒置的对象</p><p><strong><code>示例</code></strong></p><pre><code>var object = { &apos;a&apos;: 1, &apos;b&apos;: 2, &apos;c&apos;: 1 };_.invert(object);// =&gt; { &apos;1&apos;: &apos;c&apos;, &apos;2&apos;: &apos;b&apos; }</code></pre><hr><h2 id="invertBy"><a href="#invertBy" class="headerlink" title="_.invertBy"></a>_.invertBy</h2><p><strong><code>_.invertBy(object, [iteratee=_.identity])</code></strong></p><p>这个方法类似 _.invert。 除了它接受 iteratee 调用每一个元素，可在返回值中定制key。 iteratee 会传入1个参数：(value)。</p><p><strong><code>参数</code></strong></p><ol><li><p>object (Object):要倒置的对象</p></li><li><p>[iteratee=_.identity] (Function|Object|string):这个函数会调用每一个元素</p></li></ol><p><strong><code>返回值 (Object)</code></strong></p><p>返回新的倒置的对象</p><p><strong><code>示例</code></strong></p><pre><code>var object = { &apos;a&apos;: 1, &apos;b&apos;: 2, &apos;c&apos;: 1 };_.invertBy(object);// =&gt; { &apos;1&apos;: [&apos;a&apos;, &apos;c&apos;], &apos;2&apos;: [&apos;b&apos;] }_.invertBy(object, function(value) {  return &apos;group&apos; + value;});// =&gt; { &apos;group1&apos;: [&apos;a&apos;, &apos;c&apos;], &apos;group2&apos;: [&apos;b&apos;] }</code></pre><hr><h2 id="invoke"><a href="#invoke" class="headerlink" title="_.invoke"></a>_.invoke</h2><p><strong><code>_.invoke(object, path, [args])</code></strong></p><p>调用对象路径的方法.</p><p><strong><code>参数</code></strong></p><ol><li><p>object (Object):要检索的对象</p></li><li><p>path (Array|string):要调用方法的路径</p></li><li><p>[args] (…*):调用方法的参数</p></li></ol><p><strong><code>返回值 (*)</code></strong></p><p>返回调用方法的结果</p><p><strong><code>示例</code></strong></p><pre><code>var object = { &apos;a&apos;: [{ &apos;b&apos;: { &apos;c&apos;: [1, 2, 3, 4] } }] };_.invoke(object, &apos;a[0].b.c.slice&apos;, 1, 3); // =&gt; [2, 3]</code></pre><hr><h2 id="keys"><a href="#keys" class="headerlink" title="_.keys"></a>_.keys</h2><p><strong><code>_.keys(object)</code></strong></p><p>创建 object 自身可枚举属性名为一个数组。 </p><p>注意: 非对象的值会被强制转换为对象，查看 <a href="http://ecma-international.org/ecma-262/6.0/#sec-object.keys" target="_blank" rel="noopener">ES spec</a> 了解详情</p><p><strong><code>参数</code></strong></p><ol><li>object (Object):要检索的对象</li></ol><p><strong><code>返回值 (Array)</code></strong></p><p>返回包含属性名的数组</p><p><strong><code>示例</code></strong></p><pre><code>function Foo() {  this.a = 1;  this.b = 2;}Foo.prototype.c = 3;_.keys(new Foo);// =&gt; [&apos;a&apos;, &apos;b&apos;] (无法保证遍历的顺序)_.keys(&apos;hi&apos;);// =&gt; [&apos;0&apos;, &apos;1&apos;]</code></pre><hr><h2 id="keysIn"><a href="#keysIn" class="headerlink" title="_.keysIn"></a>_.keysIn</h2><p><strong><code>_.keysIn(object)</code></strong></p><p>创建 object 自身 或 继承的可枚举属性名为一个数组。 </p><p>注意: 非对象的值会被强制转换为对象</p><p><strong><code>参数</code></strong></p><ol><li>object (Object):要检索的对象</li></ol><p><strong><code>返回值 (Array)</code></strong></p><p>返回包含属性名的数组</p><p><strong><code>示例</code></strong></p><pre><code>function Foo() {  this.a = 1;  this.b = 2;}Foo.prototype.c = 3;_.keysIn(new Foo);// =&gt; [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;] (无法保证遍历的顺序)</code></pre><hr><h2 id="mapKeys"><a href="#mapKeys" class="headerlink" title="_.mapKeys"></a>_.mapKeys</h2><p><strong><code>_.mapKeys(object, [iteratee=_.identity])</code></strong></p><p>反向版 _.mapValues。 这个方法创建一个对象，对象的值与源对象相同，但 key 是通过 iteratee 产生的。</p><p><strong><code>参数</code></strong></p><ol><li><p>object (Object):要遍历的对象</p></li><li><p>[iteratee=_.identity] (Function|Object|string):这个函数会处理每一个元素</p></li></ol><p><strong><code>返回值 (Object)</code></strong></p><p>返回映射后的新对象</p><p><strong><code>示例</code></strong></p><pre><code>_.mapKeys({ &apos;a&apos;: 1, &apos;b&apos;: 2 }, function(value, key) {  return key + value;});// =&gt; { &apos;a1&apos;: 1, &apos;b2&apos;: 2 }</code></pre><hr><h2 id="mapValues"><a href="#mapValues" class="headerlink" title="_.mapValues"></a>_.mapValues</h2><p><strong><code>_.mapValues(object, [iteratee=_.identity])</code></strong></p><p>创建一个对象，对象的key相同，值是通过 iteratee 产生的。 iteratee 会传入3个参数： (value, key, object)</p><p><strong><code>参数</code></strong></p><ol><li><p>object (Object):要遍历的对象</p></li><li><p>[iteratee=_.identity] (Function|Object|string):这个函数会处理每一个元素</p></li></ol><p><strong><code>返回值 (Object)</code></strong></p><p>返回映射后的新对象</p><p><strong><code>示例</code></strong></p><pre><code>var users = {  &apos;fred&apos;:    { &apos;user&apos;: &apos;fred&apos;,    &apos;age&apos;: 40 },  &apos;pebbles&apos;: { &apos;user&apos;: &apos;pebbles&apos;, &apos;age&apos;: 1 }};_.mapValues(users, function(o) { return o.age; });// =&gt; { &apos;fred&apos;: 40, &apos;pebbles&apos;: 1 } (无法保证遍历的顺序)// 使用了 `_.property` 的回调结果_.mapValues(users, &apos;age&apos;);// =&gt; { &apos;fred&apos;: 40, &apos;pebbles&apos;: 1 } (无法保证遍历的顺序)</code></pre><hr><h2 id="merge"><a href="#merge" class="headerlink" title="_.merge"></a>_.merge</h2><p><strong><code>_.merge(object, [sources])</code></strong></p><p>递归合并来源对象的自身和继承的可枚举属性到目标对象。 跳过来源对象解析为 undefined 的属性。 数组和普通对象会递归合并，其他对象和值会被直接分配。 来源对象从左到右分配，后续的来源对象属性会覆盖之前分配的属性。 </p><p>注意: 这方法会改变源对象</p><p><strong><code>参数</code></strong></p><ol><li><p>object (Object):目标对象</p></li><li><p>[sources] (…Object):来源对象</p></li></ol><p><strong><code>返回值 (Object)</code></strong></p><p>返回对象</p><p><strong><code>示例</code></strong></p><pre><code>var users = {  &apos;data&apos;: [{ &apos;user&apos;: &apos;barney&apos; }, { &apos;user&apos;: &apos;fred&apos; }]};var ages = {  &apos;data&apos;: [{ &apos;age&apos;: 36 }, { &apos;age&apos;: 40 }]};_.merge(users, ages);// =&gt; { &apos;data&apos;: [{ &apos;user&apos;: &apos;barney&apos;, &apos;age&apos;: 36 }, { &apos;user&apos;: &apos;fred&apos;, &apos;age&apos;: 40 }] }</code></pre><hr><h2 id="mergeWith"><a href="#mergeWith" class="headerlink" title="_.mergeWith"></a>_.mergeWith</h2><p><strong><code>_.mergeWith(object, sources, customizer)</code></strong></p><p>这个方法类似 _.merge。 除了它接受一个 customizer 决定如何合并。 如果 customizer 返回 undefined 将会由合并处理方法代替。</p><p><strong><code>参数</code></strong></p><ol><li><p>object (Object):目标对象</p></li><li><p>sources (…Object):来源对象</p></li><li><p>customizer (Function):这个方法决定如何合并object (Object):目标对象</p></li></ol><p><strong><code>返回值 (Object)</code></strong></p><p>返回对象</p><p><strong><code>示例</code></strong></p><pre><code>function customizer(objValue, srcValue) {  if (_.isArray(objValue)) {    return objValue.concat(srcValue);  }}var object = {  &apos;fruits&apos;: [&apos;apple&apos;],  &apos;vegetables&apos;: [&apos;beet&apos;]};var other = {  &apos;fruits&apos;: [&apos;banana&apos;],  &apos;vegetables&apos;: [&apos;carrot&apos;]};_.mergeWith(object, other, customizer);// =&gt; { &apos;fruits&apos;: [&apos;apple&apos;, &apos;banana&apos;], &apos;vegetables&apos;: [&apos;beet&apos;, &apos;carrot&apos;] }</code></pre><hr><h2 id="omit"><a href="#omit" class="headerlink" title="_.omit"></a>_.omit</h2><p><strong><code>_.omit(object, [props])</code></strong></p><p>反向版 _.pick。 这个方法返回忽略属性之外的自身和继承的可枚举属性。</p><p><strong><code>参数</code></strong></p><ol><li><p>object (Object):来源对象</p></li><li><p>[props] (…(string|string[]):要被忽略的属性，单独指定或指定在数组中</p></li></ol><p><strong><code>返回值 (Object)</code></strong></p><p>返回新对象</p><p><strong><code>示例</code></strong></p><pre><code>var object = { &apos;a&apos;: 1, &apos;b&apos;: &apos;2&apos;, &apos;c&apos;: 3 };_.omit(object, [&apos;a&apos;, &apos;c&apos;]);// =&gt; { &apos;b&apos;: &apos;2&apos; }</code></pre><hr><h2 id="omitBy"><a href="#omitBy" class="headerlink" title="_.omitBy"></a>_.omitBy</h2><p><strong><code>_.omitBy(object, [predicate=_.identity])</code></strong></p><p>反向版 _.pickBy。 这个方法返回经 predicate 判断不是真值的属性的自身和继承的可枚举属性。</p><p><strong><code>参数</code></strong></p><ol><li><p>object (Object):来源对象</p></li><li><p>[predicate=_.identity] (Function|Object|string):这个函数会调用每一个属性</p></li></ol><p><strong><code>返回值 (Object)</code></strong></p><p>返回新对象</p><p><strong><code>示例</code></strong></p><pre><code>var object = { &apos;a&apos;: 1, &apos;b&apos;: &apos;2&apos;, &apos;c&apos;: 3 };_.omitBy(object, _.isNumber);// =&gt; { &apos;b&apos;: &apos;2&apos; }</code></pre><hr><h2 id="pick"><a href="#pick" class="headerlink" title="_.pick"></a>_.pick</h2><p><strong><code>_.pick(object, [props])</code></strong></p><p>创建一个从 object 中选中的属性的对象。</p><p><strong><code>参数</code></strong></p><ol><li><p>object (Object):来源对象</p></li><li><p>[props] (…(string|string[]):要选中的属性名，单独指定或指定在数组中</p></li></ol><p><strong><code>返回值 (Object)</code></strong></p><p>返回新对象</p><p><strong><code>示例</code></strong></p><pre><code>var object = { &apos;a&apos;: 1, &apos;b&apos;: &apos;2&apos;, &apos;c&apos;: 3 };_.pick(object, [&apos;a&apos;, &apos;c&apos;]);// =&gt; { &apos;a&apos;: 1, &apos;c&apos;: 3 }</code></pre><hr><h2 id="pickBy"><a href="#pickBy" class="headerlink" title="_.pickBy"></a>_.pickBy</h2><p><strong><code>_.pickBy(object, [predicate=_.identity])</code></strong></p><p>创建一个从 object 中经 predicate 判断为真值的属性为对象。 predicate 会传入1个参数：(value)</p><p><strong><code>参数</code></strong></p><ol><li><p>object (Object):来源对象</p></li><li><p>[predicate=_.identity] (Function|Object|string):这个函数会调用每一个属性</p></li></ol><p><strong><code>返回值 (Object)</code></strong></p><p>返回新对象</p><p><strong><code>示例</code></strong></p><pre><code>var object = { &apos;a&apos;: 1, &apos;b&apos;: &apos;2&apos;, &apos;c&apos;: 3 };_.pickBy(object, _.isNumber);// =&gt; { &apos;a&apos;: 1, &apos;c&apos;: 3 }</code></pre><hr><h2 id="result"><a href="#result" class="headerlink" title="_.result"></a>_.result</h2><p><strong><code>_.result(object, path, [defaultValue])</code></strong></p><p>这个方法类似 _.get。 除了如果解析到的值是一个函数的话，就绑定 this 到这个函数并返回执行后的结果。</p><p><strong><code>参数</code></strong></p><ol><li><p>object (Object):来源对象</p></li><li><p>path (Array|string):要解析的属性路径</p></li><li><p>[defaultValue] (*):如果值是 undefined，返回这个值</p></li></ol><p><strong><code>返回值 (*)</code></strong></p><p>返回解析后的值</p><p><strong><code>示例</code></strong></p><pre><code>var object = { &apos;a&apos;: [{ &apos;b&apos;: { &apos;c1&apos;: 3, &apos;c2&apos;: _.constant(4) } }] };_.result(object, &apos;a[0].b.c1&apos;);// =&gt; 3_.result(object, &apos;a[0].b.c2&apos;);// =&gt; 4_.result(object, &apos;a[0].b.c3&apos;, &apos;default&apos;);// =&gt; &apos;default&apos;_.result(object, &apos;a[0].b.c3&apos;, _.constant(&apos;default&apos;));// =&gt; &apos;default&apos;</code></pre><hr><h2 id="set"><a href="#set" class="headerlink" title="_.set"></a>_.set</h2><p><strong><code>_.set(object, path, value)</code></strong></p><p>设置值到对象对应的属性路径上，如果没有则创建这部分路径。 缺少的索引属性会创建为数组，而缺少的属性会创建为对象。 使用 _.setWith 定制创建。</p><p><strong><code>参数</code></strong></p><ol><li><p>object (Object):要修改的对象</p></li><li><p>path (Array|string):要设置的对象路径</p></li><li><p>value (*):要设置的值</p></li></ol><p><strong><code>返回值 (Object)</code></strong></p><p>返回对象</p><p><strong><code>示例</code></strong></p><pre><code>var object = { &apos;a&apos;: [{ &apos;b&apos;: { &apos;c&apos;: 3 } }] };_.set(object, &apos;a[0].b.c&apos;, 4);console.log(object.a[0].b.c);// =&gt; 4_.set(object, &apos;x[0].y.z&apos;, 5);console.log(object.x[0].y.z);// =&gt; 5</code></pre><hr><h2 id="setWith"><a href="#setWith" class="headerlink" title="_.setWith"></a>_.setWith</h2><p><strong><code>_.setWith(object, path, value, [customizer])</code></strong></p><p>这个方法类似 _.set。 除了它接受一个 customizer 决定如何设置对象路径的值。 如果 customizer 返回 undefined 将会有它的处理方法代替。 customizer 会传入3个参数：(nsValue, key, nsObject) </p><p>注意: 这个方法会改变源对象</p><p><strong><code>参数</code></strong></p><ol><li><p>object (Object):要修改的对象</p></li><li><p>path (Array|string):要设置的对象路径</p></li><li><p>value (*):要设置的值</p></li><li><p>[customizer] (Function):这个函数决定如何分配值</p></li></ol><p><strong><code>返回值 (Object)</code></strong></p><p>返回对象</p><p><strong><code>示例</code></strong></p><pre><code>_.setWith({ &apos;0&apos;: { &apos;length&apos;: 2 } }, &apos;[0][1][2]&apos;, 3, Object);// =&gt; { &apos;0&apos;: { &apos;1&apos;: { &apos;2&apos;: 3 }, &apos;length&apos;: 2 } }</code></pre><hr><h2 id="toPairs"><a href="#toPairs" class="headerlink" title="_.toPairs"></a>_.toPairs</h2><p><strong><code>_.toPairs(object)</code></strong></p><p>创建一个对象自身可枚举属性的键值对数组。</p><p><strong><code>参数</code></strong></p><ol><li>object (Object):要检索的对象</li></ol><p><strong><code>返回值 (Array)</code></strong></p><p>返回键值对的数组</p><p><strong><code>示例</code></strong></p><pre><code>function Foo() {  this.a = 1;  this.b = 2;}Foo.prototype.c = 3;_.toPairs(new Foo);// =&gt; [[&apos;a&apos;, 1], [&apos;b&apos;, 2]] (无法保证遍历的顺序)</code></pre><hr><h2 id="toPairsIn"><a href="#toPairsIn" class="headerlink" title="_.toPairsIn"></a>_.toPairsIn</h2><p><strong><code>_.toPairsIn(object)</code></strong></p><p>创建一个对象自身和继承的可枚举属性的键值对数组。</p><p><strong><code>参数</code></strong></p><ol><li>object (Object):要检索的对象</li></ol><p><strong><code>返回值 (Array)</code></strong></p><p>返回键值对的数组</p><p><strong><code>示例</code></strong></p><pre><code>function Foo() {  this.a = 1;  this.b = 2;}Foo.prototype.c = 3;_.toPairsIn(new Foo);// =&gt; [[&apos;a&apos;, 1], [&apos;b&apos;, 2], [&apos;c&apos;, 3]] (无法保证遍历的顺序)</code></pre><hr><h2 id="transform"><a href="#transform" class="headerlink" title="_.transform"></a>_.transform</h2><p><strong><code>_.transform(object, [iteratee=_.identity], [accumulator])</code></strong></p><p>_.reduce 的代替方法。 这个方法会改变对象为一个新的 accumulator 对象，来自每一次经 iteratee 处理自身可枚举对象的结果。 每次调用可能会改变 accumulator 对象。 iteratee 会传入4个对象：(accumulator, value, key, object)。 如果返回 false，iteratee 会提前退出。</p><p><strong><code>参数</code></strong></p><ol><li><p>object (Array|Object):要遍历的对象</p></li><li><p>[iteratee=_.identity] (Function):这个函数会处理每一个元素</p></li><li><p>[accumulator] (*):定制叠加的值</p></li></ol><p><strong><code>返回值 (*)</code></strong></p><p>返回叠加后的值</p><p><strong><code>示例</code></strong></p><pre><code>_.transform([2, 3, 4], function(result, n) {  result.push(n *= n);  return n % 2 == 0;}, []);// =&gt; [4, 9]_.transform({ &apos;a&apos;: 1, &apos;b&apos;: 2, &apos;c&apos;: 1 }, function(result, value, key) {  (result[value] || (result[value] = [])).push(key);}, {});// =&gt; { &apos;1&apos;: [&apos;a&apos;, &apos;c&apos;], &apos;2&apos;: [&apos;b&apos;] }</code></pre><hr><h2 id="unset"><a href="#unset" class="headerlink" title="_.unset"></a>_.unset</h2><p><strong><code>_.unset(object, path)</code></strong></p><p>移除对象路径的属性。 </p><p>注意: 这个方法会改变源对象</p><p><strong><code>参数</code></strong></p><ol><li><p>object (Object):要修改的对象</p></li><li><p>path (Array|string):要移除的对象路径</p></li></ol><p><strong><code>返回值 (boolean)</code></strong></p><p>移除成功返回 true，否则返回 false</p><p><strong><code>示例</code></strong></p><pre><code>var object = { &apos;a&apos;: [{ &apos;b&apos;: { &apos;c&apos;: 7 } }] };_.unset(object, &apos;a[0].b.c&apos;);// =&gt; trueconsole.log(object);// =&gt; { &apos;a&apos;: [{ &apos;b&apos;: {} }] };_.unset(object, &apos;a[0].b.c&apos;);// =&gt; trueconsole.log(object);// =&gt; { &apos;a&apos;: [{ &apos;b&apos;: {} }] };</code></pre><hr><h2 id="values"><a href="#values" class="headerlink" title="_.values"></a>_.values</h2><p><strong><code>_.values(object)</code></strong></p><p>创建 object 自身可枚举属性的值为数组 </p><p>注意: 非对象的值会强制转换为对象</p><p><strong><code>参数</code></strong></p><ol><li>object (Object):要检索的对象</li></ol><p><strong><code>返回值 (Array)</code></strong></p><p>返回对象属性的值的数组</p><p><strong><code>示例</code></strong></p><pre><code>function Foo() {  this.a = 1;  this.b = 2;}Foo.prototype.c = 3;_.values(new Foo);// =&gt; [1, 2] (无法保证遍历的顺序)_.values(&apos;hi&apos;);// =&gt; [&apos;h&apos;, &apos;i&apos;]</code></pre><hr><h2 id="valuesIn"><a href="#valuesIn" class="headerlink" title="_.valuesIn"></a>_.valuesIn</h2><p><strong><code>_.valuesIn(object)</code></strong></p><p>创建 object 自身和继承的可枚举属性的值为数组 </p><p>注意: 非对象的值会强制转换为对象</p><p><strong><code>参数</code></strong></p><ol><li>object (Object):要检索的对象</li></ol><p><strong><code>返回值 (Array)</code></strong></p><p>返回对象属性的值的数组</p><p><strong><code>示例</code></strong></p><pre><code>function Foo() {  this.a = 1;  this.b = 2;}Foo.prototype.c = 3;_.valuesIn(new Foo);// =&gt; [1, 2, 3] (无法保证遍历的顺序)</code></pre><hr>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Array&quot;&gt;&lt;a href=&quot;#Array&quot; class=&quot;headerlink&quot; title=&quot;Array&quot;&gt;&lt;/a&gt;Array&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;chunk&quot;&gt;&lt;a href=&quot;#chunk&quot; class=&quot;headerlink&quot; title=&quot;_.chunk&quot;&gt;&lt;/a&gt;_.chunk&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;_.chunk(array, [size=0])&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;将数组拆分成多个 size 长度的块，并组成一个新数组。 如果数组无法被分割成全部等长的块，那么最后剩余的元素将组成一个块。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;参数&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;array (Array):需要被处理的数组&lt;/li&gt;
&lt;li&gt;[size=0] (number):每个块的长度&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;返回值 (Array)&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;返回一个拆分好的新数组&lt;/p&gt;
    
    </summary>
    
      <category term="Document" scheme="https://note.pin.bo/categories/Document/"/>
    
    
      <category term="Lodash" scheme="https://note.pin.bo/tags/Lodash/"/>
    
  </entry>
  
  <entry>
    <title>vi/vim简单教程</title>
    <link href="https://note.pin.bo/2016-03-15-vi-and-vim-tutorial/"/>
    <id>https://note.pin.bo/2016-03-15-vi-and-vim-tutorial/</id>
    <published>2016-03-15T14:08:00.000Z</published>
    <updated>2017-02-20T04:34:25.215Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>vim学习笔记</p></blockquote><h2 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h2><ul><li><code>normal模式</code>: 在insert模式下按esc进入normal模式</li><li><code>insert模式</code>: 在normal模式下按下i等字符进入insert模式</li></ul><h2 id="vim即语言"><a href="#vim即语言" class="headerlink" title="vim即语言"></a>vim即语言</h2><h3 id="动词"><a href="#动词" class="headerlink" title="动词"></a>动词</h3><ul><li><code>d</code>:删除</li><li><code>c</code>:修改</li><li><code>y</code>:拖拉(拷贝)</li><li><code>v</code>:可视化选择</li></ul><a id="more"></a><h3 id="修饰语"><a href="#修饰语" class="headerlink" title="修饰语"></a>修饰语</h3><ul><li><code>i</code>:内部</li><li><code>a</code>:周围</li><li><code>num</code>:数字(e.g.:1,2,10)</li><li><code>t</code>:查找到指定字符串,并跳转到这个字符串的前面</li><li><code>f</code>:查找到指定字符,并跳转到这个字符所处的位置</li><li><code>/</code>:查找字符串</li></ul><h3 id="名词"><a href="#名词" class="headerlink" title="名词"></a>名词</h3><ul><li><code>w</code>:单词</li><li><code>s</code>:句子</li><li><code>)</code>:句子(另一种操作方式)</li><li><code>p</code>:段落</li><li><code>}</code>:段落(另一种操作方式)</li><li><code>t</code>:标签(html/xml)</li><li><code>b</code>:块(编程语言)</li></ul><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h3><h4 id="基本移动"><a href="#基本移动" class="headerlink" title="基本移动"></a>基本移动</h4><ul><li><code>h</code>:向左移动一个字符</li><li><code>j</code>:向下移动一行</li><li><code>k</code>:向上移动一行</li><li><code>l</code>:向右移动一个字符</li></ul><h4 id="行内移动"><a href="#行内移动" class="headerlink" title="行内移动"></a>行内移动</h4><ul><li><code>0</code>:移动到行首</li><li><code>$</code>:移动到行末</li><li><code>^</code>:移动到行首非空字符</li><li><code>t&quot;</code>:跳转到下一个引号前</li><li><code>f&quot;</code>:调换到下一个引号处</li></ul><h4 id="单词移动"><a href="#单词移动" class="headerlink" title="单词移动"></a>单词移动</h4><ul><li><code>w</code>:移动到下一个单词的开始</li><li><code>b</code>:移动到上一个单词的开始</li><li><code>e</code>:移动到下一个单词的结尾</li><li><code>w</code>:移动到下一个大单词的开始</li><li><code>b</code>:移动到上一个大单词的开始</li><li><code>e</code>:移动到下一个大单词的开始</li></ul><h4 id="句段移动"><a href="#句段移动" class="headerlink" title="句段移动"></a>句段移动</h4><ul><li><code>(</code>:向上移动一句</li><li><code>)</code>:向下移动一句</li><li><code>{</code>:向上移动一段</li><li><code>}</code>:向下移动一段</li></ul><h4 id="屏间移动"><a href="#屏间移动" class="headerlink" title="屏间移动"></a>屏间移动</h4><ul><li><code>gg</code>:移动第一行</li><li><code>g</code>:移动到最后一行</li><li><code>ng</code>:移动到第n行</li><li><code>h</code>:移动到屏幕的顶端</li><li><code>m</code>:移动到屏幕的中间</li><li><code>l</code>:移动到屏幕的低端</li><li><code>ctrl+e</code>:向上移(滚)动一行</li><li><code>ctrl+y</code>:向下移(滚)动一行</li><li><code>ctrl+u</code>:向上移(滚)动半屏</li><li><code>ctrl+d</code>:向下移(滚)动半屏</li><li><code>ctrl+b</code>:上一页</li><li><code>ctrl+f</code>:下一页</li><li><code>:n</code>:移动到第n行,同<code>ng</code></li><li><code>ctrl+i</code>:跳转到之前的位置</li><li><code>ctrl+o</code>:跳转到实际位置oa</li></ul><h3 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h3><h4 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h4><ul><li><code>i</code>:从当前光标位置之前插入</li><li><code>i</code>:从当前行开始位置插入</li><li><code>a</code>:从当前光标位置之后插入</li><li><code>a</code>:从当前行行末位置插入</li><li><code>o</code>:在当前行下方新增一行，并从新行插入</li><li><code>o</code>:在当前行上方新增一行，并从新行插入</li><li><code>r</code>:替换当前光标所在的字符</li><li><code>r</code>:替换当前光标所在的字符，并一直向后替换(替换模式)</li><li><code>c</code>:修改当前所在行</li><li><code>s</code>:替换当前字符</li><li><code>S</code>:替换整行</li></ul><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><ul><li><code>x</code>:删除当前光标的字符</li><li><code>X</code>:删除当前光标的前一个字符</li><li><code>dm</code>:删除 根据定义的m来确定删除范围，单词,句子,段落,其他</li><li><code>D</code>:删除当前光标位置到本行末的所有内容(对比C,D不会进入插入模式)</li><li><code>J</code>:将上下两行合并(删除两行之间的换行符)</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;vim学习笔记&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;模式&quot;&gt;&lt;a href=&quot;#模式&quot; class=&quot;headerlink&quot; title=&quot;模式&quot;&gt;&lt;/a&gt;模式&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;normal模式&lt;/code&gt;: 在insert模式下按esc进入normal模式&lt;/li&gt;
&lt;li&gt;&lt;code&gt;insert模式&lt;/code&gt;: 在normal模式下按下i等字符进入insert模式&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;vim即语言&quot;&gt;&lt;a href=&quot;#vim即语言&quot; class=&quot;headerlink&quot; title=&quot;vim即语言&quot;&gt;&lt;/a&gt;vim即语言&lt;/h2&gt;&lt;h3 id=&quot;动词&quot;&gt;&lt;a href=&quot;#动词&quot; class=&quot;headerlink&quot; title=&quot;动词&quot;&gt;&lt;/a&gt;动词&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;d&lt;/code&gt;:删除&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c&lt;/code&gt;:修改&lt;/li&gt;
&lt;li&gt;&lt;code&gt;y&lt;/code&gt;:拖拉(拷贝)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;v&lt;/code&gt;:可视化选择&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Tutorial" scheme="https://note.pin.bo/categories/Tutorial/"/>
    
    
      <category term="vi" scheme="https://note.pin.bo/tags/vi/"/>
    
      <category term="vim" scheme="https://note.pin.bo/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>API和DOC收藏夹</title>
    <link href="https://note.pin.bo/2015-10-01-api-or-doc-favorites/"/>
    <id>https://note.pin.bo/2015-10-01-api-or-doc-favorites/</id>
    <published>2015-10-01T04:03:00.000Z</published>
    <updated>2017-02-21T02:04:51.179Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JAVA"><a href="#JAVA" class="headerlink" title="JAVA"></a>JAVA</h2><h3 id="java-8"><a href="#java-8" class="headerlink" title="java 8"></a>java 8</h3><p><a href="http://docs.oracle.com/javase/8/docs/index.html" target="_blank" rel="noopener"><strong><code>java 8 Documentation:</code></strong></a>    <a href="http://docs.oracle.com/javase/8/docs/api/index.html" target="_blank" rel="noopener">http://docs.oracle.com/javase/8/docs/api/index.html</a></p><h3 id="java-7"><a href="#java-7" class="headerlink" title="java 7"></a>java 7</h3><p><a href="http://docs.oracle.com/javase/7/docs/index.html" target="_blank" rel="noopener"><strong><code>java 7 Documentation:</code></strong></a>    <a href="http://docs.oracle.com/javase/7/docs/api/index.html" target="_blank" rel="noopener">http://docs.oracle.com/javase/7/docs/api/index.html</a></p><a id="more"></a><h2 id="JAVASCRIPT"><a href="#JAVASCRIPT" class="headerlink" title="JAVASCRIPT"></a>JAVASCRIPT</h2><h3 id="lodash"><a href="#lodash" class="headerlink" title="lodash"></a>lodash</h3><p><a href="https://lodash.com" target="_blank" rel="noopener"><strong><code>lodash主页:</code></strong></a>    <a href="https://lodash.com/docs" target="_blank" rel="noopener">https://lodash.com/docs</a><br><a href="http://lodashjs.com/docs/" target="_blank" rel="noopener"><strong><code>lodash中文文档:</code></strong></a>    <a href="http://lodashjs.com/docs/" target="_blank" rel="noopener">http://lodashjs.com/docs/</a></p><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><h2 id="OTHER"><a href="#OTHER" class="headerlink" title="OTHER"></a>OTHER</h2><h3 id="Bootstrap"><a href="#Bootstrap" class="headerlink" title="Bootstrap"></a>Bootstrap</h3><p><a href="http://www.bootcss.com/" target="_blank" rel="noopener"><strong><code>Bootstrap中文网:</code></strong></a><a href="http://www.bootcss.com/" target="_blank" rel="noopener">http://www.bootcss.com/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;JAVA&quot;&gt;&lt;a href=&quot;#JAVA&quot; class=&quot;headerlink&quot; title=&quot;JAVA&quot;&gt;&lt;/a&gt;JAVA&lt;/h2&gt;&lt;h3 id=&quot;java-8&quot;&gt;&lt;a href=&quot;#java-8&quot; class=&quot;headerlink&quot; title=&quot;java 8&quot;&gt;&lt;/a&gt;java 8&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://docs.oracle.com/javase/8/docs/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;&lt;code&gt;java 8 Documentation:&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;    &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://docs.oracle.com/javase/8/docs/api/index.html&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;java-7&quot;&gt;&lt;a href=&quot;#java-7&quot; class=&quot;headerlink&quot; title=&quot;java 7&quot;&gt;&lt;/a&gt;java 7&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://docs.oracle.com/javase/7/docs/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;&lt;code&gt;java 7 Documentation:&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;    &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://docs.oracle.com/javase/7/docs/api/index.html&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Document" scheme="https://note.pin.bo/categories/Document/"/>
    
    
      <category term="API" scheme="https://note.pin.bo/tags/API/"/>
    
      <category term="Doc" scheme="https://note.pin.bo/tags/Doc/"/>
    
  </entry>
  
  <entry>
    <title>富文本编辑器-百度Ueditor的使用</title>
    <link href="https://note.pin.bo/2015-05-29-baidu-ueditor-use/"/>
    <id>https://note.pin.bo/2015-05-29-baidu-ueditor-use/</id>
    <published>2015-05-29T11:08:00.000Z</published>
    <updated>2017-02-20T04:38:16.110Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>UEditor是由百度web前端研发部开发所见即所得富文本web编辑器，具有轻量，可定制，注重用户体验等特点，开源基于MIT协议，允许自由使用和修改代码…</p></blockquote><p>1. 首先，你要有一个项目，本文中假设我们有个项目article，是在tomcat环境下模拟的一个项目。</p><a id="more"></a><p><img src="/images/post_images/2015-05-29-baidu-ueditor-use-01.png" alt="Alt text"></p><p>2. 在Ueditor主页下载最新的版本，解压缩，等待拷贝到项目中。</p><p><img src="/images/post_images/2015-05-29-baidu-ueditor-use-02.png" alt="Alt text"></p><p>3. 在article项目中新建文件夹ueditor，把解压的文件拷贝过去。然后把解压包下的jsp文件夹下的jar包拷贝到你的项目中WEB-INF/lib文件夹中。新建static放入编辑器上传的文件。</p><p><img src="/images/post_images/2015-05-29-baidu-ueditor-use-03.png" alt="Alt text"></p><p>原来的jar的路径：</p><p><img src="/images/post_images/2015-05-29-baidu-ueditor-use-04.png" alt="Alt text"></p><p>拷贝到项目中的lib中：</p><p><img src="/images/post_images/2015-05-29-baidu-ueditor-use-05.png" alt="Alt text"></p><p>4. 配置文件的使用，打开ueditor.config.js，然后编辑toolbar，选择你所需要的工具。以下是官网完整版的工具栏和自定义的工具，可以用中括号分行显示，也可以用竖线分开不同类别的工具，见下图：</p><p><img src="/images/post_images/2015-05-29-baidu-ueditor-use-06.png" alt="Alt text"></p><p><img src="/images/post_images/2015-05-29-baidu-ueditor-use-07.png" alt="Alt text"></p><p>5. 上传文件主要介绍下图片，在static中新建image文件夹以存放文章里的图片。</p><p><img src="/images/post_images/2015-05-29-baidu-ueditor-use-08.png" alt="Alt text"></p><p>6. 然后打开jsp/config.json文件配置图片上传。</p><p><img src="/images/post_images/2015-05-29-baidu-ueditor-use-09.png" alt="Alt text"></p><p>7. 配置项如图，文件上传路径根据自己的需要，相对于项目根路径设置，本文设置的是/static/image/文件夹保存图片，取图时根据url+相对路径访问。</p><p><img src="/images/post_images/2015-05-29-baidu-ueditor-use-10.png" alt="Alt text"></p><p>8. 启动Tomcat</p><p><img src="/images/post_images/2015-05-29-baidu-ueditor-use-11.png" alt="Alt text"></p><p><img src="/images/post_images/2015-05-29-baidu-ueditor-use-12.png" alt="Alt text"></p><p>9. 新建网页，并正确引入JS文件</p><p><img src="/images/post_images/2015-05-29-baidu-ueditor-use-13.png" alt="Alt text"></p><p>10. 本文中不在新建，使用index.html进行测试</p><p><img src="/images/post_images/2015-05-29-baidu-ueditor-use-14.png" alt="Alt text"></p><p>11. 预览：</p><p><img src="/images/post_images/2015-05-29-baidu-ueditor-use-15.png" alt="Alt text"></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;UEditor是由百度web前端研发部开发所见即所得富文本web编辑器，具有轻量，可定制，注重用户体验等特点，开源基于MIT协议，允许自由使用和修改代码…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1. 首先，你要有一个项目，本文中假设我们有个项目article，是在tomcat环境下模拟的一个项目。&lt;/p&gt;
    
    </summary>
    
      <category term="Tutorial" scheme="https://note.pin.bo/categories/Tutorial/"/>
    
    
      <category term="Ueditor" scheme="https://note.pin.bo/tags/Ueditor/"/>
    
  </entry>
  
  <entry>
    <title>天气预报接口2</title>
    <link href="https://note.pin.bo/2015-04-13-weather-forecast-interface/"/>
    <id>https://note.pin.bo/2015-04-13-weather-forecast-interface/</id>
    <published>2015-04-13T03:13:00.000Z</published>
    <updated>2017-02-20T04:38:35.401Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>看了前两个天气预报接口的童鞋估计不会再看这篇文章了，其实这篇文档也挺有用的，用的是中国天气网-气象数据开放平台的接口，相信这个接口是比较稳定的，也可以放心使用。</p></blockquote><p>1.直接给出代码:</p><a id="more"></a><pre><code>package name.zhoufei.weather;import name.zhoufei.util.HttpPost;import name.zhoufei.util.StringUtils;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONArray;import com.alibaba.fastjson.JSONObject;import javax.crypto.Mac;import javax.crypto.spec.SecretKeySpec;import java.net.URLEncoder;import java.security.InvalidKeyException;import java.text.SimpleDateFormat;import java.util.Date;import java.util.HashMap;import java.util.Map;/** * Created by Administrator on 2015/4/13. */public class ChinaWeather {    private static final char last2byte = (char) Integer.parseInt(&quot;00000011&quot;, 2);    private static final char last4byte = (char) Integer.parseInt(&quot;00001111&quot;, 2);    private static final char last6byte = (char) Integer.parseInt(&quot;00111111&quot;, 2);    private static final char lead6byte = (char) Integer.parseInt(&quot;11111100&quot;, 2);    private static final char lead4byte = (char) Integer.parseInt(&quot;11110000&quot;, 2);    private static final char lead2byte = (char) Integer.parseInt(&quot;11000000&quot;, 2);    private static final char[] encodeTable = new char[] { &apos;A&apos;, &apos;B&apos;, &apos;C&apos;, &apos;D&apos;,        &apos;E&apos;, &apos;F&apos;, &apos;G&apos;, &apos;H&apos;, &apos;I&apos;, &apos;J&apos;, &apos;K&apos;, &apos;L&apos;, &apos;M&apos;, &apos;N&apos;, &apos;O&apos;, &apos;P&apos;, &apos;Q&apos;,        &apos;R&apos;, &apos;S&apos;, &apos;T&apos;, &apos;U&apos;, &apos;V&apos;, &apos;W&apos;, &apos;X&apos;, &apos;Y&apos;, &apos;Z&apos;, &apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;,        &apos;e&apos;, &apos;f&apos;, &apos;g&apos;, &apos;h&apos;, &apos;i&apos;, &apos;j&apos;, &apos;k&apos;, &apos;l&apos;, &apos;m&apos;, &apos;n&apos;, &apos;o&apos;, &apos;p&apos;, &apos;q&apos;,        &apos;r&apos;, &apos;s&apos;, &apos;t&apos;, &apos;u&apos;, &apos;v&apos;, &apos;w&apos;, &apos;x&apos;, &apos;y&apos;, &apos;z&apos;, &apos;0&apos;, &apos;1&apos;, &apos;2&apos;, &apos;3&apos;,        &apos;4&apos;, &apos;5&apos;, &apos;6&apos;, &apos;7&apos;, &apos;8&apos;, &apos;9&apos;, &apos;+&apos;, &apos;/&apos;    };    public static String standardURLEncoder(String data, String key) {    byte[] byteHMAC = null;    String urlEncoder = &quot;&quot;;    try {        Mac mac = Mac.getInstance(&quot;HmacSHA1&quot;);        SecretKeySpec spec = new SecretKeySpec(key.getBytes(), &quot;HmacSHA1&quot;);        mac.init(spec);        byteHMAC = mac.doFinal(data.getBytes());        if (byteHMAC != null) {        String oauth = encode(byteHMAC);        if (oauth != null) {            urlEncoder = URLEncoder.encode(oauth, &quot;utf8&quot;);        }        }    } catch (InvalidKeyException e1) {        e1.printStackTrace();    } catch (Exception e2) {        e2.printStackTrace();    }    return urlEncoder;    }    public static String encode(byte[] from) {    StringBuffer to = new StringBuffer((int) (from.length * 1.34) + 3);    int num = 0;    char currentByte = 0;    for (int i = 0; i &amp;lt; from.length; i++) {        num = num % 8;        while (num &amp;lt; 8) {        switch (num) {            case 0:                currentByte = (char) (from[i] &amp;amp; lead6byte);                currentByte = (char) (currentByte &amp;gt;&amp;gt;&amp;gt; 2);                break;            case 2:                currentByte = (char) (from[i] &amp;amp; last6byte);                break;            case 4:                currentByte = (char) (from[i] &amp;amp; last4byte);                currentByte = (char) (currentByte &amp;lt;&amp;lt; 2);                if ((i + 1) &amp;lt; from.length) {                    currentByte |= (from[i + 1] &amp;amp; lead2byte) &amp;gt;&amp;gt;&amp;gt; 6;                }                break;            case 6:                currentByte = (char) (from[i] &amp;amp; last2byte);                currentByte = (char) (currentByte &amp;lt;&amp;lt; 4);                if ((i + 1) &amp;lt; from.length) {                    currentByte |= (from[i + 1] &amp;amp; lead4byte) &amp;gt;&amp;gt;&amp;gt; 4;                }                break;        }        to.append(encodeTable[currentByte]);        num += 6;        }    }    if (to.length() % 4 != 0) {        for (int i = 4 - to.length() % 4; i &amp;gt; 0; i--) {        to.append(&quot;=&quot;);        }    }    return to.toString();    }    /**     * 以上是中国天气网气象数据开放平台给出的JAVA的demo  地址：http://openweather.weather.com.cn/     */    public static void main(String[] args) {    SimpleDateFormat dateFormat = new SimpleDateFormat(&quot;yyyyMMddhhmm&quot;);    String date = dateFormat.format(new Date());    //需要加密的数据    String data = &quot;http://open.weather.com.cn/data/?areaid=&quot;+getAreaId()+&quot;&amp;amp;type=forecast_v&amp;amp;date=&quot;+date+&quot;&amp;amp;appid=b39305a0fffb05&quot;;    //密钥    String key = &quot;d6858_SmartWeatherAPI_bef440&quot;;    String url = &quot;http://open.weather.com.cn/data/?areaid=&quot;+getAreaId()+&quot;&amp;amp;type=forecast_v&amp;amp;date=&quot;+date+&quot;&amp;amp;appid=b39305&amp;amp;key=&quot; + standardURLEncoder(data, key);    String content = HttpPost.sendGET(url, &quot;utf8&quot;);    JSONObject jsonObject = JSON.parseObject(content);    JSONObject city = jsonObject.getJSONObject(&quot;c&quot;);    JSONObject weather = jsonObject.getJSONObject(&quot;f&quot;).getJSONArray(&quot;f1&quot;).getJSONObject(0);    Map&amp;lt;String, Object&amp;gt; dataMap = new HashMap&amp;lt;&amp;gt;();    dataMap.put(&quot;city&quot;,city.get(&quot;c3&quot;));    if (!StringUtils.isEmpty(weather.getString(&quot;fa&quot;))){        dataMap.put(&quot;weather&quot;,weather.getString(&quot;fa&quot;));    }else if (StringUtils.isEmpty(weather.getString(&quot;fa&quot;)) &amp;amp;&amp;amp; !StringUtils.isEmpty(weather.getString(&quot;fb&quot;))){        dataMap.put(&quot;weather&quot;,weather.getString(&quot;fb&quot;));    }    if (!StringUtils.isEmpty(weather.getString(&quot;fc&quot;))){        dataMap.put(&quot;temperature&quot;,weather.getString(&quot;fc&quot;)+&quot;~&quot;+weather.getString(&quot;fd&quot;)+&quot;℃&quot;);    }else if (StringUtils.isEmpty(weather.getString(&quot;fc&quot;)) &amp;amp;&amp;amp; !StringUtils.isEmpty(weather.getString(&quot;fd&quot;))){        dataMap.put(&quot;temperature&quot;,weather.getString(&quot;fd&quot;)+&quot;℃&quot;);    }    System.out.println(&quot;city:&quot;+dataMap.get(&quot;city&quot;));    System.out.println(&quot;weather:&quot;+dataMap.get(&quot;weather&quot;));    System.out.println(&quot;temperature:&quot;+dataMap.get(&quot;temperature&quot;));    }    /**     * 根据网络请求获得IP地址，同时得到该网关下的城市ID     * @return 城市ID     */    public static String getAreaId(){    String result = HttpPost.sendGET(&quot;http://61.4.185.48:81/g/&quot;,&quot;UTF-8&quot;);    return result.substring(result.indexOf(&quot;id=&quot;)+3,result.indexOf(&quot;;if&quot;));    }}</code></pre><p>2. 从中国天气网的接口得到的JSON如下：</p><pre><code>{ &quot;c&quot;: { &quot;c1&quot;: &quot;101010100&quot;, &quot;c2&quot;: &quot;beijing&quot;, &quot;c3&quot;: &quot;北京&quot;, &quot;c4&quot;: &quot;beijing&quot;, &quot;c5&quot;: &quot;北京&quot;, &quot;c6&quot;: &quot;beijing&quot;, &quot;c7&quot;: &quot;北京&quot;, &quot;c8&quot;: &quot;china&quot;, &quot;c9&quot;: &quot;中国&quot;, &quot;c10&quot;: &quot;1&quot;, &quot;c11&quot;: &quot;010&quot;, &quot;c12&quot;: &quot;100000&quot;, &quot;c13&quot;: 116.391, &quot;c14&quot;: 39.904, &quot;c15&quot;: &quot;33&quot;, &quot;c16&quot;: &quot;AZ9010&quot;, &quot;c17&quot;: &quot;+8&quot; }, &quot;f&quot;: { &quot;f1&quot;: [ { &quot;fa&quot;: &quot;01&quot;, &quot;fb&quot;: &quot;00&quot;, &quot;fc&quot;: &quot;18&quot;, &quot;fd&quot;: &quot;5&quot;, &quot;fe&quot;: &quot;8&quot;, &quot;ff&quot;: &quot;0&quot;, &quot;fg&quot;: &quot;1&quot;, &quot;fh&quot;: &quot;0&quot;, &quot;fi&quot;: &quot;05:40|18:49&quot; }, { &quot;fa&quot;: &quot;00&quot;, &quot;fb&quot;: &quot;01&quot;, &quot;fc&quot;: &quot;24&quot;, &quot;fd&quot;: &quot;10&quot;, &quot;fe&quot;: &quot;0&quot;, &quot;ff&quot;: &quot;0&quot;, &quot;fg&quot;: &quot;0&quot;, &quot;fh&quot;: &quot;0&quot;, &quot;fi&quot;: &quot;05:38|18:50&quot; }, { &quot;fa&quot;: &quot;02&quot;, &quot;fb&quot;: &quot;00&quot;, &quot;fc&quot;: &quot;25&quot;, &quot;fd&quot;: &quot;13&quot;, &quot;fe&quot;: &quot;8&quot;, &quot;ff&quot;: &quot;8&quot;, &quot;fg&quot;: &quot;1&quot;, &quot;fh&quot;: &quot;2&quot;, &quot;fi&quot;: &quot;05:37|18:51&quot; } ], &quot;f0&quot;: &quot;201504130800&quot; }}</code></pre><p>3. 解析之后的结果如下：</p><pre><code>city:上海weather:07temperature:15~8℃</code></pre><p>4. 其中weather是天气编码，对应的天气情况如下表：</p><table><thead><tr><th>编号</th><th>中文名称</th><th>英文名称</th></tr></thead><tbody><tr><td>00</td><td>晴</td><td>Sunny</td></tr><tr><td>01</td><td>多云</td><td>Cloudy</td></tr><tr><td>02</td><td>阴</td><td>Overcast</td></tr><tr><td>03</td><td>阵雨</td><td>Shower</td></tr><tr><td>04</td><td>雷阵雨</td><td>Thundershower</td></tr><tr><td>05</td><td>雷阵雨伴有冰雹</td><td>Thundershower with hail</td></tr><tr><td>06</td><td>雨夹雪</td><td>Sleet</td></tr><tr><td>07</td><td>小雨</td><td>Light rain</td></tr><tr><td>08</td><td>中雨</td><td>Moderate rain</td></tr><tr><td>09</td><td>大雨</td><td>Heavy rain</td></tr><tr><td>10</td><td>暴雨</td><td>Storm</td></tr><tr><td>11</td><td>大暴雨</td><td>Heavy storm</td></tr><tr><td>12</td><td>特大暴雨</td><td>Severe storm</td></tr><tr><td>13</td><td>阵雪</td><td>Snow flurry</td></tr><tr><td>14</td><td>小雪</td><td>Light snow</td></tr><tr><td>15</td><td>中雪</td><td>Moderate snow</td></tr><tr><td>16</td><td>大雪</td><td>Heavy snow</td></tr><tr><td>17</td><td>暴雪</td><td>Snowstorm</td></tr><tr><td>18</td><td>雾</td><td>Foggy</td></tr><tr><td>19</td><td>冻雨</td><td>Ice rain</td></tr><tr><td>20</td><td>沙尘暴</td><td>Dust Storm</td></tr><tr><td>21</td><td>小到中雨</td><td>Light to moderate rain</td></tr><tr><td>22</td><td>中到大雨</td><td>Moderate to heavy rain</td></tr><tr><td>23</td><td>大到暴雨</td><td>Heavy rain to storm</td></tr><tr><td>24</td><td>暴雨到大暴雨</td><td>Storm to heavy storm</td></tr><tr><td>25</td><td>大暴雨到特大暴雨</td><td>Heavy to severe storm</td></tr><tr><td>26</td><td>小到中雪</td><td>Light to moderate snow</td></tr><tr><td>27</td><td>中到大雪</td><td>Moderate to heavy snow</td></tr><tr><td>28</td><td>大到暴雪</td><td>Heavy snow to snowstorm</td></tr><tr><td>29</td><td>浮尘</td><td>Dust</td></tr><tr><td>30</td><td>扬沙</td><td>Sandv</td></tr><tr><td>31</td><td>强沙尘暴</td><td>Sandstormv</td></tr><tr><td>32</td><td>霾</td><td>Haze</td></tr><tr><td>33</td><td>无</td><td>Unknown</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;看了前两个天气预报接口的童鞋估计不会再看这篇文章了，其实这篇文档也挺有用的，用的是中国天气网-气象数据开放平台的接口，相信这个接口是比较稳定的，也可以放心使用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1.直接给出代码:&lt;/p&gt;
    
    </summary>
    
      <category term="Coding" scheme="https://note.pin.bo/categories/Coding/"/>
    
    
      <category term="Weather" scheme="https://note.pin.bo/tags/Weather/"/>
    
  </entry>
  
  <entry>
    <title>天气预报接口1</title>
    <link href="https://note.pin.bo/2015-03-06-weather-forecast-interface/"/>
    <id>https://note.pin.bo/2015-03-06-weather-forecast-interface/</id>
    <published>2015-03-06T03:13:00.000Z</published>
    <updated>2019-07-25T02:58:07.800Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近使用天气预报接口很不如意啊，稳定的要收费，免费的又不稳定, 记录下自己的做法……</p></blockquote><p>1. 根据网络请求获得当前城市的ID,方法,额,百度吧.或者直接搜天气咯.</p><p>2. 根据百度搜索天气预报第一条获得的数据，进去<a href="http://www.weather.com.cn/weather1d/101020100.shtml" target="_blank" rel="noopener">http://www.weather.com.cn/weather1d/101020100.shtml</a>进行网页抓取</p><a id="more"></a><p><img src="/images/post_images/2015-03-06-weather-forecast-interface-01.png" alt="Alt text"></p><p>3. 根据今天的白天和夜晚得到的数据进行组合,具体要显示哪些信息,由自己根据需求拼在一起.</p><p><img src="/images/post_images/2015-03-06-weather-forecast-interface-02.png" alt="Alt text"></p><p>4. 代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> name.zhoufei.weather;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> name.zhoufei.util.HttpPost;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.Jsoup;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Document;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by ZhouFei on 2015/3/6.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Weather</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">getWeather(getAreaId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据网络请求获得IP地址，同时得到该网关下的城市ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 城市ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getAreaId</span><span class="params">()</span></span>&#123;</span><br><span class="line">String result = HttpPost.sendGET(<span class="string">"http://61.4.185.48:81/g/"</span>,<span class="string">"UTF-8"</span>);</span><br><span class="line"><span class="keyword">return</span> result.substring(result.indexOf(<span class="string">"id="</span>)+<span class="number">3</span>,result.indexOf(<span class="string">";if"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调用百度搜索"上海天气"第一条，进去http://www.weather.com.cn/weather1d/101020100.shtml 进行网页抓取（本吊初级程序员）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> areaId 城市ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getWeather</span><span class="params">(String areaId)</span></span>&#123;</span><br><span class="line">String URL = <span class="string">"http://www.weather.com.cn/weather1d/"</span>+areaId+<span class="string">".shtml"</span>;</span><br><span class="line">String content = HttpPost.sendGET(URL, <span class="string">"utf8"</span>);</span><br><span class="line">String weatherHtml  = content.substring(content.indexOf(<span class="string">"&amp;lt;!-- 今天明天预报 begin--&amp;gt;"</span>)+<span class="number">20</span>,content.indexOf(<span class="string">"&amp;lt;!-- 今天明天预报 end--&amp;gt;"</span>));</span><br><span class="line">content = content.replaceAll(<span class="string">"\\s*"</span>, <span class="string">""</span>);</span><br><span class="line">String city  = content.substring(content.indexOf(<span class="string">"&amp;lt;h1&amp;gt;城区&amp;lt;/h1&amp;gt;&amp;lt;h3&amp;gt;"</span>)+<span class="number">15</span>,content.indexOf(<span class="string">"&amp;lt;/h3&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!--嵌套周边景点divbegin--&amp;gt;"</span>));</span><br><span class="line">String THtml  = weatherHtml.substring(weatherHtml.indexOf(<span class="string">"&amp;lt;li"</span>),weatherHtml.indexOf(<span class="string">"&amp;lt;/li&amp;gt;"</span>)+<span class="number">5</span>);</span><br><span class="line">String NHtml  = weatherHtml.substring(weatherHtml.lastIndexOf(<span class="string">"&amp;lt;li"</span>),weatherHtml.lastIndexOf(<span class="string">"&amp;lt;/li&amp;gt;"</span>)+<span class="number">5</span>);</span><br><span class="line">Document doc = Jsoup.parse(THtml);</span><br><span class="line">String dw = doc.select(<span class="string">"p"</span>).first().text();<span class="comment">//dw = day weather</span></span><br><span class="line">String dt = doc.select(<span class="string">"p"</span>).get(<span class="number">1</span>).text(); <span class="comment">//da = day temperature</span></span><br><span class="line">Document doc1 = Jsoup.parse(NHtml);</span><br><span class="line">String nw = doc1.select(<span class="string">"p"</span>).first().text();<span class="comment">//night weather</span></span><br><span class="line">String nt = doc1.select(<span class="string">"p"</span>).get(<span class="number">1</span>).text();<span class="comment">//night temperature</span></span><br><span class="line">System.out.println(<span class="string">"city："</span>+city);</span><br><span class="line"><span class="keyword">if</span>(dw.contains(<span class="string">"，"</span>))&#123;</span><br><span class="line">    dw = dw.substring(<span class="number">0</span>,dw.indexOf(<span class="string">"，"</span>)); <span class="comment">//把天气中   阴，有雾霾  这样的 ，后面的内容去掉，让白天的天气和完善的天气组合起来形成一天的天气</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(nw.contains(<span class="string">"，"</span>))&#123;</span><br><span class="line">    nw = nw.substring(<span class="number">0</span>,nw.indexOf(<span class="string">"，"</span>)); <span class="comment">//把天气中   阴，有雾霾  这样的 ，后面的内容去掉，让白天的天气和完善的天气组合起来形成一天的天气</span></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"weather："</span>+dw+<span class="string">"-"</span>+nw);</span><br><span class="line">System.out.println(<span class="string">"temperature："</span>+(dt+<span class="string">"~"</span>+nt).replaceAll(<span class="string">"\\s*"</span>, <span class="string">""</span>).replaceAll(<span class="string">"°C"</span>,<span class="string">"℃"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>5. 得到的结果如图显示</p><p><img src="/images/post_images/2015-03-06-weather-forecast-interface-03.png" alt="Alt text"></p><p>6. 4月5号对此篇文章中稍作优化，但是有时候还是会有不美观的地方(网络/解析等原因)。代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> name.zhoufei.weather;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> name.zhoufei.util.HttpPost;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.Jsoup;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Document;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by ZhouFei on 2015/3/6.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Weather</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"> getWeather1D(getAreaId());</span><br><span class="line"> getWeather(getAreaId());</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据网络请求获得IP地址，同时得到该网关下的城市ID</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 城市ID</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getAreaId</span><span class="params">()</span></span>&#123;</span><br><span class="line"> String result = HttpPost.sendGET(<span class="string">"http://61.4.185.48:81/g/"</span>,<span class="string">"UTF-8"</span>);</span><br><span class="line"> <span class="keyword">return</span> result.substring(result.indexOf(<span class="string">"id="</span>)+<span class="number">3</span>,result.indexOf(<span class="string">";if"</span>));</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 调用百度搜索"上海天气"第一条，进去http://www.weather.com.cn/weather1d/101020100.shtml 进行网页抓取（本吊初级程序员）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> areaId 城市ID</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getWeather1D</span><span class="params">(String areaId)</span></span>&#123;</span><br><span class="line"> String URL = <span class="string">"http://www.weather.com.cn/weather1d/"</span>+areaId+<span class="string">".shtml"</span>;</span><br><span class="line"> String content = HttpPost.sendGET(URL, <span class="string">"utf8"</span>);</span><br><span class="line"> String weatherHtml = content.substring(content.indexOf(<span class="string">"&amp;lt;!-- 今天明天预报 begin--&amp;gt;"</span>)+<span class="number">20</span>,content.indexOf(<span class="string">"&amp;lt;!-- 今天明天预报 end--&amp;gt;"</span>));</span><br><span class="line"> content = content.replaceAll(<span class="string">"\\s*"</span>, <span class="string">""</span>);</span><br><span class="line"> String city = content.substring(content.indexOf(<span class="string">"&amp;lt;h1&amp;gt;城区&amp;lt;/h1&amp;gt;&amp;lt;h3&amp;gt;"</span>)+<span class="number">15</span>,content.indexOf(<span class="string">"&amp;lt;/h3&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!--嵌套周边景点divbegin--&amp;gt;"</span>));</span><br><span class="line"> String THtml = weatherHtml.substring(weatherHtml.indexOf(<span class="string">"&amp;lt;li"</span>),weatherHtml.indexOf(<span class="string">"&amp;lt;/li&amp;gt;"</span>)+<span class="number">5</span>);</span><br><span class="line"> String NHtml = weatherHtml.substring(weatherHtml.lastIndexOf(<span class="string">"&amp;lt;li"</span>),weatherHtml.lastIndexOf(<span class="string">"&amp;lt;/li&amp;gt;"</span>)+<span class="number">5</span>);</span><br><span class="line"> Document doc = Jsoup.parse(THtml);</span><br><span class="line"> String dw = doc.select(<span class="string">"p"</span>).first().text();<span class="comment">//dw = day weather</span></span><br><span class="line"> String dt = doc.select(<span class="string">"p"</span>).get(<span class="number">1</span>).text(); <span class="comment">//da = day temperature</span></span><br><span class="line"> Document doc1 = Jsoup.parse(NHtml);</span><br><span class="line"> String nw = doc1.select(<span class="string">"p"</span>).first().text();<span class="comment">//night weather</span></span><br><span class="line"> String nt = doc1.select(<span class="string">"p"</span>).get(<span class="number">1</span>).text();<span class="comment">//night temperature</span></span><br><span class="line"> System.out.println(<span class="string">"city："</span>+city);</span><br><span class="line"> <span class="keyword">if</span>(dw.contains(<span class="string">"，"</span>))&#123;</span><br><span class="line"> dw = dw.substring(<span class="number">0</span>,dw.indexOf(<span class="string">"，"</span>)); <span class="comment">//把天气中 阴，有雾霾 这样的 ，后面的内容去掉，让白天的天气和完善的天气组合起来形成一天的天气</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">if</span>(nw.contains(<span class="string">"，"</span>))&#123;</span><br><span class="line"> nw = nw.substring(<span class="number">0</span>,nw.indexOf(<span class="string">"，"</span>)); <span class="comment">//把天气中 阴，有雾霾 这样的 ，后面的内容去掉，让白天的天气和完善的天气组合起来形成一天的天气</span></span><br><span class="line"> &#125;</span><br><span class="line"> System.out.println(<span class="string">"weather："</span>+dw+<span class="string">"-"</span>+nw);</span><br><span class="line"> System.out.println(<span class="string">"temperature："</span>+(dt+<span class="string">"~"</span>+nt).replaceAll(<span class="string">"\\s*"</span>, <span class="string">""</span>).replaceAll(<span class="string">"°C"</span>,<span class="string">"℃"</span>));</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 调用百度搜索"上海天气"第一条，进去http://www.weather.com.cn/weather1d/101020100.shtml，</span></span><br><span class="line"><span class="comment"> * 然后点击七天预报 进入http://www.weather.com.cn/weather/101020100.shtml 进行网页抓取</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> areaId 城市ID</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getWeather</span><span class="params">(String areaId)</span></span>&#123;</span><br><span class="line"> String URL = <span class="string">"http://www.weather.com.cn/weather/"</span>+areaId+<span class="string">".shtml"</span>;</span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line"> Document doc = Jsoup.connect(URL).get();</span><br><span class="line"> <span class="comment">//System.out.println(doc);</span></span><br><span class="line"> System.out.println(<span class="string">"找到ID为7d的NODE："</span>+doc.getElementById(<span class="string">"7d"</span>).select(<span class="string">"li"</span>).first());</span><br><span class="line"> System.out.println(<span class="string">"城市："</span>+doc.getElementsByClass(<span class="string">"cityName"</span>).select(<span class="string">"h3"</span>).get(<span class="number">0</span>).text());</span><br><span class="line"> String weather = doc.getElementById(<span class="string">"7d"</span>).select(<span class="string">"p"</span>).first().text();</span><br><span class="line"> System.out.println(<span class="string">"天气："</span>+weather);</span><br><span class="line"> String t1 = doc.getElementById(<span class="string">"7d"</span>).select(<span class="string">"span"</span>).get(<span class="number">0</span>).text();</span><br><span class="line"> <span class="comment">//System.out.println(t1);</span></span><br><span class="line"> String t2 = doc.getElementById(<span class="string">"7d"</span>).select(<span class="string">"span"</span>).get(<span class="number">1</span>).text();</span><br><span class="line"> <span class="comment">//System.out.println(t2);</span></span><br><span class="line"> String temp = <span class="keyword">null</span>;</span><br><span class="line"> <span class="keyword">if</span>(t1==<span class="keyword">null</span>)&#123;</span><br><span class="line"> temp=t2+<span class="string">"℃"</span>;</span><br><span class="line"> &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"> temp=t1+<span class="string">"℃~"</span>+t2+<span class="string">"℃"</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> System.out.println(<span class="string">"温度："</span>+temp);</span><br><span class="line"> &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"> e.printStackTrace();</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7.测试如下图,另外可以使用UC首页和中国天气网合作的接口，也可以使用百度等一切天气接口，为了更加的稳定，建议使用付费接口。</p><p><img src="/images/post_images/2015-03-06-weather-forecast-interface-04.png" alt="Alt text"></p><table><thead><tr><th>编号</th><th>中文名称</th><th>英文名称</th></tr></thead><tbody><tr><td>00</td><td>晴</td><td>Sunny</td></tr><tr><td>01</td><td>多云</td><td>Cloudy</td></tr><tr><td>02</td><td>阴</td><td>Overcast</td></tr><tr><td>03</td><td>阵雨</td><td>Shower</td></tr><tr><td>04</td><td>雷阵雨</td><td>Thundershower</td></tr><tr><td>05</td><td>雷阵雨伴有冰雹</td><td>Thundershower with hail</td></tr><tr><td>06</td><td>雨夹雪</td><td>Sleet</td></tr><tr><td>07</td><td>小雨</td><td>Light rain</td></tr><tr><td>08</td><td>中雨</td><td>Moderate rain</td></tr><tr><td>09</td><td>大雨</td><td>Heavy rain</td></tr><tr><td>10</td><td>暴雨</td><td>Storm</td></tr><tr><td>11</td><td>大暴雨</td><td>Heavy storm</td></tr><tr><td>12</td><td>特大暴雨</td><td>Severe storm</td></tr><tr><td>13</td><td>阵雪</td><td>Snow flurry</td></tr><tr><td>14</td><td>小雪</td><td>Light snow</td></tr><tr><td>15</td><td>中雪</td><td>Moderate snow</td></tr><tr><td>16</td><td>大雪</td><td>Heavy snow</td></tr><tr><td>17</td><td>暴雪</td><td>Snowstorm</td></tr><tr><td>18</td><td>雾</td><td>Foggy</td></tr><tr><td>19</td><td>冻雨</td><td>Ice rain</td></tr><tr><td>20</td><td>沙尘暴</td><td>Dust Storm</td></tr><tr><td>21</td><td>小到中雨</td><td>Light to moderate rain</td></tr><tr><td>22</td><td>中到大雨</td><td>Moderate to heavy rain</td></tr><tr><td>23</td><td>大到暴雨</td><td>Heavy rain to storm</td></tr><tr><td>24</td><td>暴雨到大暴雨</td><td>Storm to heavy storm</td></tr><tr><td>25</td><td>大暴雨到特大暴雨</td><td>Heavy to severe storm</td></tr><tr><td>26</td><td>小到中雪</td><td>Light to moderate snow</td></tr><tr><td>27</td><td>中到大雪</td><td>Moderate to heavy snow</td></tr><tr><td>28</td><td>大到暴雪</td><td>Heavy snow to snowstorm</td></tr><tr><td>29</td><td>浮尘</td><td>Dust</td></tr><tr><td>30</td><td>扬沙</td><td>Sandv</td></tr><tr><td>31</td><td>强沙尘暴</td><td>Sandstormv</td></tr><tr><td>32</td><td>霾</td><td>Haze</td></tr><tr><td>33</td><td>无</td><td>Unknown</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近使用天气预报接口很不如意啊，稳定的要收费，免费的又不稳定, 记录下自己的做法……&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1. 根据网络请求获得当前城市的ID,方法,额,百度吧.或者直接搜天气咯.&lt;/p&gt;
&lt;p&gt;2. 根据百度搜索天气预报第一条获得的数据，进去&lt;a href=&quot;http://www.weather.com.cn/weather1d/101020100.shtml&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.weather.com.cn/weather1d/101020100.shtml&lt;/a&gt;进行网页抓取&lt;/p&gt;
    
    </summary>
    
      <category term="Coding" scheme="https://note.pin.bo/categories/Coding/"/>
    
    
      <category term="Weather" scheme="https://note.pin.bo/tags/Weather/"/>
    
  </entry>
  
  <entry>
    <title>Git学习笔记</title>
    <link href="https://note.pin.bo/2014-11-16-git-note/"/>
    <id>https://note.pin.bo/2014-11-16-git-note/</id>
    <published>2014-11-16T03:13:00.000Z</published>
    <updated>2017-12-11T07:23:59.051Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>git学习笔记</p></blockquote><a id="more"></a><h4 id="git-branch-a"><a href="#git-branch-a" class="headerlink" title="git branch -a"></a>git branch -a</h4><h4 id="git-branch-r"><a href="#git-branch-r" class="headerlink" title="git branch -r"></a>git branch -r</h4><h4 id="git-checkout-branchName"><a href="#git-checkout-branchName" class="headerlink" title="git checkout branchName"></a>git checkout branchName</h4><h4 id="git-branch-branchName"><a href="#git-branch-branchName" class="headerlink" title="git branch branchName"></a>git branch branchName</h4><h4 id="git-checkout-b-branchName"><a href="#git-checkout-b-branchName" class="headerlink" title="git checkout -b branchName"></a>git checkout -b branchName</h4><h4 id="git-branch-vv"><a href="#git-branch-vv" class="headerlink" title="git branch -vv"></a>git branch -vv</h4><p>git branch -vv 关联关系</p><h4 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout ."></a>git checkout .</h4><p>git checkout .  把本地代码重置</p><h4 id="git-log-p-n"><a href="#git-log-p-n" class="headerlink" title="git log -p -n"></a>git log -p -n</h4><p>git log -p -n  其中n为数字 查看最近n次提交的记录</p><p>–oneline- 压缩模式，在每个提交的旁边显示经过精简的提交哈希码和提交信息，以一行显示。</p><p>–graph- 图形模式，使用该选项会在输出的左边绘制一张基于文本格式的历史信息表示图。如果你查看的是单个分支的历史记录的话，该选项无效。</p><p>–all- 显示所有分支的历史记录</p><h4 id="git-reflog"><a href="#git-reflog" class="headerlink" title="git reflog"></a>git reflog</h4><p>git reflog 可以查看被重置丢失的提交</p><h4 id="git-rebase"><a href="#git-rebase" class="headerlink" title="git rebase"></a>git rebase</h4><p>git rebase -i HEAD~[n]  n代表最近n次的提交</p><h4 id="git-branch-d-D-branchName"><a href="#git-branch-d-D-branchName" class="headerlink" title="git branch -d/D branchName"></a>git branch -d/D branchName</h4><p>git branch -d/D branchName 删除本地分支</p><h4 id="git-push-origin-branchName"><a href="#git-push-origin-branchName" class="headerlink" title="git push origin :branchName"></a>git push origin :branchName</h4><p>git push origin :branchName 删除远程分支</p><h4 id="git-stash"><a href="#git-stash" class="headerlink" title="git stash"></a>git stash</h4><h4 id="git-stash-pop"><a href="#git-stash-pop" class="headerlink" title="git stash pop"></a>git stash pop</h4>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;git学习笔记&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Coding" scheme="https://note.pin.bo/categories/Coding/"/>
    
    
      <category term="Git" scheme="https://note.pin.bo/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>程序员必须掌握的八大排序算法</title>
    <link href="https://note.pin.bo/2014-10-15-sort-algorithm-java/"/>
    <id>https://note.pin.bo/2014-10-15-sort-algorithm-java/</id>
    <published>2014-10-15T03:13:00.000Z</published>
    <updated>2019-07-25T03:17:45.302Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>分类：</p><ol><li>插入排序（直接插入排序、希尔排序）</li><li>交换排序（冒泡排序、快速排序）</li><li>选择排序（直接选择排序、堆排序）</li><li>归并排序</li><li>分配排序（基数排序）</li></ol><p>所需辅助空间最多：归并排序<br>所需辅助空间最少：堆排序<br>平均速度最快：快速排序</p><p>不稳定：快速排序，希尔排序，堆排序。</p></blockquote><a id="more"></a><h3 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h3><p>在要排序的一组数中，假设前面(n-1)[n&gt;=2] 个数已经是排好顺序的，现在要把第n个数插到前面的有序数中，使得这个数也是排好顺序的。如此反复循环，直到全部排好顺序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> name.zhoufei.helloworld.sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 排序算法: 直接插入排序</span></span><br><span class="line"><span class="comment"> * 基本思想: 在要排序的一组数中，假设前面(n-1)[n&gt;=2] 个数已经是排好顺序的，现在要把第n个数插到前面的有序数中，</span></span><br><span class="line"><span class="comment"> *          使得这n个数也是排好顺序的。如此反复循环，直到全部排好顺序。</span></span><br><span class="line"><span class="comment"> * Created by phil.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InsertSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] a=&#123;<span class="number">49</span>,<span class="number">38</span>,<span class="number">65</span>,<span class="number">97</span>,<span class="number">76</span>,<span class="number">13</span>,<span class="number">27</span>,<span class="number">49</span>,<span class="number">78</span>,<span class="number">34</span>,<span class="number">12</span>,<span class="number">64</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">62</span>,<span class="number">99</span>,<span class="number">98</span>,<span class="number">54</span>,<span class="number">56</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">23</span>,<span class="number">34</span>,<span class="number">15</span>,<span class="number">35</span>,<span class="number">25</span>,<span class="number">53</span>,<span class="number">51</span>&#125;;</span><br><span class="line">insertSort(a);</span><br><span class="line">System.out.println(Arrays.toString(a));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span>[] a)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> temp;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;a.length;i++)&#123;</span><br><span class="line">    <span class="keyword">int</span> j=i-<span class="number">1</span>;</span><br><span class="line">    temp=a[i];</span><br><span class="line">    <span class="keyword">for</span>(;j&gt;=<span class="number">0</span>&amp;&amp;temp&lt;a[j];j--)&#123;</span><br><span class="line">a[j+<span class="number">1</span>]=a[j];  <span class="comment">//将大于temp的值整体后移一个单位</span></span><br><span class="line">    &#125;</span><br><span class="line">    a[j+<span class="number">1</span>]=temp;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="希尔排序-最小增量排序"><a href="#希尔排序-最小增量排序" class="headerlink" title="希尔排序(最小增量排序)"></a>希尔排序(最小增量排序)</h3><p>算法先将要排序的一组数按某个增量d（n/2,n为要排序数的个数）分成若干组，每组中记录的下标相差d.对每组中全部元素进行直接插入排序，然后再用一个较小的增量（d/2）对它进行分组，在每组中再进行直接插入排序。当增量减到1时，进行直接插入排序后，排序完成。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> name.zhoufei.helloworld.sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 排序算法: 希尔排序（最小增量排序）</span></span><br><span class="line"><span class="comment"> * 基本思想: 算法先将要排序的一组数按某个增量d（n/2,n为要排序数的个数）分成若干组，</span></span><br><span class="line"><span class="comment"> *          每组中记录的下标相差d.对每组中全部元素进行直接插入排序，</span></span><br><span class="line"><span class="comment"> *          然后再用一个较小的增量（d/2）对它进行分组，在每组中再进行直接插入排序。</span></span><br><span class="line"><span class="comment"> *          当增量减到1时，进行直接插入排序后，排序完成。</span></span><br><span class="line"><span class="comment"> * Created by phil.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShellSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] a=&#123;<span class="number">49</span>,<span class="number">38</span>,<span class="number">65</span>,<span class="number">97</span>,<span class="number">76</span>,<span class="number">13</span>,<span class="number">27</span>,<span class="number">49</span>,<span class="number">78</span>,<span class="number">34</span>,<span class="number">12</span>,<span class="number">64</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">62</span>,<span class="number">99</span>,<span class="number">98</span>,<span class="number">54</span>,<span class="number">56</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">23</span>,<span class="number">34</span>,<span class="number">15</span>,<span class="number">35</span>,<span class="number">25</span>,<span class="number">53</span>,<span class="number">51</span>&#125;;</span><br><span class="line">shellSort(a);</span><br><span class="line">System.out.println(Arrays.toString(a));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shellSort</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</span><br><span class="line"><span class="keyword">double</span> d1 = a.length;</span><br><span class="line"><span class="keyword">int</span> temp;</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">    d1 = Math.ceil(d1 / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">int</span> d = (<span class="keyword">int</span>) d1;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; d; x++) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = x + d; i &lt; a.length; i += d) &#123;</span><br><span class="line">    <span class="keyword">int</span> j = i - d;</span><br><span class="line">    temp = a[i];</span><br><span class="line">    <span class="keyword">for</span> (; j &gt;= <span class="number">0</span> &amp;&amp; temp &lt; a[j]; j -= d) &#123;</span><br><span class="line">        a[j + d] = a[j];</span><br><span class="line">    &#125;</span><br><span class="line">    a[j + d] = temp;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (d == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="简单选择排序"><a href="#简单选择排序" class="headerlink" title="简单选择排序"></a>简单选择排序</h3><p>在要排序的一组数中，选出最小的一个数与第一个位置的数交换；然后在剩下的数当中再找最小的与第二个位置的数交换，如此循环到倒数第二个数和最后一个数比较为止。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> name.zhoufei.helloworld.sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 排序算法: 简单选择排序</span></span><br><span class="line"><span class="comment"> * 基本思想: 在要排序的一组数中，选出最小的一个数与第一个位置的数交换；</span></span><br><span class="line"><span class="comment"> *          然后在剩下的数当中再找最小的与第二个位置的数交换，如此循环到倒数第二个数和最后一个数比较为止。</span></span><br><span class="line"><span class="comment"> * Created by phil.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SelectSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] a=&#123;<span class="number">49</span>,<span class="number">38</span>,<span class="number">65</span>,<span class="number">97</span>,<span class="number">76</span>,<span class="number">13</span>,<span class="number">27</span>,<span class="number">49</span>,<span class="number">78</span>,<span class="number">34</span>,<span class="number">12</span>,<span class="number">64</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">62</span>,<span class="number">99</span>,<span class="number">98</span>,<span class="number">54</span>,<span class="number">56</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">23</span>,<span class="number">34</span>,<span class="number">15</span>,<span class="number">35</span>,<span class="number">25</span>,<span class="number">53</span>,<span class="number">51</span>&#125;;</span><br><span class="line">selectSort(a);</span><br><span class="line">System.out.println(Arrays.toString(a));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectSort</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> position;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">    <span class="keyword">int</span> j = i + <span class="number">1</span>;</span><br><span class="line">    position = i;</span><br><span class="line">    <span class="keyword">int</span> temp = a[i];</span><br><span class="line">    <span class="keyword">for</span> (; j &lt; a.length; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (a[j] &lt; temp) &#123;</span><br><span class="line">    temp = a[j];</span><br><span class="line">    position = j;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    a[position] = a[i];</span><br><span class="line">    a[i] = temp;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><p>堆排序是一种树形选择排序，是对直接选择排序的有效改进。</p><p>堆的定义如下：具有n个元素的序列（h1,h2,…,hn),当且仅当满足（hi&gt;=h2i,hi&gt;=2i+1）或（hi&lt;=h2i,hi&lt;=2i+1）(i=1,2,…,n/2)时称之为堆。在这里只讨论满足前者条件的堆。由堆的定义可以看出，堆顶元素（即第一个元素）必为最大项（大顶堆）。完全二叉树可以很直观地表示堆的结构。堆顶为根，其它为左子树、右子树。初始时把要排序的数的序列看作是一棵顺序存储的二叉树，调整它们的存储序，使之成为一个堆，这时堆的根节点的数最大。然后将根节点与堆的最后一个节点交换。然后对前面(n-1)个数重新调整使之成为堆。依此类推，直到只有两个节点的堆，并对它们作交换，最后得到有n个节点的有序序列。从算法描述来看，堆排序需要两个过程，一是建立堆，二是堆顶与堆的最后一个元素交换位置。所以堆排序有两个函数组成。一是建堆的渗透函数，二是反复调用渗透函数实现排序的函数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> name.zhoufei.helloworld.sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 排序算法: 堆排序</span></span><br><span class="line"><span class="comment"> * 基本思想: 堆排序是一种树形选择排序，是对直接选择排序的有效改进。</span></span><br><span class="line"><span class="comment"> *          堆的定义如下：具有n个元素的序列（h1,h2,…,hn),当且仅当满足</span></span><br><span class="line"><span class="comment"> *          （hi&gt;=h2i,hi&gt;=2i+1）或（hi&lt;=h2i,hi&lt;=2i+1）(i=1,2,…,n/2)时称之为堆。</span></span><br><span class="line"><span class="comment"> *          在这里只讨论满足前者条件的堆。由堆的定义可以看出，堆顶元素（即第一个元素）必为最大项（大顶堆）。</span></span><br><span class="line"><span class="comment"> *          完全二叉树可以很直观地表示堆的结构。堆顶为根，其它为左子树、右子树。</span></span><br><span class="line"><span class="comment"> *          初始时把要排序的数的序列看作是一棵顺序存储的二叉树，调整它们的存储序，</span></span><br><span class="line"><span class="comment"> *          使之成为一个堆，这时堆的根节点的数最大。然后将根节点与堆的最后一个节点交换。</span></span><br><span class="line"><span class="comment"> *          然后对前面(n-1)个数重新调整使之成为堆。依此类推，直到只有两个节点的堆，并对它们作交换，</span></span><br><span class="line"><span class="comment"> *          最后得到有n个节点的有序序列。从算法描述来看，堆排序需要两个过程，一是建立堆，</span></span><br><span class="line"><span class="comment"> *          二是堆顶与堆的最后一个元素交换位置。所以堆排序有两个函数组成。一是建堆的渗透函数，</span></span><br><span class="line"><span class="comment"> *          二是反复调用渗透函数实现排序的函数。</span></span><br><span class="line"><span class="comment"> * Created by phil.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeapSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] a=&#123;<span class="number">49</span>,<span class="number">38</span>,<span class="number">65</span>,<span class="number">97</span>,<span class="number">76</span>,<span class="number">13</span>,<span class="number">27</span>,<span class="number">49</span>,<span class="number">78</span>,<span class="number">34</span>,<span class="number">12</span>,<span class="number">64</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">62</span>,<span class="number">99</span>,<span class="number">98</span>,<span class="number">54</span>,<span class="number">56</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">23</span>,<span class="number">34</span>,<span class="number">15</span>,<span class="number">35</span>,<span class="number">25</span>,<span class="number">53</span>,<span class="number">51</span>&#125;;</span><br><span class="line">heapSort(a);</span><br><span class="line">System.out.println(Arrays.toString(a));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">heapSort</span><span class="params">(<span class="keyword">int</span>[] a)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> arrayLength=a.length;</span><br><span class="line"><span class="comment">//循环建堆</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arrayLength-<span class="number">1</span>;i++)&#123;</span><br><span class="line">    <span class="comment">//建堆</span></span><br><span class="line">    buildMaxHeap(a,arrayLength-<span class="number">1</span>-i);</span><br><span class="line">    <span class="comment">//交换堆顶和最后一个元素</span></span><br><span class="line">    swap(a,<span class="number">0</span>,arrayLength-<span class="number">1</span>-i);</span><br><span class="line">    System.out.println(Arrays.toString(a));</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] data, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> tmp=data[i];</span><br><span class="line">data[i]=data[j];</span><br><span class="line">data[j]=tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对data数组从0到lastIndex建大顶堆</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">buildMaxHeap</span><span class="params">(<span class="keyword">int</span>[] data, <span class="keyword">int</span> lastIndex)</span> </span>&#123;</span><br><span class="line"><span class="comment">//从lastIndex处节点（最后一个节点）的父节点开始</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=(lastIndex-<span class="number">1</span>)/<span class="number">2</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">    <span class="comment">//k保存正在判断的节点</span></span><br><span class="line">    <span class="keyword">int</span> k=i;</span><br><span class="line">    <span class="comment">//如果当前k节点的子节点存在</span></span><br><span class="line">    <span class="keyword">while</span>(k*<span class="number">2</span>+<span class="number">1</span>&lt;=lastIndex)&#123;</span><br><span class="line"><span class="comment">//k节点的左子节点的索引</span></span><br><span class="line"><span class="keyword">int</span> biggerIndex=<span class="number">2</span>*k+<span class="number">1</span>;</span><br><span class="line"><span class="comment">//如果biggerIndex小于lastIndex，即biggerIndex+1代表的k节点的右子节点存在</span></span><br><span class="line"><span class="keyword">if</span>(biggerIndex&lt;lastIndex)&#123;</span><br><span class="line">    <span class="comment">//若果右子节点的值较大</span></span><br><span class="line">    <span class="keyword">if</span>(data[biggerIndex]&lt;data[biggerIndex+<span class="number">1</span>])&#123;</span><br><span class="line">        <span class="comment">//biggerIndex总是记录较大子节点的索引</span></span><br><span class="line">        biggerIndex++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果k节点的值小于其较大的子节点的值</span></span><br><span class="line"><span class="keyword">if</span>(data[k]&lt;data[biggerIndex])&#123;</span><br><span class="line">    <span class="comment">//交换他们</span></span><br><span class="line">    swap(data,k,biggerIndex);</span><br><span class="line">    <span class="comment">//将biggerIndex赋予k，开始while循环的下一次循环，重新保证k节点的值大于其左右子节点的值</span></span><br><span class="line">    k=biggerIndex;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>在要排序的一组数中，对当前还未排好序的范围内的全部数，自上而下对相邻的两个数依次进行比较和调整，让较大的数往下沉，较小的往上冒。即：每当两相邻的数比较后发现它们的排序与排序要求相反时，就将它们互换。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> name.zhoufei.helloworld.sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 排序算法: 冒泡排序</span></span><br><span class="line"><span class="comment"> * 基本思想: 在要排序的一组数中，对当前还未排好序的范围内的全部数，自上而下对相邻的两个数依次进行比较和调整，</span></span><br><span class="line"><span class="comment"> *          让较大的数往下沉，较小的往上冒。即：每当两相邻的数比较后发现它们的排序与排序要求相反时，就将它们互换。</span></span><br><span class="line"><span class="comment"> * Created by phil.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BubbleSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] a=&#123;<span class="number">49</span>,<span class="number">38</span>,<span class="number">65</span>,<span class="number">97</span>,<span class="number">76</span>,<span class="number">13</span>,<span class="number">27</span>,<span class="number">49</span>,<span class="number">78</span>,<span class="number">34</span>,<span class="number">12</span>,<span class="number">64</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">62</span>,<span class="number">99</span>,<span class="number">98</span>,<span class="number">54</span>,<span class="number">56</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">23</span>,<span class="number">34</span>,<span class="number">15</span>,<span class="number">35</span>,<span class="number">25</span>,<span class="number">53</span>,<span class="number">51</span>&#125;;</span><br><span class="line">bubbleSort(a);</span><br><span class="line">System.out.println(Arrays.toString(a));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] a)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> temp;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;a.length-<span class="number">1</span>-i;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[j]&gt;a[j+<span class="number">1</span>])&#123;</span><br><span class="line">    temp=a[j];</span><br><span class="line">    a[j]=a[j+<span class="number">1</span>];</span><br><span class="line">    a[j+<span class="number">1</span>]=temp;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>选择一个基准元素,通常选择第一个元素或者最后一个元素,通过一趟扫描，将待排序列分成两部分,一部分比基准元素小,一部分大于等于基准元素,此时基准元素在其排好序后的正确位置,然后再用同样的方法递归地排序划分的两部分。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> name.zhoufei.helloworld.sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 排序算法: 快速排序</span></span><br><span class="line"><span class="comment"> * 基本思想: 选择一个基准元素,通常选择第一个元素或者最后一个元素,通过一趟扫描，将待排序列分成两部分,</span></span><br><span class="line"><span class="comment"> *          一部分比基准元素小,一部分大于等于基准元素,此时基准元素在其排好序后的正确位置,</span></span><br><span class="line"><span class="comment"> *          然后再用同样的方法递归地排序划分的两部分。</span></span><br><span class="line"><span class="comment"> * Created by phil on 16-8-6.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] a=&#123;<span class="number">49</span>,<span class="number">38</span>,<span class="number">65</span>,<span class="number">97</span>,<span class="number">76</span>,<span class="number">13</span>,<span class="number">27</span>,<span class="number">49</span>,<span class="number">78</span>,<span class="number">34</span>,<span class="number">12</span>,<span class="number">64</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">62</span>,<span class="number">99</span>,<span class="number">98</span>,<span class="number">54</span>,<span class="number">56</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">23</span>,<span class="number">34</span>,<span class="number">15</span>,<span class="number">35</span>,<span class="number">25</span>,<span class="number">53</span>,<span class="number">51</span>&#125;;</span><br><span class="line">quickSort(a,<span class="number">0</span>, a.length - <span class="number">1</span>);</span><br><span class="line">System.out.println(Arrays.toString(a));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMiddle</span><span class="params">(<span class="keyword">int</span>[] list, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> tmp =list[low];    <span class="comment">//数组的第一个作为中轴</span></span><br><span class="line"><span class="keyword">while</span> (low &lt; high)&#123;</span><br><span class="line">    <span class="keyword">while</span> (low &lt; high&amp;&amp; list[high] &gt;= tmp) &#123;</span><br><span class="line">high--;</span><br><span class="line">    &#125;</span><br><span class="line">    list[low] =list[high];   <span class="comment">//比中轴小的记录移到低端</span></span><br><span class="line">    <span class="keyword">while</span> (low &lt; high&amp;&amp; list[low] &lt;= tmp) &#123;</span><br><span class="line">low++;</span><br><span class="line">    &#125;</span><br><span class="line">    list[high] =list[low];   <span class="comment">//比中轴大的记录移到高端</span></span><br><span class="line">&#125;</span><br><span class="line">list[low] = tmp;              <span class="comment">//中轴记录到尾</span></span><br><span class="line"><span class="keyword">return</span> low;                   <span class="comment">//返回中轴的位置</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] list, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (low &lt; high)&#123;</span><br><span class="line">    <span class="keyword">int</span> middle =getMiddle(list, low, high);  <span class="comment">//将list数组进行一分为二</span></span><br><span class="line">    quickSort(list, low, middle - <span class="number">1</span>);       <span class="comment">//对低字表进行递归排序</span></span><br><span class="line">    quickSort(list,middle + <span class="number">1</span>, high);       <span class="comment">//对高字表进行递归排序</span></span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><p>归并（Merge）排序法是将两个（或两个以上）有序表合并成一个新的有序表，即把待排序序列分为若干个子序列，每个子序列是有序的。然后再把有序子序列合并为整体有序序列。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> name.zhoufei.helloworld.sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 排序算法: 归并排序</span></span><br><span class="line"><span class="comment"> * 基本思想: 归并（Merge）排序法是将两个（或两个以上）有序表合并成一个新的有序表，</span></span><br><span class="line"><span class="comment"> *          即把待排序序列分为若干个子序列，每个子序列是有序的。然后再把有序子序列合并为整体有序序列。</span></span><br><span class="line"><span class="comment"> * Created by phil.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] a=&#123;<span class="number">49</span>,<span class="number">38</span>,<span class="number">65</span>,<span class="number">97</span>,<span class="number">76</span>,<span class="number">13</span>,<span class="number">27</span>,<span class="number">49</span>,<span class="number">78</span>,<span class="number">34</span>,<span class="number">12</span>,<span class="number">64</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">62</span>,<span class="number">99</span>,<span class="number">98</span>,<span class="number">54</span>,<span class="number">56</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">23</span>,<span class="number">34</span>,<span class="number">15</span>,<span class="number">35</span>,<span class="number">25</span>,<span class="number">53</span>,<span class="number">51</span>&#125;;</span><br><span class="line">sort(a,<span class="number">0</span>,a.length-<span class="number">1</span>);</span><br><span class="line">System.out.println(Arrays.toString(a));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] data, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(left&lt;right)&#123;</span><br><span class="line">    <span class="comment">//找出中间索引</span></span><br><span class="line">    <span class="keyword">int</span> center=(left+right)/<span class="number">2</span>;</span><br><span class="line">    <span class="comment">//对左边数组进行递归</span></span><br><span class="line">    sort(data,left,center);</span><br><span class="line">    <span class="comment">//对右边数组进行递归</span></span><br><span class="line">    sort(data,center+<span class="number">1</span>,right);</span><br><span class="line">    <span class="comment">//合并</span></span><br><span class="line">    merge(data,left,center,right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] data, <span class="keyword">int</span> left, <span class="keyword">int</span> center, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> [] tmpArr=<span class="keyword">new</span> <span class="keyword">int</span>[data.length];</span><br><span class="line"><span class="keyword">int</span> mid=center+<span class="number">1</span>;</span><br><span class="line"><span class="comment">//third记录中间数组的索引</span></span><br><span class="line"><span class="keyword">int</span> third=left;</span><br><span class="line"><span class="keyword">int</span> tmp=left;</span><br><span class="line"><span class="keyword">while</span>(left&lt;=center&amp;&amp;mid&lt;=right)&#123;</span><br><span class="line">    <span class="comment">//从两个数组中取出最小的放入中间数组</span></span><br><span class="line">    <span class="keyword">if</span>(data[left]&lt;=data[mid])&#123;</span><br><span class="line">tmpArr[third++]=data[left++];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">tmpArr[third++]=data[mid++];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//剩余部分依次放入中间数组</span></span><br><span class="line"><span class="keyword">while</span>(mid&lt;=right)&#123;</span><br><span class="line">    tmpArr[third++]=data[mid++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(left&lt;=center)&#123;</span><br><span class="line">    tmpArr[third++]=data[left++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将中间数组中的内容复制回原数组</span></span><br><span class="line"><span class="keyword">while</span>(tmp&lt;=right)&#123;</span><br><span class="line">    data[tmp]=tmpArr[tmp++];</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Arrays.toString(data));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h3><p>将所有待比较数值（正整数）统一为同样的数位长度，数位较短的数前面补零。然后，从最低位开始，依次进行一次排序。这样从最低位排序一直到最高位排序完成以后,数列就变成一个有序序列。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> name.zhoufei.helloworld.sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 排序算法: 基数排序</span></span><br><span class="line"><span class="comment"> * 基本思想: 将所有待比较数值（正整数）统一为同样的数位长度，数位较短的数前面补零。</span></span><br><span class="line"><span class="comment"> *          然后，从最低位开始，依次进行一次排序。这样从最低位排序一直到最高位排序完成以后,数列就变成一个有序序列。</span></span><br><span class="line"><span class="comment"> * Created by phil.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RadixSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] a=&#123;<span class="number">49</span>,<span class="number">38</span>,<span class="number">65</span>,<span class="number">97</span>,<span class="number">76</span>,<span class="number">13</span>,<span class="number">27</span>,<span class="number">49</span>,<span class="number">78</span>,<span class="number">34</span>,<span class="number">12</span>,<span class="number">64</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">62</span>,<span class="number">99</span>,<span class="number">98</span>,<span class="number">54</span>,<span class="number">56</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">23</span>,<span class="number">34</span>,<span class="number">15</span>,<span class="number">35</span>,<span class="number">25</span>,<span class="number">53</span>,<span class="number">51</span>&#125;;</span><br><span class="line">sort(a);</span><br><span class="line">System.out.println(Arrays.toString(a));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] array)</span></span>&#123;</span><br><span class="line"><span class="comment">//首先确定排序的趟数;</span></span><br><span class="line"><span class="keyword">int</span> max=array[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;array.length;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(array[i]&gt;max)&#123;</span><br><span class="line">max=array[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> time=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//判断位数;</span></span><br><span class="line"><span class="keyword">while</span>(max&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    max/=<span class="number">10</span>;</span><br><span class="line">    time++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//建立10个队列;</span></span><br><span class="line">List&lt;ArrayList&lt;Integer&gt;&gt; queue = <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">    ArrayList&lt;Integer&gt; queue1=<span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">    queue.add(queue1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//进行time次分配和收集;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;time;i++)&#123;</span><br><span class="line">    <span class="comment">//分配数组元素;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;array.length;j++)&#123;</span><br><span class="line"><span class="comment">//得到数字的第time+1位数;</span></span><br><span class="line"><span class="keyword">int</span> x=array[j]%(<span class="keyword">int</span>)Math.pow(<span class="number">10</span>,i+<span class="number">1</span>)/(<span class="keyword">int</span>)Math.pow(<span class="number">10</span>, i);</span><br><span class="line">ArrayList&lt;Integer&gt; queue2= queue.get(x);</span><br><span class="line">queue2.add(array[j]);</span><br><span class="line">queue.set(x, queue2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> count=<span class="number">0</span>;<span class="comment">//元素计数器;</span></span><br><span class="line">    <span class="comment">//收集队列元素;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">10</span>;k++)&#123;</span><br><span class="line"><span class="keyword">while</span>(queue.get(k).size()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    ArrayList&lt;Integer&gt; queue3= queue.get(k);</span><br><span class="line">    array[count]=queue3.get(<span class="number">0</span>);</span><br><span class="line">    queue3.remove(<span class="number">0</span>);</span><br><span class="line">    count++;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;分类：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;插入排序（直接插入排序、希尔排序）&lt;/li&gt;
&lt;li&gt;交换排序（冒泡排序、快速排序）&lt;/li&gt;
&lt;li&gt;选择排序（直接选择排序、堆排序）&lt;/li&gt;
&lt;li&gt;归并排序&lt;/li&gt;
&lt;li&gt;分配排序（基数排序）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;所需辅助空间最多：归并排序&lt;br&gt;所需辅助空间最少：堆排序&lt;br&gt;平均速度最快：快速排序&lt;/p&gt;
&lt;p&gt;不稳定：快速排序，希尔排序，堆排序。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Coding" scheme="https://note.pin.bo/categories/Coding/"/>
    
    
      <category term="Sort" scheme="https://note.pin.bo/tags/Sort/"/>
    
      <category term="Algorithm" scheme="https://note.pin.bo/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu主题图标美化</title>
    <link href="https://note.pin.bo/2014-09-20-ubuntu-theme-icon/"/>
    <id>https://note.pin.bo/2014-09-20-ubuntu-theme-icon/</id>
    <published>2014-09-20T08:47:04.000Z</published>
    <updated>2017-02-20T04:39:19.215Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>对于那些想要一个易于使用的界面的用户，Ubuntu是一个很好的Linux发行版，并且对于一个Linux新手也可以说是最好的Linux发行版。不过这产生了一些副作用，那就是，对于界面和外观，Canonical公司已经为用户做了很多设定，尤其是Unity桌面环境。</p></blockquote><blockquote><p>然而这些不是一成不变的。下面是一些关于怎样让你更加舒心地使用Ubuntu的技巧。看过上面的截图中我对Ubuntu的设定，你可以看到我的的Unity桌面，相比于默认设定的桌面有何不同。</p></blockquote><p>首先来一张预览图,然后让我们分步来实现定制Ubuntu桌面。</p><p><img src="/images/post_images/2014-09-20-ubuntu-theme-icon-01.png" alt="桌面预览图"></p><a id="more"></a><p>1. 安装Unity Tweak Tool</p><p>在你能对Ubuntu外观做任何有效地修改之前，你不得不安装Unity Tweak Tool。这是一个Unity桌面环境下特殊设置管理软件，并且通过它你可以实现替换系统图标和主题。你可以从Ubuntu软件中心下载该软件，如果你更加偏爱terminal终端的话，你也可以使用下面的命令：</p><pre><code>sudo apt-get install unity-tweak-tool</code></pre><p>如果你正在使用Gnome桌面环境，那么你可能需要尝试Gnome Tweak Tool这款软件。你也可以从Ubuntu软件中心和使用以下命令来安装该软件：</p><pre><code>sudo apt-get install gnome-tweak-tool</code></pre><p>2. 安装GTK主题</p><p>对于Ubuntu有很多定制的主题，这些主题可以影响应用和窗口的外观。我正在使用的主题是Numix GTK+。你可以在<a href="http://numixproject.org/" target="_blank" rel="noopener">http://numixproject.org/</a>找到关于Numix主题和图标的更多信息。你可以通过打开终端并输入以下命令来安装Numix主题：</p><pre><code>sudo add-apt-repository ppa:numix/ppasudo apt-get update &amp;&amp; sudo apt-get install numix-gtk-theme</code></pre><p>为了使该主题生效，我们需要打开Unity Tweak Tool，选择“外观标题”下的“主题”选项，然后在“已有主题”一栏中选择该主题。只要相应的软件仓库名字一致，对于其他主题，你可以重复该过程来应用。你可以访问<a href="http://Gnome-Look.org" target="_blank" rel="noopener">http://Gnome-Look.org</a>获得更多的主题。另一个和Numix主题很相似的主题是Moka，你可以在<a href="http://mokaproject.com/" target="_blank" rel="noopener">http://mokaproject.com/</a>获得更多关于Moka主题的信息。</p><p>3. 安装图标</p><p>以上预览图中使用的图标是来自Numix主题的Numix圆形图标。你可以通过在终端输入以下命令来安装该图标集：</p><pre><code>sudo apt-add-repository ppa:numix/ppasudo apt-get updatesudo apt-get install numix-icon-theme-circle</code></pre><p>为了使该图标集生效，我们需要在Unity Tweak Tool中选择“图标”选项，然后选择该图标集。再一次声明，这个方法对于任何图标集是可行的。Moka也提供给你的桌面带来多彩的、一致性设计的图标集。</p><p>到此为止,我的桌面就安装好了,我尽量使用原生的,但是不满意其图标太丑,当然你可以再进行深入的定制.</p><p>4. 安装conky系统监视软件 如果你喜欢</p><p>Conky是一个轻量级桌面系统监视软件。该软件本身是非常简单的，不过它是可定制的，这样一来它就可以显示很多的有用的信息。你可以通过在终端输入以下命令来安装Conky：</p><pre><code>sudo apt-get install conky conky-all</code></pre><p>你将会需要curl这个软件，你可以通过以下这个命令来安装该软件：</p><pre><code>sudo apt-get install curl</code></pre><p>我使用的conky主题是<a href="http://zagortenay333.deviantart.com/art/Conky-Harmattan-426662366" target="_blank" rel="noopener">Harmattan</a>，它可以以15种不同的样式来显示时间、天气、以及系统进程。要安装该主题，你可以从<a href="http://www.deviantart.com/art/Conky-Harmattan-426662366" target="_blank" rel="noopener">deviantART</a>下载zip文件，然后解压。将.conky-weather文件夹和位于主题文件夹的.conkyrc文件（你可能需要按Ctrl+H来显示这些隐藏文件）移动到你的home文件夹。Conky有很多的主题。尝试这些主题，你所需要做的就是用所要使用主题的.conkyrc文件替换在home文件夹的.conkyrc文件。</p><p>5. 安装一些指示器程序 如果你喜欢</p><p>有很多第三方的指示器程序，通过这些程序你可以监视你的桌面信息，例如天气、系统性能等。我所使用的指示器程序相当简单。因为天气和系统性能已经在conky中显示，所以我没有安装这些指示器。不过你可以在终端输入以下命令来安装他们：</p><pre><code>sudo apt-get install indicator-weathersudo apt-get install indicator-multiload</code></pre><p>我所使用的两个指示器程序是大小写指示程序以及触摸板控制器，这是因为我的笔记本没有大小写指示灯和控制触摸板开关的热键。你可以通过以下命令来安装这两个软件：</p><pre><code>sudo add-apt-repository ppa:tsbarnes/indicator-keylocksudo add-apt-repository ppa:atareao/atareaosudo apt-get updatesudo apt-get install indicator-keylocksudo apt-get install touchpad-indicator</code></pre><p>你可能需要注销并重新登录来使用这些应用。</p><p>6. 通过Compiz设置管理器深度定制你的桌面 如果你喜欢</p><p>如果对于你来说Unity Tweak Tool不够强大，那么你可以尝试<a href="https://apps.ubuntu.com/cat/applications/compizconfig-settings-manager/" target="_blank" rel="noopener">Compiz</a>设置管理器.</p><p><strong>警告:</strong> </p><p>如果错误的设置被应用的话，Compiz设置管理器可能会损害到你的系统。所以使用时要格外小心。你可以看到Ubuntu系统中隐藏的各种设置。你可以在Ubuntu软件中心获取该软件或者终端输入以下命令来安装：</p><pre><code>sudo apt-get install compiz compizconfig-settings-manager compiz-fusion-plugins-extra compiz-fusion-plugins-main compiz-plugins</code></pre><p>7. 安装docky 如果你喜欢</p><pre><code>sudo add-apt-repository ppa:ricotz/dockysudo apt-get update    sudo apt-get install  docky</code></pre><p>装好自己设置咯,附上卸载…</p><pre><code>sudo apt-get remove docky</code></pre><p>现在你的Ubuntu桌面变得具有超棒了！所有的这些步骤都有成千上万种选择，所以折腾是无极限的。还在等什么？还不赶紧去享受你的新Ubuntu桌面！</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;对于那些想要一个易于使用的界面的用户，Ubuntu是一个很好的Linux发行版，并且对于一个Linux新手也可以说是最好的Linux发行版。不过这产生了一些副作用，那就是，对于界面和外观，Canonical公司已经为用户做了很多设定，尤其是Unity桌面环境。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;然而这些不是一成不变的。下面是一些关于怎样让你更加舒心地使用Ubuntu的技巧。看过上面的截图中我对Ubuntu的设定，你可以看到我的的Unity桌面，相比于默认设定的桌面有何不同。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先来一张预览图,然后让我们分步来实现定制Ubuntu桌面。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/post_images/2014-09-20-ubuntu-theme-icon-01.png&quot; alt=&quot;桌面预览图&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Tutorial" scheme="https://note.pin.bo/categories/Tutorial/"/>
    
    
      <category term="Ubuntu" scheme="https://note.pin.bo/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu安装QQ国际版wine-qqintl</title>
    <link href="https://note.pin.bo/2014-08-08-install-wine-qqintl/"/>
    <id>https://note.pin.bo/2014-08-08-install-wine-qqintl/</id>
    <published>2014-08-08T14:08:00.000Z</published>
    <updated>2017-02-20T04:39:29.850Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>wine-qqintl比wineqq2013sp6-20更好用,问题更少,Ubuntu 16.04运行良好.</p></blockquote><p>1. 下载wine-qqintl.zip压缩文件 <a href="http://pan.baidu.com/s/1bp6yQuj" target="_blank" rel="noopener">http://pan.baidu.com/s/1bp6yQuj</a></p><p>2. 解压后进入解压目录</p><p>3. 输入命令安装</p><pre><code>sudo dpkg -i font*sudp dpkg -i ttf*sudo dpkg -i win*sudo apt-get -f install</code></pre><a id="more"></a><p>4. 查看wine QQ的安装信息：</p><pre><code>sudo dpkg -l|grep qqsudo find / -name qq*</code></pre><p>5. 三种方式打开QQ</p><ul><li>打开终端输入命令<code>wine-qqintl</code>后回车.</li><li>按一下徽标键，在搜索框中输入QQ，找到QQ点击即可运行,如果找不到可以重启后重试.</li><li>进入默认启动路径为<code>/usr/share/applications/</code> 找到QQ international图标点击.</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;wine-qqintl比wineqq2013sp6-20更好用,问题更少,Ubuntu 16.04运行良好.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1. 下载wine-qqintl.zip压缩文件 &lt;a href=&quot;http://pan.baidu.com/s/1bp6yQuj&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://pan.baidu.com/s/1bp6yQuj&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2. 解压后进入解压目录&lt;/p&gt;
&lt;p&gt;3. 输入命令安装&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo dpkg -i font*
sudp dpkg -i ttf*
sudo dpkg -i win*
sudo apt-get -f install
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Tutorial" scheme="https://note.pin.bo/categories/Tutorial/"/>
    
    
      <category term="Ubuntu" scheme="https://note.pin.bo/tags/Ubuntu/"/>
    
      <category term="wine-qq" scheme="https://note.pin.bo/tags/wine-qq/"/>
    
  </entry>
  
  <entry>
    <title>IntelliJ IDEA 快捷键和设置</title>
    <link href="https://note.pin.bo/2014-07-22-idea-keymap/"/>
    <id>https://note.pin.bo/2014-07-22-idea-keymap/</id>
    <published>2014-07-21T18:08:00.000Z</published>
    <updated>2017-02-20T04:39:50.937Z</updated>
    
    <content type="html"><![CDATA[<h3 id="实用快捷键"><a href="#实用快捷键" class="headerlink" title="实用快捷键"></a>实用快捷键</h3><pre><code>Ctrl+/ 或 Ctrl+Shift+/ 注释（// 或者/*…*/ ）Ctrl+D 复制行Ctrl+X 删除行快速修复 alt+enter (modify/cast)代码提示 alt+/ctr+G 定位某一行Shift+F6 重构-重命名Ctrl+R 替换文本Ctrl+F 查找文本Ctrl+E 最近打开的文件Ctrl+J 自动代码组织导入 ctr+alt+O格式化代码 ctr+alt+L大小写转化 ctr+shift+U</code></pre><hr><a id="more"></a><h3 id="常用快捷键列表"><a href="#常用快捷键列表" class="headerlink" title="常用快捷键列表"></a>常用快捷键列表</h3><pre><code>Alt+回车 导入包,自动修正Ctrl+N   查找类Ctrl+Shift+N 查找文件Ctrl+Alt+L  格式化代码Ctrl+Alt+O 优化导入的类和包Alt+Insert 生成代码(如get,set方法,构造函数等)Ctrl+E或者Alt+Shift+C  最近更改的代码Ctrl+R 替换文本Ctrl+F 查找文本Ctrl+Shift+Space 自动补全代码Ctrl+空格 代码提示Ctrl+Alt+Space 类名或接口名提示Ctrl+P 方法参数提示Ctrl+Shift+Alt+N 查找类中的方法或变量Alt+Shift+C 对比最近修改的代码Shift+F6  重构-重命名Ctrl+Shift+先上键Ctrl+X 删除行Ctrl+D 复制行Ctrl+/ 或 Ctrl+Shift+/  注释（// 或者/*…*/ ）Ctrl+J  自动代码Ctrl+E 最近打开的文件Ctrl+H 显示类结构图Ctrl+Q 显示注释文档Alt+F1 查找代码所在位置Alt+1 快速打开或隐藏工程面板Ctrl+Alt+ left/right 返回至上次浏览的位置Alt+ left/right 切换代码视图Alt+ Up/Down 在方法间快速移动定位Ctrl+Shift+Up/Down 代码向上/下移动。F2 或Shift+F2 高亮错误或警告快速定位代码标签输入完成后，按Tab，生成代码。选中文本，按Ctrl+Shift+F7 ，高亮显示所有该文本，按Esc高亮消失。Ctrl+W 选中代码，连续按会有其他效果选中文本，按Alt+F3 ，逐个往下查找相同文本，并高亮显示。Ctrl+Up/Down 光标跳转到第一行或最后一行下Ctrl+B 快速打开光标处的类或方法</code></pre><hr><h3 id="常用设置"><a href="#常用设置" class="headerlink" title="常用设置"></a>常用设置</h3><ol><li><p>IDEA内存优化</p><pre><code>因机器本身的配置而配置：\IntelliJ IDEA 8\bin\idea.exe.vmoptions—————————————–-Xms64m-Xmx256m-XX:MaxPermSize=92m-ea-server-Dsun.awt.keepWorkingSetOnMinimize=true</code></pre></li><li><p>查询快捷键</p><pre><code>CTRL+N   查找类CTRL+SHIFT+N  查找文件CTRL+SHIFT+ALT+N 查找类中的方法或变量CIRL+B   找变量的来源CTRL+ALT+B  找所有的子类CTRL+SHIFT+B  找变量的类CTRL+G   定位行CTRL+F   在当前窗口查找文本CTRL+SHIFT+F  在指定窗口查找文本CTRL+R   在 当前窗口替换文本CTRL+SHIFT+R  在指定窗口替换文本ALT+SHIFT+C  查找修改的文件CTRL+E   最近打开的文件F3   向下查找关键字出现位置SHIFT+F3  向上一个关键字出现位置F4   查找变量来源CTRL+ALT+F7  选中的字符查找工程出现的地方CTRL+SHIFT+O  弹出显示查找内容</code></pre></li><li><p>自动代码</p><pre><code>ALT+回车  导入包,自动修正CTRL+ALT+L  格式化代码CTRL+ALT+I  自动缩进CTRL+ALT+O  优化导入的类和包ALT+INSERT  生成代码(如GET,SET方法,构造函数等)CTRL+E 最近更改的代码CTRL+SHIFT+SPACE 自动补全代码CTRL+空格  代码提示CTRL+ALT+SPACE  类名或接口名提示CTRL+P   方法参数提示CTRL+J   自动代码CTRL+ALT+T  把选中的代码放在 TRY{} IF{} ELSE{} 里</code></pre></li><li><p>复制快捷方式</p><pre><code>CTRL+D   复制行CTRL+X   剪切,删除行</code></pre></li><li><p>其他快捷方式</p><pre><code>CIRL+U   大小写切换CTRL+Z   倒退CTRL+SHIFT+Z  向前CTRL+ALT+F12  资源管理器打开文件夹ALT+F1   查找文件所在目录位置SHIFT+ALT+INSERT 竖编辑模式CTRL+/   注释//CTRL+SHIFT+/  注释/*…*/CTRL+W   选中代码，连续按会有其他效果CTRL+B   快速打开光标处的类或方法ALT+ ←/→  切换代码视图CTRL+ALT ←/→  返回上次编辑的位置ALT+ ↑/↓  在方法间快速移动定位SHIFT+F6  重构-重命名CTRL+H   显示类结构图CTRL+Q   显示注释文档ALT+1   快速打开或隐藏工程面板CTRL+SHIFT+UP/DOWN 代码向上/下移动。CTRL+UP/DOWN  光标跳转到第一行或最后一行下ESC   光标返回编辑框SHIFT+ESC  光标返回编辑框,关闭无用的窗口F1   帮助千万别按,很卡!CTRL+F4   非常重要下班都用</code></pre></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;实用快捷键&quot;&gt;&lt;a href=&quot;#实用快捷键&quot; class=&quot;headerlink&quot; title=&quot;实用快捷键&quot;&gt;&lt;/a&gt;实用快捷键&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;Ctrl+/ 或 Ctrl+Shift+/ 注释（// 或者/*…*/ ）

Ctrl+D 复制行

Ctrl+X 删除行

快速修复 alt+enter (modify/cast)

代码提示 alt+/

ctr+G 定位某一行

Shift+F6 重构-重命名

Ctrl+R 替换文本

Ctrl+F 查找文本

Ctrl+E 最近打开的文件

Ctrl+J 自动代码

组织导入 ctr+alt+O

格式化代码 ctr+alt+L

大小写转化 ctr+shift+U
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
    
    </summary>
    
      <category term="Tutorial" scheme="https://note.pin.bo/categories/Tutorial/"/>
    
    
      <category term="Idea" scheme="https://note.pin.bo/tags/Idea/"/>
    
      <category term="Keymap" scheme="https://note.pin.bo/tags/Keymap/"/>
    
  </entry>
  
  <entry>
    <title>Markdown中文文档</title>
    <link href="https://note.pin.bo/2014-07-01-markdown-syntax-doc/"/>
    <id>https://note.pin.bo/2014-07-01-markdown-syntax-doc/</id>
    <published>2014-07-01T04:03:00.000Z</published>
    <updated>2017-02-20T04:41:31.471Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="宗旨"><a href="#宗旨" class="headerlink" title="宗旨"></a>宗旨</h3><p>Markdown 的目标是实现「易读易写」。</p><p>可读性，无论如何，都是最重要的。一份使用 Markdown 格式撰写的文件应该可以直接以纯文本发布，并且看起来不会像是由许多标签或是格式指令所构成。Markdown 语法受到一些既有 text-to-HTML 格式的影响，包括 Setext、atx、Textile、reStructuredText、Grutatext 和 EtText，而最大灵感来源其实是纯文本电子邮件的格式。</p><p>总之， Markdown 的语法全由一些符号所组成，这些符号经过精挑细选，其作用一目了然。比如：在文字两旁加上星号，看起来就像*强调*。Markdown 的列表看起来，嗯，就是列表。Markdown 的区块引用看起来就真的像是引用一段文字，就像你曾在电子邮件中见过的那样。</p><a id="more"></a><h3 id="兼容-HTML"><a href="#兼容-HTML" class="headerlink" title="兼容 HTML"></a>兼容 HTML</h3><p>Markdown 语法的目标是：成为一种适用于网络的书写语言。</p><p>Markdown 不是想要取代 HTML，甚至也没有要和它相近，它的语法种类很少，只对应 HTML 标记的一小部分。Markdown 的构想不是要使得 HTML 文档更容易书写。在我看来， HTML 已经很容易写了。Markdown 的理念是，能让文档更容易读、写和随意改。HTML 是一种发布的格式，Markdown 是一种书写的格式。就这样，Markdown 的格式语法只涵盖纯文本可以涵盖的范围。</p><p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。不需要额外标注这是 HTML 或是 Markdown；只要直接加标签就可以了。</p><p>要制约的只有一些 HTML 区块元素――比如 <code>&lt;div&gt;</code>、<code>&lt;table&gt;</code>、<code>&lt;pre&gt;</code>、<code>&lt;p&gt;</code> 等标签，必须在前后加上空行与其它内容区隔开，还要求它们的开始标签与结尾标签不能用制表符或空格来缩进。Markdown 的生成器有足够智能，不会在 HTML 区块标签外加上不必要的 <code>&lt;p&gt;</code> 标签。</p><p>例子如下，在 Markdown 文件里加上一段 HTML 表格：</p><pre><code>这是一个普通段落。&lt;table&gt;  &lt;tr&gt;    &lt;td&gt;Foo&lt;/td&gt;  &lt;/tr&gt;&lt;/table&gt;这是另一个普通段落。</code></pre><p>请注意，在 HTML 区块标签间的 Markdown 格式语法将不会被处理。比如，你在 HTML 区块内使用 Markdown 样式的<code>*强调*</code>会没有效果。</p><p>HTML 的区段（行内）标签如 <code>&lt;span&gt;</code>、<code>&lt;cite&gt;</code>、<code>&lt;del&gt;</code> 可以在 Markdown 的段落、列表或是标题里随意使用。依照个人习惯，甚至可以不用 Markdown 格式，而直接采用 HTML 标签来格式化。举例说明：如果比较喜欢 HTML 的 <code>&lt;a&gt;</code> 或 <code>&lt;img&gt;</code> 标签，可以直接使用这些标签，而不用 Markdown 提供的链接或是图像标签语法。</p><p>和处在 HTML 区块标签间不同，Markdown 语法在 HTML 区段标签间是有效的。</p><h3 id="特殊字符自动转换"><a href="#特殊字符自动转换" class="headerlink" title="特殊字符自动转换"></a>特殊字符自动转换</h3><p>在 HTML 文件中，有两个字符需要特殊处理： <code>&lt;</code> 和 <code>&amp;</code> 。 <code>&lt;</code> 符号用于起始标签，&amp; 符号则用于标记 HTML 实体，如果你只是想要显示这些字符的原型，你必须要使用实体的形式，像是 <code>&amp;lt;</code> 和 <code>&amp;amp;</code>。</p><p><code>&amp;</code> 字符尤其让网络文档编写者受折磨，如果你要打「<code>AT&amp;T</code>」 ，你必须要写成「<code>AT&amp;amp;T</code>」。而网址中的 <code>&amp;</code> 字符也要转换。比如你要链接到：</p><pre><code>http://images.google.com/images?num=30&amp;q=larry+bird</code></pre><p>你必须要把网址转换写为：</p><pre><code>http://images.google.com/images?num=30&amp;amp;q=larry+bird</code></pre><p>才能放到链接标签的 <code>href</code> 属性里。不用说也知道这很容易忽略，这也可能是 HTML 标准检验所检查到的错误中，数量最多的。</p><p>Markdown 让你可以自然地书写字符，需要转换的由它来处理好了。如果你使用的 <code>&amp;</code> 字符是 HTML 字符实体的一部分，它会保留原状，否则它会被转换成 <code>&amp;amp;</code>。</p><p>所以你如果要在文档中插入一个版权符号 <code>©</code>，你可以这样写：</p><pre><code>&amp;copy;</code></pre><p>Markdown 会保留它不动。而若你写：</p><pre><code>AT&amp;T</code></pre><p>Markdown 就会将它转为：</p><pre><code>AT&amp;amp;T</code></pre><p>类似的状况也会发生在 <code>&lt;</code> 符号上，因为 Markdown 允许 兼容 HTML ，如果你是把 <code>&lt;</code> 符号作为 HTML 标签的定界符使用，那 Markdown 也不会对它做任何转换，但是如果你写：</p><pre><code>4 &lt; 5</code></pre><p>Markdown 将会把它转换为：</p><pre><code>4 &amp;lt; 5</code></pre><p>不过需要注意的是，code 范围内，不论是行内还是区块， <code>&lt;</code> 和 <code>&amp;</code> 两个符号都一定会被转换成 HTML 实体，这项特性让你可以很容易地用 Markdown 写 HTML code （和 HTML 相对而言， HTML 语法中，你要把所有的 <code>&lt;</code> 和 <code>&amp;</code> 都转换为 HTML 实体，才能在 HTML 文件里面写出 HTML code）。</p><hr><h2 id="区块元素"><a href="#区块元素" class="headerlink" title="区块元素"></a>区块元素</h2><h3 id="段落和换行"><a href="#段落和换行" class="headerlink" title="段落和换行"></a>段落和换行</h3><p>一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行（空行的定义是显示上看起来像是空的，便会被视为空行。比方说，若某一行只包含空格和制表符，则该行也会被视为空行）。普通段落不该用空格或制表符来缩进。</p><p>「由一个或多个连续的文本行组成」这句话其实暗示了 Markdown 允许段落内的强迫换行（插入换行符），这个特性和其他大部分的 text-to-HTML 格式不一样（包括 Movable Type 的「Convert Line Breaks」选项），其它的格式会把每个换行符都转成 <code>&lt;br /&gt;</code> 标签。</p><p>如果你确实想要依赖 Markdown 来插入 <code>&lt;br /&gt;</code> 标签的话，在插入处先按入两个以上的空格然后回车。</p><p>的确，需要多费点事（多加空格）来产生 <code>&lt;br /&gt;</code> ，但是简单地「每个换行都转换为 <br>」的方法在 Markdown 中并不适合， Markdown 中 email 式的 区块引用 和多段落的 列表 在使用换行来排版的时候，不但更好用，还更方便阅读。</p><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>Markdown 支持两种标题的语法，类 Setext 和类 atx 形式。</p><p>类 Setext 形式是用底线的形式，利用 <code>=</code> （最高阶标题）和 <code>-</code> （第二阶标题），例如：</p><pre><code>This is an H1=============This is an H2-------------</code></pre><p>任何数量的 <code>=</code> 和 <code>-</code> 都可以有效果。</p><p>类 Atx 形式则是在行首插入 1 到 6 个 <code>#</code> ，对应到标题 1 到 6 阶，例如：</p><pre><code># 这是 H1## 这是 H2###### 这是 H6</code></pre><p>你可以选择性地「闭合」类 atx 样式的标题，这纯粹只是美观用的，若是觉得这样看起来比较舒适，你就可以在行尾加上 <code>#</code>，而行尾的 <code>#</code> 数量也不用和开头一样（行首的井字符数量决定标题的阶数）：</p><pre><code># 这是 H1 ### 这是 H2 ##### 这是 H3 ######</code></pre><h3 id="区块引用-Blockquotes"><a href="#区块引用-Blockquotes" class="headerlink" title="区块引用 Blockquotes"></a>区块引用 Blockquotes</h3><p>Markdown 标记区块引用是使用类似 email 中用 <code>&gt;</code> 的引用方式。如果你还熟悉在 email 信件中的引言部分，你就知道怎么在 Markdown 文件中建立一个区块引用，那会看起来像是你自己先断好行，然后在每行的最前面加上 <code>&gt;</code> ：</p><blockquote><p>This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,<br>consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.<br>Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p><p>Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse<br>id sem consectetuer libero luctus adipiscing.</p></blockquote><p>Markdown 也允许你偷懒只在整个段落的第一行最前面加上 <code>&gt;</code> ：</p><blockquote><p>This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,<br>  consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.<br>  Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p></blockquote><blockquote><p>Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse<br>  id sem consectetuer libero luctus adipiscing.</p></blockquote><p>区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 <code>&gt;</code> ：</p><blockquote><p>This is the first level of quoting.</p><blockquote><p>This is nested blockquote.</p></blockquote><p>Back to the first level.</p></blockquote><p>引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等：</p><blockquote><p>## 这是一个标题。</p><ol><li>这是第一行列表项。</li><li>这是第二行列表项。</li></ol><p>给出一些例子代码：</p><pre><code>return shell_exec(&quot;echo $input | $markdown_script&quot;);</code></pre></blockquote><p>任何像样的文本编辑器都能轻松地建立 email 型的引用。例如在 BBEdit 中，你可以选取文字后然后从选单中选择增加引用阶层。</p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>Markdown 支持有序列表和无序列表。</p><p>无序列表使用星号、加号或是减号作为列表标记：</p><pre><code>* Red* Green* Blue</code></pre><p>等同于：</p><pre><code>+ Red+ Green+ Blue</code></pre><p>也等同于：</p><pre><code>- Red- Green- Blue</code></pre><p>有序列表则使用数字接着一个英文句点：</p><pre><code>1. Bird2. McHale3. Parish</code></pre><p>很重要的一点是，你在列表标记上使用的数字并不会影响输出的 HTML 结果，上面的列表所产生的 HTML 标记为：</p><pre><code>&lt;ol&gt;  &lt;li&gt;Bird&lt;/li&gt;  &lt;li&gt;McHale&lt;/li&gt;  &lt;li&gt;Parish&lt;/li&gt;&lt;/ol&gt;</code></pre><p>如果你的列表标记写成：</p><pre><code>1. Bird1. McHale1. Parish</code></pre><p>或甚至是：</p><pre><code>3. Bird1. McHale8. Parish</code></pre><p>你都会得到完全相同的 HTML 输出。重点在于，你可以让 Markdown 文件的列表数字和输出的结果相同，或是你懒一点，你可以完全不用在意数字的正确性。</p><p>如果你使用懒惰的写法，建议第一个项目最好还是从 1. 开始，因为 Markdown 未来可能会支持有序列表的 start 属性。</p><p>列表项目标记通常是放在最左边，但是其实也可以缩进，最多 3 个空格，项目标记后面则一定要接着至少一个空格或制表符。</p><p>要让列表看起来更漂亮，你可以把内容用固定的缩进整理好：</p><pre><code>* Lorem ipsum dolor sit amet, consectetuer adipiscing elit.  Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,  viverra nec, fringilla in, laoreet vitae, risus.* Donec sit amet nisl. Aliquam semper ipsum sit amet velit.  Suspendisse id sem consectetuer libero luctus adipiscing.</code></pre><p>但是如果你懒，那也行：</p><pre><code>* Lorem ipsum dolor sit amet, consectetuer adipiscing elit.Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,viverra nec, fringilla in, laoreet vitae, risus.* Donec sit amet nisl. Aliquam semper ipsum sit amet velit.Suspendisse id sem consectetuer libero luctus adipiscing.</code></pre><p>如果列表项目间用空行分开，在输出 HTML 时 Markdown 就会将项目内容用 <code>&lt;p&gt;</code> 标签包起来，举例来说：</p><pre><code>* Bird* Magic</code></pre><p>会被转换为：</p><pre><code>&lt;ul&gt;  &lt;li&gt;Bird&lt;/li&gt;  &lt;li&gt;Magic&lt;/li&gt;&lt;/ul&gt;</code></pre><p>但是这个：</p><pre><code>*   Bird*   Magic</code></pre><p>会被转换为：</p><pre><code>&lt;ul&gt;  &lt;li&gt;&lt;p&gt;Bird&lt;/p&gt;&lt;/li&gt;  &lt;li&gt;&lt;p&gt;Magic&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</code></pre><p>列表项目可以包含多个段落，每个项目下的段落都必须缩进 4 个空格或是 1 个制表符：</p><pre><code>1.  This is a list item with two paragraphs. Lorem ipsum dolor    sit amet, consectetuer adipiscing elit. Aliquam hendrerit    mi posuere lectus.    Vestibulum enim wisi, viverra nec, fringilla in, laoreet    vitae, risus. Donec sit amet nisl. Aliquam semper ipsum    sit amet velit.2.  Suspendisse id sem consectetuer libero luctus adipiscing.</code></pre><p>如果你每行都有缩进，看起来会看好很多，当然，再次地，如果你很懒惰，Markdown 也允许：</p><pre><code>*   This is a list item with two paragraphs.    This is the second paragraph in the list item. You&apos;reonly required to indent the first line. Lorem ipsum dolorsit amet, consectetuer adipiscing elit.*   Another item in the same list.</code></pre><p>如果要在列表项目内放进引用，那 &gt; 就需要缩进：</p><pre><code>*   A list item with a blockquote:    &gt; This is a blockquote    &gt; inside a list item.</code></pre><p>如果要放代码区块的话，该区块就需要缩进两次，也就是 8 个空格或是 2 个制表符：</p><pre><code>*   一列表项包含一个列表区块：        &lt;代码写在这&gt;</code></pre><p>当然，项目列表很可能会不小心产生，像是下面这样的写法：</p><pre><code>1986. What a great season.</code></pre><p>换句话说，也就是在行首出现数字-句点-空白，要避免这样的状况，你可以在句点前面加上反斜杠。</p><pre><code>1986\. What a great season.</code></pre><h3 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h3><p>和程序相关的写作或是标签语言原始码通常会有已经排版好的代码区块，通常这些区块我们并不希望它以一般段落文件的方式去排版，而是照原来的样子显示，Markdown 会用 <code>&lt;pre&gt;</code> 和 <code>&lt;code&gt;</code> 标签来把代码区块包起来。</p><p>要在 Markdown 中建立代码区块很简单，只要简单地缩进 4 个空格或是 1 个制表符就可以，例如，下面的输入：</p><pre><code>这是一个普通段落：    这是一个代码区块。</code></pre><p>Markdown 会转换成：</p><pre><code>&lt;p&gt;这是一个普通段落：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;这是一个代码区块。&lt;/code&gt;&lt;/pre&gt;</code></pre><p>这个每行一阶的缩进（4 个空格或是 1 个制表符），都会被移除，例如：</p><pre><code>Here is an example of AppleScript:    tell application &quot;Foo&quot;        beep    end tell</code></pre><p>会被转换为：</p><pre><code>&lt;p&gt;Here is an example of AppleScript:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;tell application &quot;Foo&quot;    beepend tell&lt;/code&gt;&lt;/pre&gt;</code></pre><p>一个代码区块会一直持续到没有缩进的那一行（或是文件结尾）。</p><p>在代码区块里面， <code>&amp;</code> 、 <code>&lt;</code> 和 <code>&gt;</code> 会自动转成 HTML 实体，这样的方式让你非常容易使用 Markdown 插入范例用的 HTML 原始码，只需要复制贴上，再加上缩进就可以了，剩下的 Markdown 都会帮你处理，例如：</p><pre><code>&lt;div class=&quot;footer&quot;&gt;  &amp;copy; 2004 Foo Corporation&lt;/div&gt;</code></pre><p>会被转换为：</p><pre><code>&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&quot;footer&quot;&amp;gt;    &amp;amp;copy; 2004 Foo Corporation&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;</code></pre><p>代码区块中，一般的 Markdown 语法不会被转换，像是星号便只是星号，这表示你可以很容易地以 Markdown 语法撰写 Markdown 语法相关的文件。</p><h3 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h3><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p><pre><code>* * *********- - ----------------------------------------</code></pre><hr><h2 id="区段元素"><a href="#区段元素" class="headerlink" title="区段元素"></a>区段元素</h2><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>Markdown 支持两种形式的链接语法： 行内式和参考式两种形式。</p><p>不管是哪一种，链接文字都是用 [方括号] 来标记。</p><p>要建立一个行内式的链接，只要在方块括号后面紧接着圆括号并插入网址链接即可，如果你还想要加上链接的 title 文字，只要在网址后面，用双引号把 title 文字包起来即可，例如：</p><pre><code>This is [an example](http://example.com/ &quot;Title&quot;) inline link.[This link](http://example.net/) has no title attribute.</code></pre><p>会产生：</p><pre><code>&lt;p&gt;This is &lt;a href=&quot;http://example.com/&quot; title=&quot;Title&quot;&gt;an example&lt;/a&gt; inline link.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://example.net/&quot;&gt;This link&lt;/a&gt; has notitle attribute.&lt;/p&gt;</code></pre><p>如果你是要链接到同样主机的资源，你可以使用相对路径：</p><pre><code>See my [About](/about/) page for details.</code></pre><p>参考式的链接是在链接文字的括号后面再接上另一个方括号，而在第二个方括号里面要填入用以辨识链接的标记：</p><pre><code>This is [an example][id] reference-style link.</code></pre><p>你也可以选择性地在两个方括号中间加上一个空格：</p><pre><code>This is [an example] [id] reference-style link.</code></pre><p>接着，在文件的任意处，你可以把这个标记的链接内容定义出来：</p><pre><code>[id]: http://example.com/  &quot;Optional Title Here&quot;</code></pre><p>链接内容定义的形式为：</p><ul><li>方括号（前面可以选择性地加上至多三个空格来缩进），里面输入链接文字</li><li>接着一个冒号</li><li>接着一个以上的空格或制表符</li><li>接着链接的网址</li><li>选择性地接着 title 内容，可以用单引号、双引号或是括弧包着</li></ul><p>下面这三种链接的定义都是相同：</p><pre><code>[foo]: http://example.com/  &quot;Optional Title Here&quot;[foo]: http://example.com/  &apos;Optional Title Here&apos;[foo]: http://example.com/  (Optional Title Here)</code></pre><p>请注意：有一个已知的问题是 Markdown.pl 1.0.1 会忽略单引号包起来的链接 title。</p><p>链接网址也可以用方括号包起来：</p><pre><code>[id]: &lt;http://example.com/&gt;  &quot;Optional Title Here&quot;</code></pre><p>你也可以把 title 属性放到下一行，也可以加一些缩进，若网址太长的话，这样会比较好看：</p><pre><code>[id]: http://example.com/longish/path/to/resource/here    &quot;Optional Title Here&quot;</code></pre><p>网址定义只有在产生链接的时候用到，并不会直接出现在文件之中。</p><p>链接辨别标签可以有字母、数字、空白和标点符号，但是并不区分大小写，因此下面两个链接是一样的：</p><pre><code>[link text][a][link text][A]</code></pre><p>隐式链接标记功能让你可以省略指定链接标记，这种情形下，链接标记会视为等同于链接文字，要用隐式链接标记只要在链接文字后面加上一个空的方括号，如果你要让 “Google” 链接到 google.com，你可以简化成：</p><pre><code>[Google][]</code></pre><p>然后定义链接内容：</p><pre><code>[Google]: http://google.com/  </code></pre><p>由于链接文字可能包含空白，所以这种简化型的标记内也许包含多个单词：</p><pre><code>Visit [Daring Fireball][] for more information.</code></pre><p>然后接着定义链接：</p><pre><code>[Daring Fireball]: http://daringfireball.net/</code></pre><p>链接的定义可以放在文件中的任何一个地方，我比较偏好直接放在链接出现段落的后面，你也可以把它放在文件最后面，就像是注解一样。</p><p>下面是一个参考式链接的范例：</p><pre><code>I get 10 times more traffic from [Google] [1] than from[Yahoo] [2] or [MSN] [3].  [1]: http://google.com/        &quot;Google&quot;  [2]: http://search.yahoo.com/  &quot;Yahoo Search&quot;  [3]: http://search.msn.com/    &quot;MSN Search&quot;</code></pre><p>如果改成用链接名称的方式写：</p><pre><code>I get 10 times more traffic from [Google][] than from[Yahoo][] or [MSN][].  [google]: http://google.com/        &quot;Google&quot;  [yahoo]:  http://search.yahoo.com/  &quot;Yahoo Search&quot;  [msn]:    http://search.msn.com/    &quot;MSN Search&quot;</code></pre><p>上面两种写法都会产生下面的 HTML。</p><pre><code>&lt;p&gt;  I get 10 times more traffic from &lt;a href=&quot;http://google.com/&quot; title=&quot;Google&quot;&gt;Google&lt;/a&gt; than from &lt;a href=&quot;http://search.yahoo.com/&quot; title=&quot;Yahoo Search&quot;&gt;Yahoo&lt;/a&gt; or &lt;a href=&quot;http://search.msn.com/&quot; title=&quot;MSN Search&quot;&gt;MSN&lt;/a&gt;.&lt;/p&gt;</code></pre><p>下面是用行内式写的同样一段内容的 Markdown 文件，提供作为比较之用：</p><pre><code>I get 10 times more traffic from [Google](http://google.com/ &quot;Google&quot;)than from [Yahoo](http://search.yahoo.com/ &quot;Yahoo Search&quot;) or[MSN](http://search.msn.com/ &quot;MSN Search&quot;).</code></pre><p>参考式的链接其实重点不在于它比较好写，而是它比较好读，比较一下上面的范例，使用参考式的文章本身只有 81 个字符，但是用行内形式的却会增加到 176 个字元，如果是用纯 HTML 格式来写，会有 234 个字元，在 HTML 格式中，标签比文本还要多。</p><p>使用 Markdown 的参考式链接，可以让文件更像是浏览器最后产生的结果，让你可以把一些标记相关的元数据移到段落文字之外，你就可以增加链接而不让文章的阅读感觉被打断。</p><h3 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h3><p>Markdown 使用星号（<code>*</code>）和底线（<code>_</code>）作为标记强调字词的符号，被 <code>*</code> 或 <code>_</code> 包围的字词会被转成用 <code>&lt;em&gt;</code> 标签包围，用两个 <code>*</code> 或 <code>_</code> 包起来的话，则会被转成 <code>&lt;strong&gt;</code>，例如：</p><pre><code>*single asterisks*_single underscores_**double asterisks**__double underscores__</code></pre><p>会转成：</p><pre><code>&lt;em&gt;single asterisks&lt;/em&gt;&lt;em&gt;single underscores&lt;/em&gt;&lt;strong&gt;double asterisks&lt;/strong&gt;&lt;strong&gt;double underscores&lt;/strong&gt;</code></pre><p>你可以随便用你喜欢的样式，唯一的限制是，你用什么符号开启标签，就要用什么符号结束。</p><p>强调也可以直接插在文字中间：</p><pre><code>un*frigging*believable</code></pre><p>但是如果你的 <code>*</code> 和 <code>_</code> 两边都有空白的话，它们就只会被当成普通的符号。</p><p>如果要在文字前后直接插入普通的星号或底线，你可以用反斜线：</p><pre><code>\*this text is surrounded by literal asterisks\*</code></pre><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>如果要标记一小段行内代码，你可以用反引号把它包起来（`），例如：</p><pre><code>Use the `printf()` function.</code></pre><p>会产生：</p><pre><code>&lt;p&gt;Use the &lt;code&gt;printf()&lt;/code&gt; function.&lt;/p&gt;</code></pre><p>如果要在代码区段内插入反引号，你可以用多个反引号来开启和结束代码区段：</p><pre><code>``There is a literal backtick (`) here.``</code></pre><p>这段语法会产生：</p><pre><code>&lt;p&gt;&lt;code&gt;There is a literal backtick (`) here.&lt;/code&gt;&lt;/p&gt;</code></pre><p>代码区段的起始和结束端都可以放入一个空白，起始端后面一个，结束端前面一个，这样你就可以在区段的一开始就插入反引号：</p><pre><code>A single backtick in a code span: `` ` ``A backtick-delimited string in a code span: `` `foo` ``</code></pre><p>会产生：</p><pre><code>&lt;p&gt;A single backtick in a code span: &lt;code&gt;`&lt;/code&gt;&lt;/p&gt;&lt;p&gt;A backtick-delimited string in a code span: &lt;code&gt;`foo`&lt;/code&gt;&lt;/p&gt;</code></pre><p>在代码区段内，<code>&amp;</code> 和方括号都会被自动地转成 HTML 实体，这使得插入 HTML 原始码变得很容易，Markdown 会把下面这段：</p><pre><code>Please don&apos;t use any `&lt;blink&gt;` tags.</code></pre><p>转为：</p><pre><code>&lt;p&gt;Please don&apos;t use any &lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt; tags.&lt;/p&gt;</code></pre><p>你也可以这样写：</p><pre><code>`&amp;#8212;` is the decimal-encoded equivalent of `&amp;mdash;`.</code></pre><p>以产生：</p><pre><code>&lt;p&gt;&lt;code&gt;&amp;amp;#8212;&lt;/code&gt; is the decimal-encodedequivalent of &lt;code&gt;&amp;amp;mdash;&lt;/code&gt;.&lt;/p&gt;</code></pre><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>很明显地，要在纯文字应用中设计一个「自然」的语法来插入图片是有一定难度的。</p><p>Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： 行内式和参考式。</p><p>行内式的图片语法看起来像是：</p><pre><code>![Alt text](/path/to/img.jpg)![Alt text](/path/to/img.jpg &quot;Optional title&quot;)</code></pre><p>详细叙述如下：</p><ul><li>一个惊叹号 !</li><li>接着一个方括号，里面放上图片的替代文字</li><li>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上 选择性的 ‘title’ 文字。</li></ul><p>参考式的图片语法则长得像这样：</p><pre><code>![Alt text][id]</code></pre><p>「id」是图片参考的名称，图片参考的定义方式则和连结参考一样：</p><pre><code>[id]: url/to/image  &quot;Optional title attribute&quot;</code></pre><p>到目前为止， Markdown 还没有办法指定图片的宽高，如果你需要的话，你可以使用普通的 <code>&lt;img&gt;</code> 标签。</p><hr><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><h3 id="自动链接"><a href="#自动链接" class="headerlink" title="自动链接"></a>自动链接</h3><p>Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用方括号包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如：</p><pre><code>&lt;http://example.com/&gt;</code></pre><p>Markdown 会转为：</p><pre><code>&lt;a href=&quot;http://example.com/&quot;&gt;http://example.com/&lt;/a&gt;</code></pre><p>邮址的自动链接也很类似，只是 Markdown 会先做一个编码转换的过程，把文字字符转成 16 进位码的 HTML 实体，这样的格式可以糊弄一些不好的邮址收集机器人，例如：</p><pre><code>&lt;address@example.com&gt;</code></pre><p>Markdown 会转成：</p><pre><code>&lt;a href=&quot;&amp;#x6D;&amp;#x61;i&amp;#x6C;&amp;#x74;&amp;#x6F;:&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;&amp;#109;&quot;&gt;&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;&amp;#109;&lt;/a&gt;</code></pre><p>在浏览器里面，这段字串（其实是 <code>&lt;a href=&quot;mailto:address@example.com&quot;&gt;address@example.com&lt;/a&gt;</code>）会变成一个可以点击的「<a href="mailto:address@example.com" target="_blank" rel="noopener">address@example.com</a>」链接。</p><p>（这种作法虽然可以糊弄不少的机器人，但并不能全部挡下来，不过总比什么都不做好些。不管怎样，公开你的信箱终究会引来广告信件的。）</p><h3 id="反斜杠"><a href="#反斜杠" class="headerlink" title="反斜杠"></a>反斜杠</h3><p>Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文字旁边的方式来做出强调效果（但不用 <code>&lt;em&gt;</code> 标签），你可以在星号的前面加上反斜杠：</p><pre><code>\*literal asterisks\*</code></pre><p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p><pre><code>\   反斜线`   反引号*   星号_   底线{}  花括号[]  方括号()  括弧#   井字号+   加号-   减号.   英文句点!   惊叹号</code></pre><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>通过<code>----</code>来分割表头,通过<code>:</code>来规定是靠左,靠右还是居中展示,默认居左.</p><pre><code>| ABCD | EFGH | IJKL ||------|:----:| ----:|| a    | b    | c    || d    | e    |  f   || g    | h    |   i  |ABCD | EFGH | IJKL-----|------|----a    | b    | cd    | e    | fg    | h    | i</code></pre><p>预览效果:</p><table><thead><tr><th>ABCD</th><th style="text-align:center">EFGH</th><th style="text-align:right">IJKL</th></tr></thead><tbody><tr><td>a</td><td style="text-align:center">b</td><td style="text-align:right">c</td></tr><tr><td>d</td><td style="text-align:center">e</td><td style="text-align:right">f</td></tr><tr><td>g</td><td style="text-align:center">h</td><td style="text-align:right">i</td></tr></tbody></table><table><thead><tr><th>ABCD</th><th>EFGH</th><th>IGKL</th></tr></thead><tbody><tr><td>a</td><td>b</td><td>c</td></tr><tr><td>d</td><td>e</td><td>f</td></tr><tr><td>g</td><td>h</td><td>i</td></tr></tbody></table><h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><p><del>文字删除线语法如下</del></p><pre><code>~~文字删除线~~</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;h3 id=&quot;宗旨&quot;&gt;&lt;a href=&quot;#宗旨&quot; class=&quot;headerlink&quot; title=&quot;宗旨&quot;&gt;&lt;/a&gt;宗旨&lt;/h3&gt;&lt;p&gt;Markdown 的目标是实现「易读易写」。&lt;/p&gt;
&lt;p&gt;可读性，无论如何，都是最重要的。一份使用 Markdown 格式撰写的文件应该可以直接以纯文本发布，并且看起来不会像是由许多标签或是格式指令所构成。Markdown 语法受到一些既有 text-to-HTML 格式的影响，包括 Setext、atx、Textile、reStructuredText、Grutatext 和 EtText，而最大灵感来源其实是纯文本电子邮件的格式。&lt;/p&gt;
&lt;p&gt;总之， Markdown 的语法全由一些符号所组成，这些符号经过精挑细选，其作用一目了然。比如：在文字两旁加上星号，看起来就像*强调*。Markdown 的列表看起来，嗯，就是列表。Markdown 的区块引用看起来就真的像是引用一段文字，就像你曾在电子邮件中见过的那样。&lt;/p&gt;
    
    </summary>
    
      <category term="Document" scheme="https://note.pin.bo/categories/Document/"/>
    
    
      <category term="Markdown" scheme="https://note.pin.bo/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>环境变量的配置</title>
    <link href="https://note.pin.bo/2014-06-21-install-jdk-and-maven/"/>
    <id>https://note.pin.bo/2014-06-21-install-jdk-and-maven/</id>
    <published>2014-06-21T11:08:00.000Z</published>
    <updated>2017-02-20T04:40:09.165Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>贴出这些主要是方便自己查看,配了好几次也没有具体记在心里,大写的尴尬……</p></blockquote><h3 id="JDK环境变量配置"><a href="#JDK环境变量配置" class="headerlink" title="JDK环境变量配置"></a>JDK环境变量配置</h3><p>1. 官网下载JDK：<a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a></p><p>2. 安装JDK 选择安装目录 安装过程中会出现两次安装提示 。第一次是安装 jdk ，第二次是安装 jre 。建议两个都安装在同一个java文件夹中的不同文件夹中,如下图。</p><a id="more"></a><p><img src="/images/post_images/2014-06-21-install-jdk-and-maven-01.png" alt="Alt text"></p><p>3. 安装完JDK后配置环境变量  计算机→属性→高级系统设置→高级→环境变量 如下图。</p><p><img src="/images/post_images/2014-06-21-install-jdk-and-maven-02.png" alt="Alt text"></p><p>4. 系统变量→新建 JAVA_HOME 变量 。变量值填写jdk的安装目录（本人是 D:\Program Files\Java\jdk1.7.0_75)</p><p><img src="/images/post_images/2014-06-21-install-jdk-and-maven-03.png" alt="Alt text"></p><p>5. 系统变量→寻找 Path 变量→编辑，在变量值最后输入 %JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;（注意原来Path的变量值末尾有没有;号，如果没有，先输入；号再输入上面的代码）</p><p><img src="/images/post_images/2014-06-21-install-jdk-and-maven-04.png" alt="Alt text"></p><p>6. 系统变量→新建 CLASSPATH 变量，变量值填写   .;%JAVA_HOME%\lib;%JAVA_HOME%\lib\tools.jar（注意最前面有一点）</p><p><img src="/images/post_images/2014-06-21-install-jdk-and-maven-05.png" alt="Alt text"></p><p>7. 检验是否配置成功 运行cmd 输入 java -version （java 和 -version 之间有空格）若如图所示 显示版本信息 则说明安装和配置成功。</p><p><img src="/images/post_images/2014-06-21-install-jdk-and-maven-06.png" alt="Alt text"></p><h3 id="Maven环境变量配置"><a href="#Maven环境变量配置" class="headerlink" title="Maven环境变量配置"></a>Maven环境变量配置</h3><p>1. 官网下载Maven：<a href="http://maven.apache.org/" target="_blank" rel="noopener">http://maven.apache.org/</a></p><p>2. 解压maven到软件安装常用目录如： D:\Program Files\apache-maven-3.2.5</p><p><img src="/images/post_images/2014-06-21-install-jdk-and-maven-07.png" alt="Alt text"></p><p>3. 开始配置环境变量  计算机→属性→高级系统设置→高级→环境变量</p><p><img src="/images/post_images/2014-06-21-install-jdk-and-maven-08.png" alt="Alt text"></p><p>4. 添加新的系统环境变量M2_HOME， 并设置其值为你安装的目录 M2_HOME= D:\Program Files\apache-maven-3.2.5</p><p><img src="/images/post_images/2014-06-21-install-jdk-and-maven-09.png" alt="Alt text"></p><p>5. 添加新的系统环境变量M2， 并设置其值为你安装的目录 M2= %M2_HOME%\bin，注释：此处的M2可以省略，跟上个变量合并写在下一步Path中，添加;%M2_HOME%\bin;到尾部。</p><p><img src="/images/post_images/2014-06-21-install-jdk-and-maven-10.png" alt="Alt text"></p><p>6. 系统变量→寻找 Path 变量→编辑，在变量值最后输入 %M2%;（注意原来Path的变量值末尾有没有;号，如果没有，先输入；号再输入上面的代码）</p><p><img src="/images/post_images/2014-06-21-install-jdk-and-maven-11.png" alt="Alt text"></p><p>7. 测试maven配置是否成功，打开命令行窗口，输入mvn -v，如果有maven 版本信息输出则证明配置成功，否则请查看自己配置路径等是否正确。</p><p><strong>注意</strong>：安装maven前请确保已安装JDK并成功配置其环境变量。</p><p><img src="/images/post_images/2014-06-21-install-jdk-and-maven-12.png" alt="Alt text"></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;贴出这些主要是方便自己查看,配了好几次也没有具体记在心里,大写的尴尬……&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;JDK环境变量配置&quot;&gt;&lt;a href=&quot;#JDK环境变量配置&quot; class=&quot;headerlink&quot; title=&quot;JDK环境变量配置&quot;&gt;&lt;/a&gt;JDK环境变量配置&lt;/h3&gt;&lt;p&gt;1. 官网下载JDK：&lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.oracle.com/technetwork/java/javase/downloads/index.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2. 安装JDK 选择安装目录 安装过程中会出现两次安装提示 。第一次是安装 jdk ，第二次是安装 jre 。建议两个都安装在同一个java文件夹中的不同文件夹中,如下图。&lt;/p&gt;
    
    </summary>
    
      <category term="Tutorial" scheme="https://note.pin.bo/categories/Tutorial/"/>
    
    
      <category term="JDK" scheme="https://note.pin.bo/tags/JDK/"/>
    
      <category term="Maven" scheme="https://note.pin.bo/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://note.pin.bo/2014-06-06-hello-world/"/>
    <id>https://note.pin.bo/2014-06-06-hello-world/</id>
    <published>2014-06-05T17:00:00.000Z</published>
    <updated>2017-02-20T04:40:50.700Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Welcome to Hello World! This is my very first post,I will share one of my favorite poems for everyone,Let us encourage each other in our endeavours.</p></blockquote><a id="more"></a><blockquote class="blockquote-center"><h4 id="Seven-times-have-I-despised-my-soul"><a href="#Seven-times-have-I-despised-my-soul" class="headerlink" title="Seven times have I despised my soul"></a>Seven times have I despised my soul</h4><p><code>by Kahlil Gibran</code></p><p>The first time when I saw her being meek that she might attain height .</p><p>The second time when I saw her limping before the crippled .</p><p>The third time when she was given to choose between the hard and the easy , and she chose the easy .</p><p>The fourth time when she committed a wrong , and comforted herself that others also commit wrong .</p><p>The fifth time when she forbore for weakness , and attributed her patience to strength .</p><p>The sixth time when she despised the ugliness of a face , and knew not that it was one of her own masks .</p><p>And the seventh time when she sang a song of praise , and deemed it a virtue .</p><h4 id="曾有七次我鄙视了自己的灵魂"><a href="#曾有七次我鄙视了自己的灵魂" class="headerlink" title="曾有七次我鄙视了自己的灵魂"></a>曾有七次我鄙视了自己的灵魂</h4><p><code>冰心译</code></p><p>第一次是在她可以上升而却谦让的时候。</p><p>第二次是我看见她在瘸者面前跛行的时候。</p><p>第三次是让她选择难易，而她选择了易的时候。</p><p>第四次是她做错了事，却安慰自己说别人也也同样做错了事。</p><p>第五次是她容忍了软弱，而把她的忍受称为坚强。</p><p>第六次是当她轻蔑一个丑恶的容颜的时候，却不知道那是她自己的面具中之一。</p><p>第七次是当她唱一首颂歌的时候，自己相信这是一种美德。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Welcome to Hello World! This is my very first post,I will share one of my favorite poems for everyone,Let us encourage each other in our endeavours.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Essay" scheme="https://note.pin.bo/categories/Essay/"/>
    
    
      <category term="Hello World" scheme="https://note.pin.bo/tags/Hello-World/"/>
    
  </entry>
  
</feed>
